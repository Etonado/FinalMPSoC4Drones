-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_weights_layer2_weights_V_rom is 
    generic(
             DWIDTH     : integer := 21; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 400
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_weights_layer2_weights_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "111011110011011111100", 1 => "111100111110110110111", 
    2 => "000011010000101011000", 3 => "111101110110011110001", 
    4 => "000011100011101001111", 5 => "111010000110110110011", 
    6 => "110100110111010110100", 7 => "111111010111111111001", 
    8 => "000011000011100011001", 9 => "000100111001011101111", 
    10 => "000100110101110010001", 11 => "111111100010001100111", 
    12 => "111010100100001101010", 13 => "001011001101000011100", 
    14 => "110101100011101110111", 15 => "000110001111010111110", 
    16 => "111000011110100101101", 17 => "001000000001000100111", 
    18 => "111000000001011010011", 19 => "000010110111001010010", 
    20 => "000111100101101001011", 21 => "000010001010001111010", 
    22 => "110001011011100100111", 23 => "111011100011011111000", 
    24 => "001010011010011111001", 25 => "111010001000001011111", 
    26 => "001000110000111011111", 27 => "000001110000100100101", 
    28 => "110011001101000111111", 29 => "000010000001111000111", 
    30 => "001001010011011010001", 31 => "000100100000111100010", 
    32 => "000010100001101010010", 33 => "110111000010110001001", 
    34 => "000110110110011000010", 35 => "111011111001000110011", 
    36 => "000011001101010111011", 37 => "111100011010110111100", 
    38 => "111110001110001111101", 39 => "111100111010011100001", 
    40 => "111101111110001001101", 41 => "000000000111111010101", 
    42 => "111111101111100010101", 43 => "111101100101010001001", 
    44 => "000000111011101101011", 45 => "111011000101011100000", 
    46 => "000110010011000111010", 47 => "110111011001001011101", 
    48 => "111001001111100101100", 49 => "001000100101010101110", 
    50 => "001001100010011010010", 51 => "110101101111010011010", 
    52 => "001001011110110010010", 53 => "110111100100101110101", 
    54 => "111011011101100101101", 55 => "000000111010111100011", 
    56 => "000001111010011000111", 57 => "000000110010111100010", 
    58 => "000001001000000101111", 59 => "000000011001010010010", 
    60 => "111010111101000110110", 61 => "110111001011101101111", 
    62 => "110110101110000010000", 63 => "001100011000101101000", 
    64 => "111110110111101101111", 65 => "111100011100100000000", 
    66 => "111110001010001110010", 67 => "111100100100000101101", 
    68 => "000000000110110000000", 69 => "000010001101001010101", 
    70 => "000100111110011101111", 71 => "110100001001101010101", 
    72 => "000011111000110111110", 73 => "001001101000011110010", 
    74 => "110111101011011101001", 75 => "110110111110111000100", 
    76 => "000101110010010011011", 77 => "111010101001000010101", 
    78 => "000011001011110001000", 79 => "111100000110001000000", 
    80 => "110101010000010000101", 81 => "001100010100000110010", 
    82 => "110011011011110011001", 83 => "000011001111001001001", 
    84 => "000010110100011110001", 85 => "111100000000110011000", 
    86 => "000001100000110000011", 87 => "000000001100111011111", 
    88 => "111100101111101000101", 89 => "111111011000000110100", 
    90 => "111011011011000111101", 91 => "110010101011101101100", 
    92 => "001101000001000111110", 93 => "111111101011010001110", 
    94 => "000001000011100010011", 95 => "000000100010011110100", 
    96 => "111101011010110010110", 97 => "111110010011101011010", 
    98 => "000010001010100001100", 99 => "111101010110000101100", 
    100 => "000000110111000001001", 101 => "110110110101101011011", 
    102 => "111101000111010000001", 103 => "000011100110101011011", 
    104 => "000110011101001101100", 105 => "111100010010101010001", 
    106 => "111010001111101111001", 107 => "000111100000001111110", 
    108 => "001000000011110111000", 109 => "110011010100010111101", 
    110 => "000011000010110011100", 111 => "000010000100110010111", 
    112 => "111111100110000010001", 113 => "111110010110000000001", 
    114 => "111111100110010010111", 115 => "111101000110111110000", 
    116 => "111110011010011001110", 117 => "111110001110110101001", 
    118 => "111101011010010011100", 119 => "000000011111011111101", 
    120 => "001001101111010100100", 121 => "001011101101100110100", 
    122 => "110110100101101110010", 123 => "111100001011110010011", 
    124 => "110010100011100001001", 125 => "110100110110101010101", 
    126 => "000011011010010101101", 127 => "111101010001111001101", 
    128 => "001001100101011011000", 129 => "111010101100001111101", 
    130 => "110101001101001110110", 131 => "111010101011001010100", 
    132 => "111101010010100011001", 133 => "001000111110010011001", 
    134 => "000000100001111001010", 135 => "111100101100101011000", 
    136 => "111110011001000100000", 137 => "001000010111100011111", 
    138 => "111110000000010011011", 139 => "110110100100101100010", 
    140 => "000010101000101010010", 141 => "110010111101100010110", 
    142 => "001001010000010110100", 143 => "001000011010111100101", 
    144 => "110011111011001000100", 145 => "000110110101110010011", 
    146 => "000111010011111000011", 147 => "101111111000011011000", 
    148 => "111100001010100100111", 149 => "000110011011101110001", 
    150 => "000000110111010000000", 151 => "111101001001000011010", 
    152 => "000011010010111001001", 153 => "111100110100001111010", 
    154 => "000011011001010100111", 155 => "000100000101000010001", 
    156 => "111100110001100110000", 157 => "111111111101101110000", 
    158 => "111110001101010110010", 159 => "111110101111000110101", 
    160 => "111011100100010000011", 161 => "000010100101111010011", 
    162 => "111110011101011011011", 163 => "111000110001001000111", 
    164 => "000110100000111101110", 165 => "111101111000100010000", 
    166 => "000000010100100101101", 167 => "111100000010001111110", 
    168 => "000010101011001000001", 169 => "000011111111000101001", 
    170 => "000001000110110011011", 171 => "000000100011010111100", 
    172 => "111111111001100001111", 173 => "111110000001100010101", 
    174 => "000001000101100100100", 175 => "000010010000001110001", 
    176 => "110110001110111100011", 177 => "110101011011001111101", 
    178 => "001101100010011010001", 179 => "001010100010011010110", 
    180 => "000010101011001101000", 181 => "000011100001111001111", 
    182 => "000000011110100100111", 183 => "000011000100110000011", 
    184 => "111111101101010100000", 185 => "001001011100111001110", 
    186 => "000100100110110000010", 187 => "000001101100110011101", 
    188 => "000011010001110110110", 189 => "110100111101101110101", 
    190 => "000011011001010101111", 191 => "111101100011000011110", 
    192 => "000000000001101100101", 193 => "111100000100011010101", 
    194 => "000000011100011101101", 195 => "111000000011100001000", 
    196 => "001010111010100111010", 197 => "111100100111101101110", 
    198 => "000110010110101100001", 199 => "110010111110001010000", 
    200 => "001011000001111010100", 201 => "000111100010011011011", 
    202 => "111110100011011000011", 203 => "110010010111000100111", 
    204 => "111111001010011111111", 205 => "001000010010010000100", 
    206 => "110111000110100111110", 207 => "000101101110110110000", 
    208 => "110001111001011101111", 209 => "000011000011111100000", 
    210 => "110101111101110011111", 211 => "111000110011100001000", 
    212 => "001000000100111010110", 213 => "001001011000000000111", 
    214 => "111110011111111110111", 215 => "111110111100110101011", 
    216 => "000011000000001101101", 217 => "000000110001001100111", 
    218 => "000001110000001100110", 219 => "000000101110100000000", 
    220 => "110001100000100000011", 221 => "001111111010111001101", 
    222 => "110001010111111110000", 223 => "000111100110100000110", 
    224 => "111001101111110011101", 225 => "111110100001100100101", 
    226 => "111100000101001010000", 227 => "111111011011110000000", 
    228 => "000011110011010010011", 229 => "111111010000101100010", 
    230 => "111110011110110101110", 231 => "000010000011111101110", 
    232 => "111111100001001110001", 233 => "111110111010011011100", 
    234 => "000000010101010001101", 235 => "111111110101111110010", 
    236 => "000011101110100111000", 237 => "000011001001000101001", 
    238 => "111111000011111110110", 239 => "111111110111100101111", 
    240 => "111111010011000000001", 241 => "111100111011000011100", 
    242 => "000001001110111111101", 243 => "111101100000011001100", 
    244 => "000011111010010000110", 245 => "111101100100001111110", 
    246 => "111101001000100010101", 247 => "111111000100000001000", 
    248 => "000010011100101111001", 249 => "111101001110010100100", 
    250 => "111110111100000111110", 251 => "111110001010110101111", 
    252 => "111111100011011001011", 253 => "000011000000111011111", 
    254 => "111100001101101010100", 255 => "111100100010101000001", 
    256 => "111100100001000001011", 257 => "111110110001100001110", 
    258 => "111101101010001101100", 259 => "111100101011001110100", 
    260 => "111110101011101111000", 261 => "111100000000111110110", 
    262 => "000000010001110001110", 263 => "111101100000101001000", 
    264 => "000011000000000110010", 265 => "111000110101110100100", 
    266 => "111110010010001000010", 267 => "111001001110101111010", 
    268 => "111001010110000110000", 269 => "001010101000111001111", 
    270 => "111111010101111001010", 271 => "000011001000101011000", 
    272 => "111110101001110110011", 273 => "000100000010101010010", 
    274 => "111100000110011010111", 275 => "111111010110010011010", 
    276 => "000010101111100010111", 277 => "000000001011001000111", 
    278 => "000001000110110110010", 279 => "111100011010011110011", 
    280 => "000000101001011101010", 281 => "111100101100010010000", 
    282 => "000010010111111101111", 283 => "111111010101001001111", 
    284 => "111100101010110110100", 285 => "111111011110011000101", 
    286 => "000010001111101011001", 287 => "111111100000000011101", 
    288 => "000010010110011011111", 289 => "111110010010011100010", 
    290 => "000001001101011011010", 291 => "000100001000100011001", 
    292 => "111100101100101011101", 293 => "000000111001011101010", 
    294 => "111101001110111001011", 295 => "111101001110001000000", 
    296 => "000001010000111101101", 297 => "000001101100100100010", 
    298 => "111011111010110011111", 299 => "000001011101011010100", 
    300 => "111111101011101110000", 301 => "000001010001111010010", 
    302 => "000011111100100100000", 303 => "000011010011000011101", 
    304 => "111101110100110101001", 305 => "111110001100010110111", 
    306 => "010001100011010101100", 307 => "100101011110000001011", 
    308 => "000001110010001101111", 309 => "110100010011110010000", 
    310 => "111001001100000110101", 311 => "110111110000101010011", 
    312 => "001001001101100101111", 313 => "111001100000110101000", 
    314 => "000001101101101011101", 315 => "111011111001111000010", 
    316 => "001101100010011101101", 317 => "110110011000100100000", 
    318 => "001001010001111100111", 319 => "110101011011110111010", 
    320 => "000100000110110100111", 321 => "000011000110110011101", 
    322 => "000000011100011101101", 323 => "111111111000101010010", 
    324 => "111111100111111101010", 325 => "000110111111001111011", 
    326 => "110110010101100110101", 327 => "000100100111110100011", 
    328 => "110001101001001101010", 329 => "111000000001101100010", 
    330 => "000000001000110011111", 331 => "111110111100011001101", 
    332 => "000000011101001010000", 333 => "111100111100011011011", 
    334 => "111101010010110001000", 335 => "111110011110000000110", 
    336 => "111110100100110000000", 337 => "000001010111100101101", 
    338 => "000010011000010101000", 339 => "111110100111001100000", 
    340 => "000011011000110100110", 341 => "000011001010001110110", 
    342 => "000000010101101011001", 343 => "000010011110101011101", 
    344 => "000010110101011101001", 345 => "000110010100100110000", 
    346 => "110001000110000011001", 347 => "111011101111110111101", 
    348 => "000101111011100110101", 349 => "001100000101111101000", 
    350 => "111001100010011110011", 351 => "000101010011011111111", 
    352 => "000010100010000000010", 353 => "110110011101100111110", 
    354 => "110100111101110100110", 355 => "111100011100010100111", 
    356 => "111110101110110001110", 357 => "000010111110010111111", 
    358 => "111100000000101001111", 359 => "111100100000100010001", 
    360 => "101111100101100100101", 361 => "000100111100010110000", 
    362 => "010000011001110111001", 363 => "111110101010010011100", 
    364 => "110001010111001110010", 365 => "111100111100101100010", 
    366 => "000011100101010110110", 367 => "111111000111101010001", 
    368 => "111110000001010101101", 369 => "000000100000110110001", 
    370 => "110111011000000111101", 371 => "000001101100000001000", 
    372 => "000001110111110000000", 373 => "111100111110000010101", 
    374 => "000000111001001001001", 375 => "000000111011010101000", 
    376 => "111100000011110010101", 377 => "000001011111010101100", 
    378 => "000011010100010000111", 379 => "000010110100100100110", 
    380 => "000100001010011001111", 381 => "111110011101110001110", 
    382 => "111101110000000100000", 383 => "111111011011001010100", 
    384 => "111110011100111111001", 385 => "001001000000001111011", 
    386 => "000110101010000000111", 387 => "000100100100001001010", 
    388 => "110010000110101011001", 389 => "111010001110011010010", 
    390 => "000010011111101001011", 391 => "111011111011101011000", 
    392 => "111111100101011100010", 393 => "111011110011101101101", 
    394 => "000001011111010101110", 395 => "001011001010010111111", 
    396 => "001111000100111101101", 397 => "101010001001000011001", 
    398 => "000100001101000001011", 399 => "111011101111110101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_weights_layer2_weights_V is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 400;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_weights_layer2_weights_V is
    component nn_inference_weights_layer2_weights_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_weights_layer2_weights_V_rom_U :  component nn_inference_weights_layer2_weights_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


