// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nn_inference_nn_inference,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.095700,HLS_SYN_LAT=23674,HLS_SYN_TPT=none,HLS_SYN_MEM=53,HLS_SYN_DSP=0,HLS_SYN_FF=554,HLS_SYN_LUT=2217,HLS_VERSION=2020_2}" *)

module nn_inference (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_img_address0,
        input_img_ce0,
        input_img_q0,
        input_img_address1,
        input_img_ce1,
        input_img_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_pp0_stage0 = 11'd4;
parameter    ap_ST_fsm_state6 = 11'd8;
parameter    ap_ST_fsm_pp1_stage0 = 11'd16;
parameter    ap_ST_fsm_state11 = 11'd32;
parameter    ap_ST_fsm_state12 = 11'd64;
parameter    ap_ST_fsm_pp2_stage0 = 11'd128;
parameter    ap_ST_fsm_state16 = 11'd256;
parameter    ap_ST_fsm_pp3_stage0 = 11'd512;
parameter    ap_ST_fsm_state19 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_img_address0;
output   input_img_ce0;
input  [31:0] input_img_q0;
output  [9:0] input_img_address1;
output   input_img_ce1;
input  [31:0] input_img_q1;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_img_ce0;
reg input_img_ce1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] weights_layer1_weights_V_address0;
reg    weights_layer1_weights_V_ce0;
wire  signed [19:0] weights_layer1_weights_V_q0;
wire   [15:0] weights_layer1_weights_V_address1;
reg    weights_layer1_weights_V_ce1;
wire  signed [19:0] weights_layer1_weights_V_q1;
wire   [8:0] weights_layer2_weights_V_address0;
reg    weights_layer2_weights_V_ce0;
wire  signed [20:0] weights_layer2_weights_V_q0;
wire   [8:0] weights_layer2_weights_V_address1;
reg    weights_layer2_weights_V_ce1;
wire  signed [20:0] weights_layer2_weights_V_q1;
reg   [9:0] k_reg_341;
reg   [23:0] sum_V_10_reg_352;
reg   [6:0] i_reg_365;
reg   [6:0] k_1_reg_387;
reg   [23:0] sum_V_12_reg_398;
reg   [2:0] i_1_reg_411;
reg   [31:0] max_idx_reg_423;
reg   [23:0] empty_24_reg_435;
wire   [6:0] add_ln6_fu_451_p2;
reg   [6:0] add_ln6_reg_1293;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln6_fu_457_p2;
wire   [63:0] zext_ln6_fu_463_p1;
reg   [63:0] zext_ln6_reg_1302;
wire   [15:0] zext_ln6_1_fu_467_p1;
reg   [15:0] zext_ln6_1_reg_1307;
wire   [0:0] icmp_ln10_fu_471_p2;
reg   [0:0] icmp_ln10_reg_1313;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_1313_pp0_iter1_reg;
wire   [9:0] add_ln10_fu_477_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] or_ln10_fu_524_p2;
reg   [9:0] or_ln10_reg_1332;
wire   [42:0] trunc_ln1192_fu_548_p1;
reg   [42:0] trunc_ln1192_reg_1339;
reg   [0:0] tmp_8_reg_1344;
wire   [23:0] sum_V_4_fu_688_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [6:0] add_ln48_fu_694_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_state10_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln48_fu_700_p2;
reg   [6:0] temp_output_0_V_addr_1_reg_1373;
reg   [6:0] temp_output_0_V_addr_1_reg_1373_pp1_iter1_reg;
reg   [6:0] temp_output_0_V_addr_1_reg_1373_pp1_iter2_reg;
wire   [0:0] icmp_ln885_fu_711_p2;
reg   [0:0] icmp_ln885_reg_1379;
reg   [0:0] icmp_ln885_reg_1379_pp1_iter2_reg;
wire   [0:0] p_Result_7_fu_717_p3;
reg   [0:0] p_Result_7_reg_1383;
wire   [23:0] tmp_V_2_fu_731_p3;
reg   [23:0] tmp_V_2_reg_1388;
wire   [0:0] icmp_ln908_fu_869_p2;
reg   [0:0] icmp_ln908_reg_1393;
wire   [31:0] add_ln908_fu_875_p2;
reg   [31:0] add_ln908_reg_1398;
wire   [31:0] sub_ln909_fu_881_p2;
reg   [31:0] sub_ln909_reg_1403;
wire   [0:0] tobool34_i_i_i105_fu_887_p2;
reg   [0:0] tobool34_i_i_i105_reg_1408;
wire   [10:0] trunc_ln893_fu_893_p1;
reg   [10:0] trunc_ln893_reg_1413;
wire   [0:0] icmp_ln1506_fu_1009_p2;
reg   [0:0] icmp_ln1506_reg_1423;
wire   [0:0] icmp_ln1506_1_fu_1015_p2;
reg   [0:0] icmp_ln1506_1_reg_1428;
wire   [2:0] add_ln26_fu_1031_p2;
reg   [2:0] add_ln26_reg_1436;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln26_fu_1037_p2;
wire   [63:0] zext_ln26_fu_1043_p1;
reg   [63:0] zext_ln26_reg_1445;
wire   [8:0] zext_ln26_1_fu_1047_p1;
reg   [8:0] zext_ln26_1_reg_1450;
wire   [0:0] icmp_ln30_fu_1051_p2;
reg   [0:0] icmp_ln30_reg_1456;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state13_pp2_stage0_iter0;
wire    ap_block_state14_pp2_stage0_iter1;
wire    ap_block_state15_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln30_reg_1456_pp2_iter1_reg;
wire   [6:0] add_ln30_fu_1057_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [6:0] or_ln30_fu_1096_p2;
reg   [6:0] or_ln30_reg_1475;
wire   [42:0] trunc_ln1192_2_fu_1121_p1;
reg   [42:0] trunc_ln1192_2_reg_1486;
reg   [0:0] tmp_14_reg_1491;
wire   [23:0] temp_output_0_V_q0;
reg  signed [23:0] r_V_6_reg_1501;
reg    ap_enable_reg_pp2_iter1;
wire   [23:0] sum_V_9_fu_1244_p2;
reg    ap_enable_reg_pp2_iter2;
wire   [2:0] add_ln65_fu_1250_p2;
reg   [2:0] add_ln65_reg_1511;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state17_pp3_stage0_iter0;
wire    ap_block_state18_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln65_fu_1256_p2;
reg   [0:0] icmp_ln65_reg_1516;
wire   [23:0] select_ln67_fu_1273_p3;
reg    ap_enable_reg_pp3_iter1;
wire   [31:0] max_idx_1_fu_1285_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_condition_pp0_exit_iter1_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_flush_enable;
reg    ap_condition_pp2_exit_iter1_state14;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_flush_enable;
reg   [6:0] temp_output_0_V_address0;
reg    temp_output_0_V_ce0;
reg    temp_output_0_V_we0;
reg   [23:0] temp_output_0_V_d0;
reg   [6:0] temp_output_0_V_address1;
reg    temp_output_0_V_ce1;
wire  signed [23:0] temp_output_0_V_q1;
reg   [2:0] temp_output2_0_V_address0;
reg    temp_output2_0_V_ce0;
reg    temp_output2_0_V_we0;
reg   [23:0] temp_output2_0_V_d0;
wire   [23:0] temp_output2_0_V_q0;
reg   [6:0] j_reg_330;
wire    ap_CS_fsm_state6;
wire    ap_block_pp0_stage0;
reg   [2:0] j_1_reg_376;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state11;
wire    ap_block_pp2_stage0;
reg   [2:0] ap_phi_mux_i_1_phi_fu_415_p4;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln1118_1_fu_519_p1;
wire   [63:0] k_cast14_fu_483_p1;
wire   [63:0] zext_ln1118_3_fu_593_p1;
wire   [63:0] zext_ln8_fu_560_p1;
wire   [63:0] i_cast_fu_706_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln1118_5_fu_1091_p1;
wire   [63:0] k_1_cast16_fu_1063_p1;
wire   [63:0] zext_ln28_fu_1102_p1;
wire   [63:0] zext_ln1118_7_fu_1154_p1;
wire   [63:0] trunc_ln67_cast_fu_1262_p1;
wire   [0:0] and_ln1506_fu_1025_p2;
wire   [63:0] grp_fu_446_p0;
wire   [13:0] tmp_3_fu_496_p3;
wire   [15:0] tmp_2_fu_488_p3;
wire   [15:0] zext_ln1118_fu_504_p1;
wire   [15:0] add_ln1118_fu_508_p2;
wire   [15:0] add_ln1118_1_fu_514_p2;
wire  signed [23:0] r_V_fu_530_p1;
wire   [43:0] r_V_1_fu_542_p2;
wire   [13:0] tmp_5_fu_571_p3;
wire   [15:0] tmp_4_fu_564_p3;
wire   [15:0] zext_ln1118_2_fu_578_p1;
wire   [15:0] add_ln1118_2_fu_582_p2;
wire   [15:0] add_ln1118_3_fu_588_p2;
wire   [42:0] lhs_1_fu_598_p3;
wire   [42:0] ret_V_fu_606_p2;
wire   [23:0] zext_ln415_fu_621_p1;
wire   [23:0] sum_V_fu_611_p4;
wire  signed [23:0] r_V_2_fu_630_p1;
wire   [23:0] sum_V_11_fu_624_p2;
wire   [43:0] r_V_3_fu_642_p2;
wire   [42:0] lhs_3_fu_648_p3;
wire   [42:0] trunc_ln1192_1_fu_656_p1;
wire   [42:0] ret_V_1_fu_660_p2;
wire   [0:0] tmp_9_fu_676_p3;
wire   [23:0] zext_ln415_1_fu_684_p1;
wire   [23:0] sum_V_2_fu_666_p4;
wire   [23:0] tmp_V_fu_725_p2;
reg   [23:0] p_Result_s_fu_739_p4;
wire   [31:0] p_Result_8_fu_749_p3;
reg   [31:0] l_fu_757_p3;
wire   [31:0] sub_ln894_fu_765_p2;
wire   [31:0] lsb_index_fu_775_p2;
wire   [30:0] tmp_11_fu_781_p4;
wire   [4:0] trunc_ln897_fu_797_p1;
wire   [4:0] sub_ln897_fu_801_p2;
wire   [23:0] zext_ln897_fu_807_p1;
wire   [23:0] lshr_ln897_fu_811_p2;
wire   [23:0] p_Result_4_fu_817_p2;
wire   [0:0] tmp_12_fu_829_p3;
wire   [0:0] icmp_ln896_fu_791_p2;
wire   [0:0] icmp_ln897_fu_823_p2;
wire   [23:0] trunc_ln894_fu_771_p1;
wire   [23:0] add_ln899_fu_849_p2;
wire   [0:0] p_Result_3_fu_855_p3;
wire   [0:0] and_ln896_fu_843_p2;
wire   [0:0] a_fu_863_p2;
wire   [0:0] xor_ln899_fu_837_p2;
wire   [63:0] zext_ln907_fu_897_p1;
wire   [63:0] zext_ln908_fu_900_p1;
wire   [63:0] zext_ln909_fu_909_p1;
wire   [63:0] lshr_ln908_fu_903_p2;
wire   [63:0] shl_ln909_fu_912_p2;
wire   [63:0] m_1_fu_918_p3;
wire   [63:0] zext_ln911_fu_925_p1;
wire   [63:0] m_3_fu_928_p2;
wire   [62:0] m_fu_934_p4;
wire   [0:0] p_Result_5_fu_948_p3;
wire   [10:0] sub_ln915_fu_964_p2;
wire   [10:0] select_ln893_fu_956_p3;
wire   [10:0] add_ln915_fu_969_p2;
wire   [63:0] zext_ln912_fu_944_p1;
wire   [11:0] tmp_fu_975_p3;
wire   [63:0] p_Result_9_fu_982_p5;
wire   [51:0] trunc_ln4_fu_999_p4;
wire   [0:0] or_ln1506_fu_1021_p2;
wire   [0:0] grp_fu_446_p2;
wire   [8:0] tmp_6_fu_1072_p3;
wire   [8:0] zext_ln1118_4_fu_1068_p1;
wire   [8:0] add_ln1118_4_fu_1080_p2;
wire   [8:0] add_ln1118_5_fu_1086_p2;
wire   [44:0] r_V_5_fu_1115_p2;
wire   [8:0] tmp_7_fu_1136_p3;
wire   [8:0] zext_ln1118_6_fu_1133_p1;
wire   [8:0] add_ln1118_6_fu_1143_p2;
wire   [8:0] add_ln1118_7_fu_1149_p2;
wire   [42:0] lhs_5_fu_1159_p3;
wire   [42:0] ret_V_2_fu_1167_p2;
wire   [23:0] zext_ln415_2_fu_1182_p1;
wire   [23:0] sum_V_5_fu_1172_p4;
wire   [23:0] sum_V_13_fu_1185_p2;
wire   [44:0] r_V_7_fu_1198_p2;
wire   [42:0] lhs_7_fu_1204_p3;
wire   [42:0] trunc_ln1192_3_fu_1212_p1;
wire   [42:0] ret_V_3_fu_1216_p2;
wire   [0:0] tmp_15_fu_1232_p3;
wire   [23:0] zext_ln415_3_fu_1240_p1;
wire   [23:0] sum_V_7_fu_1222_p4;
wire   [0:0] icmp_ln1494_fu_1267_p2;
wire   [31:0] zext_ln67_fu_1281_p1;
wire    ap_block_pp1_stage0_00001;
wire    ap_CS_fsm_state19;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

nn_inference_weights_layer1_weights_V #(
    .DataWidth( 20 ),
    .AddressRange( 46080 ),
    .AddressWidth( 16 ))
weights_layer1_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_layer1_weights_V_address0),
    .ce0(weights_layer1_weights_V_ce0),
    .q0(weights_layer1_weights_V_q0),
    .address1(weights_layer1_weights_V_address1),
    .ce1(weights_layer1_weights_V_ce1),
    .q1(weights_layer1_weights_V_q1)
);

nn_inference_weights_layer2_weights_V #(
    .DataWidth( 21 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
weights_layer2_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_layer2_weights_V_address0),
    .ce0(weights_layer2_weights_V_ce0),
    .q0(weights_layer2_weights_V_q0),
    .address1(weights_layer2_weights_V_address1),
    .ce1(weights_layer2_weights_V_ce1),
    .q1(weights_layer2_weights_V_q1)
);

nn_inference_temp_output_0_V #(
    .DataWidth( 24 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
temp_output_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output_0_V_address0),
    .ce0(temp_output_0_V_ce0),
    .we0(temp_output_0_V_we0),
    .d0(temp_output_0_V_d0),
    .q0(temp_output_0_V_q0),
    .address1(temp_output_0_V_address1),
    .ce1(temp_output_0_V_ce1),
    .q1(temp_output_0_V_q1)
);

nn_inference_temp_output2_0_V #(
    .DataWidth( 24 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
temp_output2_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output2_0_V_address0),
    .ce0(temp_output2_0_V_ce0),
    .we0(temp_output2_0_V_we0),
    .d0(temp_output2_0_V_d0),
    .q0(temp_output2_0_V_q0)
);

nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_446_p0),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_446_p2)
);

nn_inference_mul_20s_24s_44_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 44 ))
mul_20s_24s_44_1_1_U2(
    .din0(weights_layer1_weights_V_q1),
    .din1(r_V_fu_530_p1),
    .dout(r_V_1_fu_542_p2)
);

nn_inference_mul_20s_24s_44_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 44 ))
mul_20s_24s_44_1_1_U3(
    .din0(weights_layer1_weights_V_q0),
    .din1(r_V_2_fu_630_p1),
    .dout(r_V_3_fu_642_p2)
);

nn_inference_mul_21s_24s_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 21 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 45 ))
mul_21s_24s_45_1_1_U4(
    .din0(weights_layer2_weights_V_q1),
    .din1(temp_output_0_V_q1),
    .dout(r_V_5_fu_1115_p2)
);

nn_inference_mul_21s_24s_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 21 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 45 ))
mul_21s_24s_45_1_1_U5(
    .din0(weights_layer2_weights_V_q0),
    .din1(r_V_6_reg_1501),
    .dout(r_V_7_fu_1198_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln6_fu_457_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((icmp_ln6_fu_457_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_condition_pp0_exit_iter1_state4) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter1_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln6_fu_457_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln6_fu_457_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if (((icmp_ln6_fu_457_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp2_flush_enable)) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln26_fu_1037_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((((ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_condition_pp2_exit_iter1_state14) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((icmp_ln26_fu_1037_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter1_state14) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((icmp_ln26_fu_1037_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((icmp_ln26_fu_1037_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((icmp_ln26_fu_1037_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_1037_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        empty_24_reg_435 <= 24'd12635341;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln65_reg_1516 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        empty_24_reg_435 <= select_ln67_fu_1273_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_1037_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        i_1_reg_411 <= 3'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln65_reg_1516 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_1_reg_411 <= add_ln65_reg_1511;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_457_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_365 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln48_fu_700_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_reg_365 <= add_ln48_fu_694_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_1_reg_376 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        j_1_reg_376 <= add_ln26_reg_1436;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_330 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_330 <= add_ln6_reg_1293;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_1037_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        k_1_reg_387 <= 7'd0;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln30_fu_1051_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        k_1_reg_387 <= add_ln30_fu_1057_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_457_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_341 <= 10'd0;
    end else if (((icmp_ln10_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_reg_341 <= add_ln10_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_1037_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        max_idx_reg_423 <= 32'd4294967295;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln65_reg_1516 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        max_idx_reg_423 <= max_idx_1_fu_1285_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_457_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_V_10_reg_352 <= 24'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln10_reg_1313_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_V_10_reg_352 <= sum_V_4_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_1037_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        sum_V_12_reg_398 <= 24'd0;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln30_reg_1456_pp2_iter1_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        sum_V_12_reg_398 <= sum_V_9_fu_1244_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln26_reg_1436 <= add_ln26_fu_1031_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        add_ln65_reg_1511 <= add_ln65_fu_1250_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln6_reg_1293 <= add_ln6_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln885_fu_711_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln908_reg_1398 <= add_ln908_fu_875_p2;
        icmp_ln908_reg_1393 <= icmp_ln908_fu_869_p2;
        p_Result_7_reg_1383 <= temp_output_0_V_q1[32'd23];
        sub_ln909_reg_1403 <= sub_ln909_fu_881_p2;
        tmp_V_2_reg_1388 <= tmp_V_2_fu_731_p3;
        tobool34_i_i_i105_reg_1408 <= tobool34_i_i_i105_fu_887_p2;
        trunc_ln893_reg_1413 <= trunc_ln893_fu_893_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln10_reg_1313 <= icmp_ln10_fu_471_p2;
        icmp_ln10_reg_1313_pp0_iter1_reg <= icmp_ln10_reg_1313;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_reg_1379 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln1506_1_reg_1428 <= icmp_ln1506_1_fu_1015_p2;
        icmp_ln1506_reg_1423 <= icmp_ln1506_fu_1009_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln30_reg_1456 <= icmp_ln30_fu_1051_p2;
        icmp_ln30_reg_1456_pp2_iter1_reg <= icmp_ln30_reg_1456;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln65_reg_1516 <= icmp_ln65_fu_1256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln885_reg_1379 <= icmp_ln885_fu_711_p2;
        temp_output_0_V_addr_1_reg_1373_pp1_iter1_reg <= temp_output_0_V_addr_1_reg_1373;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln885_reg_1379_pp1_iter2_reg <= icmp_ln885_reg_1379;
        temp_output_0_V_addr_1_reg_1373_pp1_iter2_reg <= temp_output_0_V_addr_1_reg_1373_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln10_reg_1332[9 : 1] <= or_ln10_fu_524_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_1051_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        or_ln30_reg_1475[6 : 1] <= or_ln30_fu_1096_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln30_reg_1456 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        r_V_6_reg_1501 <= temp_output_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln48_fu_700_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        temp_output_0_V_addr_1_reg_1373 <= i_cast_fu_706_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1456 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_14_reg_1491 <= r_V_5_fu_1115_p2[32'd18];
        trunc_ln1192_2_reg_1486 <= trunc_ln1192_2_fu_1121_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1313 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_8_reg_1344 <= r_V_1_fu_542_p2[32'd18];
        trunc_ln1192_reg_1339 <= trunc_ln1192_fu_548_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_1037_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        zext_ln26_1_reg_1450[2 : 0] <= zext_ln26_1_fu_1047_p1[2 : 0];
        zext_ln26_reg_1445[2 : 0] <= zext_ln26_fu_1043_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_457_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln6_1_reg_1307[6 : 0] <= zext_ln6_1_fu_467_p1[6 : 0];
        zext_ln6_reg_1302[6 : 0] <= zext_ln6_fu_463_p1[6 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_471_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln48_fu_700_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_condition_pp2_exit_iter1_state14 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter1_state14 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_1051_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
        ap_condition_pp2_flush_enable = 1'b1;
    end else begin
        ap_condition_pp2_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln65_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln65_reg_1516 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_i_1_phi_fu_415_p4 = add_ln65_reg_1511;
    end else begin
        ap_phi_mux_i_1_phi_fu_415_p4 = i_1_reg_411;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_img_ce0 = 1'b1;
    end else begin
        input_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_img_ce1 = 1'b1;
    end else begin
        input_img_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        temp_output2_0_V_address0 = trunc_ln67_cast_fu_1262_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_output2_0_V_address0 = zext_ln26_reg_1445;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        temp_output2_0_V_address0 = 64'd0;
    end else begin
        temp_output2_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        temp_output2_0_V_ce0 = 1'b1;
    end else begin
        temp_output2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_output2_0_V_d0 = sum_V_12_reg_398;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        temp_output2_0_V_d0 = 24'd524288;
    end else begin
        temp_output2_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        temp_output2_0_V_we0 = 1'b1;
    end else begin
        temp_output2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        temp_output_0_V_address0 = zext_ln28_fu_1102_p1;
    end else if (((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        temp_output_0_V_address0 = temp_output_0_V_addr_1_reg_1373_pp1_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_V_address0 = zext_ln6_reg_1302;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        temp_output_0_V_address0 = 64'd0;
    end else begin
        temp_output_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        temp_output_0_V_address1 = k_1_cast16_fu_1063_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        temp_output_0_V_address1 = i_cast_fu_706_p1;
    end else begin
        temp_output_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        temp_output_0_V_ce0 = 1'b1;
    end else begin
        temp_output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        temp_output_0_V_ce1 = 1'b1;
    end else begin
        temp_output_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        temp_output_0_V_d0 = 24'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_V_d0 = sum_V_10_reg_352;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        temp_output_0_V_d0 = 24'd524288;
    end else begin
        temp_output_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln885_reg_1379_pp1_iter2_reg == 1'd0) & (1'd1 == and_ln1506_fu_1025_p2) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        temp_output_0_V_we0 = 1'b1;
    end else begin
        temp_output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights_layer1_weights_V_ce0 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights_layer1_weights_V_ce1 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        weights_layer2_weights_V_ce0 = 1'b1;
    end else begin
        weights_layer2_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        weights_layer2_weights_V_ce1 = 1'b1;
    end else begin
        weights_layer2_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_457_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln48_fu_700_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter3 == 1'b1) & (ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln48_fu_700_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln26_fu_1037_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((ap_enable_reg_pp2_iter1 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_863_p2 = (p_Result_3_fu_855_p3 | and_ln896_fu_843_p2);

assign add_ln10_fu_477_p2 = (k_reg_341 + 10'd2);

assign add_ln1118_1_fu_514_p2 = (add_ln1118_fu_508_p2 + zext_ln6_1_reg_1307);

assign add_ln1118_2_fu_582_p2 = (tmp_4_fu_564_p3 + zext_ln1118_2_fu_578_p1);

assign add_ln1118_3_fu_588_p2 = (add_ln1118_2_fu_582_p2 + zext_ln6_1_reg_1307);

assign add_ln1118_4_fu_1080_p2 = (tmp_6_fu_1072_p3 + zext_ln1118_4_fu_1068_p1);

assign add_ln1118_5_fu_1086_p2 = (add_ln1118_4_fu_1080_p2 + zext_ln26_1_reg_1450);

assign add_ln1118_6_fu_1143_p2 = (tmp_7_fu_1136_p3 + zext_ln1118_6_fu_1133_p1);

assign add_ln1118_7_fu_1149_p2 = (add_ln1118_6_fu_1143_p2 + zext_ln26_1_reg_1450);

assign add_ln1118_fu_508_p2 = (tmp_2_fu_488_p3 + zext_ln1118_fu_504_p1);

assign add_ln26_fu_1031_p2 = (j_1_reg_376 + 3'd1);

assign add_ln30_fu_1057_p2 = (k_1_reg_387 + 7'd2);

assign add_ln48_fu_694_p2 = (i_reg_365 + 7'd1);

assign add_ln65_fu_1250_p2 = (ap_phi_mux_i_1_phi_fu_415_p4 + 3'd1);

assign add_ln6_fu_451_p2 = (j_reg_330 + 7'd1);

assign add_ln899_fu_849_p2 = ($signed(trunc_ln894_fu_771_p1) + $signed(24'd16777163));

assign add_ln908_fu_875_p2 = ($signed(sub_ln894_fu_765_p2) + $signed(32'd4294967242));

assign add_ln915_fu_969_p2 = (sub_ln915_fu_964_p2 + select_ln893_fu_956_p3);

assign and_ln1506_fu_1025_p2 = (or_ln1506_fu_1021_p2 & grp_fu_446_p2);

assign and_ln896_fu_843_p2 = (icmp_ln897_fu_823_p2 & icmp_ln896_fu_791_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_return = max_idx_reg_423;

assign grp_fu_446_p0 = p_Result_9_fu_982_p5;

assign i_cast_fu_706_p1 = i_reg_365;

assign icmp_ln10_fu_471_p2 = ((k_reg_341 < 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_1267_p2 = (($signed(temp_output2_0_V_q0) > $signed(empty_24_reg_435)) ? 1'b1 : 1'b0);

assign icmp_ln1506_1_fu_1015_p2 = ((trunc_ln4_fu_999_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1506_fu_1009_p2 = ((add_ln915_fu_969_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_1037_p2 = ((j_1_reg_376 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_1051_p2 = ((k_1_reg_387 < 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_700_p2 = ((i_reg_365 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_1256_p2 = ((ap_phi_mux_i_1_phi_fu_415_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_457_p2 = ((j_reg_330 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln885_fu_711_p2 = ((temp_output_0_V_q1 == 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln896_fu_791_p2 = (($signed(tmp_11_fu_781_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln897_fu_823_p2 = ((p_Result_4_fu_817_p2 != 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln908_fu_869_p2 = (($signed(lsb_index_fu_775_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign input_img_address0 = zext_ln8_fu_560_p1;

assign input_img_address1 = k_cast14_fu_483_p1;

assign k_1_cast16_fu_1063_p1 = k_1_reg_387;

assign k_cast14_fu_483_p1 = k_reg_341;


always @ (p_Result_8_fu_749_p3) begin
    if (p_Result_8_fu_749_p3[0] == 1'b1) begin
        l_fu_757_p3 = 32'd0;
    end else if (p_Result_8_fu_749_p3[1] == 1'b1) begin
        l_fu_757_p3 = 32'd1;
    end else if (p_Result_8_fu_749_p3[2] == 1'b1) begin
        l_fu_757_p3 = 32'd2;
    end else if (p_Result_8_fu_749_p3[3] == 1'b1) begin
        l_fu_757_p3 = 32'd3;
    end else if (p_Result_8_fu_749_p3[4] == 1'b1) begin
        l_fu_757_p3 = 32'd4;
    end else if (p_Result_8_fu_749_p3[5] == 1'b1) begin
        l_fu_757_p3 = 32'd5;
    end else if (p_Result_8_fu_749_p3[6] == 1'b1) begin
        l_fu_757_p3 = 32'd6;
    end else if (p_Result_8_fu_749_p3[7] == 1'b1) begin
        l_fu_757_p3 = 32'd7;
    end else if (p_Result_8_fu_749_p3[8] == 1'b1) begin
        l_fu_757_p3 = 32'd8;
    end else if (p_Result_8_fu_749_p3[9] == 1'b1) begin
        l_fu_757_p3 = 32'd9;
    end else if (p_Result_8_fu_749_p3[10] == 1'b1) begin
        l_fu_757_p3 = 32'd10;
    end else if (p_Result_8_fu_749_p3[11] == 1'b1) begin
        l_fu_757_p3 = 32'd11;
    end else if (p_Result_8_fu_749_p3[12] == 1'b1) begin
        l_fu_757_p3 = 32'd12;
    end else if (p_Result_8_fu_749_p3[13] == 1'b1) begin
        l_fu_757_p3 = 32'd13;
    end else if (p_Result_8_fu_749_p3[14] == 1'b1) begin
        l_fu_757_p3 = 32'd14;
    end else if (p_Result_8_fu_749_p3[15] == 1'b1) begin
        l_fu_757_p3 = 32'd15;
    end else if (p_Result_8_fu_749_p3[16] == 1'b1) begin
        l_fu_757_p3 = 32'd16;
    end else if (p_Result_8_fu_749_p3[17] == 1'b1) begin
        l_fu_757_p3 = 32'd17;
    end else if (p_Result_8_fu_749_p3[18] == 1'b1) begin
        l_fu_757_p3 = 32'd18;
    end else if (p_Result_8_fu_749_p3[19] == 1'b1) begin
        l_fu_757_p3 = 32'd19;
    end else if (p_Result_8_fu_749_p3[20] == 1'b1) begin
        l_fu_757_p3 = 32'd20;
    end else if (p_Result_8_fu_749_p3[21] == 1'b1) begin
        l_fu_757_p3 = 32'd21;
    end else if (p_Result_8_fu_749_p3[22] == 1'b1) begin
        l_fu_757_p3 = 32'd22;
    end else if (p_Result_8_fu_749_p3[23] == 1'b1) begin
        l_fu_757_p3 = 32'd23;
    end else if (p_Result_8_fu_749_p3[24] == 1'b1) begin
        l_fu_757_p3 = 32'd24;
    end else if (p_Result_8_fu_749_p3[25] == 1'b1) begin
        l_fu_757_p3 = 32'd25;
    end else if (p_Result_8_fu_749_p3[26] == 1'b1) begin
        l_fu_757_p3 = 32'd26;
    end else if (p_Result_8_fu_749_p3[27] == 1'b1) begin
        l_fu_757_p3 = 32'd27;
    end else if (p_Result_8_fu_749_p3[28] == 1'b1) begin
        l_fu_757_p3 = 32'd28;
    end else if (p_Result_8_fu_749_p3[29] == 1'b1) begin
        l_fu_757_p3 = 32'd29;
    end else if (p_Result_8_fu_749_p3[30] == 1'b1) begin
        l_fu_757_p3 = 32'd30;
    end else if (p_Result_8_fu_749_p3[31] == 1'b1) begin
        l_fu_757_p3 = 32'd31;
    end else begin
        l_fu_757_p3 = 32'd32;
    end
end

assign lhs_1_fu_598_p3 = {{sum_V_10_reg_352}, {19'd0}};

assign lhs_3_fu_648_p3 = {{sum_V_11_fu_624_p2}, {19'd0}};

assign lhs_5_fu_1159_p3 = {{sum_V_12_reg_398}, {19'd0}};

assign lhs_7_fu_1204_p3 = {{sum_V_13_fu_1185_p2}, {19'd0}};

assign lsb_index_fu_775_p2 = ($signed(sub_ln894_fu_765_p2) + $signed(32'd4294967243));

assign lshr_ln897_fu_811_p2 = 24'd16777215 >> zext_ln897_fu_807_p1;

assign lshr_ln908_fu_903_p2 = zext_ln907_fu_897_p1 >> zext_ln908_fu_900_p1;

assign m_1_fu_918_p3 = ((icmp_ln908_reg_1393[0:0] == 1'b1) ? lshr_ln908_fu_903_p2 : shl_ln909_fu_912_p2);

assign m_3_fu_928_p2 = (m_1_fu_918_p3 + zext_ln911_fu_925_p1);

assign m_fu_934_p4 = {{m_3_fu_928_p2[63:1]}};

assign max_idx_1_fu_1285_p3 = ((icmp_ln1494_fu_1267_p2[0:0] == 1'b1) ? zext_ln67_fu_1281_p1 : max_idx_reg_423);

assign or_ln10_fu_524_p2 = (k_reg_341 | 10'd1);

assign or_ln1506_fu_1021_p2 = (icmp_ln1506_reg_1423 | icmp_ln1506_1_reg_1428);

assign or_ln30_fu_1096_p2 = (k_1_reg_387 | 7'd1);

assign p_Result_3_fu_855_p3 = tmp_V_2_fu_731_p3[add_ln899_fu_849_p2];

assign p_Result_4_fu_817_p2 = (tmp_V_2_fu_731_p3 & lshr_ln897_fu_811_p2);

assign p_Result_5_fu_948_p3 = m_3_fu_928_p2[32'd54];

assign p_Result_7_fu_717_p3 = temp_output_0_V_q1[32'd23];

assign p_Result_8_fu_749_p3 = {{8'd255}, {p_Result_s_fu_739_p4}};

assign p_Result_9_fu_982_p5 = {{tmp_fu_975_p3}, {zext_ln912_fu_944_p1[51:0]}};

integer ap_tvar_int_0;

always @ (tmp_V_2_fu_731_p3) begin
    for (ap_tvar_int_0 = 24 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 23 - 0) begin
            p_Result_s_fu_739_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_739_p4[ap_tvar_int_0] = tmp_V_2_fu_731_p3[23 - ap_tvar_int_0];
        end
    end
end

assign r_V_2_fu_630_p1 = input_img_q0[23:0];

assign r_V_fu_530_p1 = input_img_q1[23:0];

assign ret_V_1_fu_660_p2 = (lhs_3_fu_648_p3 + trunc_ln1192_1_fu_656_p1);

assign ret_V_2_fu_1167_p2 = (lhs_5_fu_1159_p3 + trunc_ln1192_2_reg_1486);

assign ret_V_3_fu_1216_p2 = (lhs_7_fu_1204_p3 + trunc_ln1192_3_fu_1212_p1);

assign ret_V_fu_606_p2 = (lhs_1_fu_598_p3 + trunc_ln1192_reg_1339);

assign select_ln67_fu_1273_p3 = ((icmp_ln1494_fu_1267_p2[0:0] == 1'b1) ? temp_output2_0_V_q0 : empty_24_reg_435);

assign select_ln893_fu_956_p3 = ((p_Result_5_fu_948_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign shl_ln909_fu_912_p2 = zext_ln907_fu_897_p1 << zext_ln909_fu_909_p1;

assign sub_ln894_fu_765_p2 = (32'd24 - l_fu_757_p3);

assign sub_ln897_fu_801_p2 = (5'd14 - trunc_ln897_fu_797_p1);

assign sub_ln909_fu_881_p2 = (32'd54 - sub_ln894_fu_765_p2);

assign sub_ln915_fu_964_p2 = (11'd5 - trunc_ln893_reg_1413);

assign sum_V_11_fu_624_p2 = (zext_ln415_fu_621_p1 + sum_V_fu_611_p4);

assign sum_V_13_fu_1185_p2 = (zext_ln415_2_fu_1182_p1 + sum_V_5_fu_1172_p4);

assign sum_V_2_fu_666_p4 = {{ret_V_1_fu_660_p2[42:19]}};

assign sum_V_4_fu_688_p2 = (zext_ln415_1_fu_684_p1 + sum_V_2_fu_666_p4);

assign sum_V_5_fu_1172_p4 = {{ret_V_2_fu_1167_p2[42:19]}};

assign sum_V_7_fu_1222_p4 = {{ret_V_3_fu_1216_p2[42:19]}};

assign sum_V_9_fu_1244_p2 = (zext_ln415_3_fu_1240_p1 + sum_V_7_fu_1222_p4);

assign sum_V_fu_611_p4 = {{ret_V_fu_606_p2[42:19]}};

assign tmp_11_fu_781_p4 = {{lsb_index_fu_775_p2[31:1]}};

assign tmp_12_fu_829_p3 = lsb_index_fu_775_p2[32'd31];

assign tmp_15_fu_1232_p3 = r_V_7_fu_1198_p2[32'd18];

assign tmp_2_fu_488_p3 = {{k_reg_341}, {6'd0}};

assign tmp_3_fu_496_p3 = {{k_reg_341}, {4'd0}};

assign tmp_4_fu_564_p3 = {{or_ln10_reg_1332}, {6'd0}};

assign tmp_5_fu_571_p3 = {{or_ln10_reg_1332}, {4'd0}};

assign tmp_6_fu_1072_p3 = {{k_1_reg_387}, {2'd0}};

assign tmp_7_fu_1136_p3 = {{or_ln30_reg_1475}, {2'd0}};

assign tmp_9_fu_676_p3 = r_V_3_fu_642_p2[32'd18];

assign tmp_V_2_fu_731_p3 = ((p_Result_7_fu_717_p3[0:0] == 1'b1) ? tmp_V_fu_725_p2 : temp_output_0_V_q1);

assign tmp_V_fu_725_p2 = ($signed(24'd0) - $signed(temp_output_0_V_q1));

assign tmp_fu_975_p3 = {{p_Result_7_reg_1383}, {add_ln915_fu_969_p2}};

assign tobool34_i_i_i105_fu_887_p2 = (xor_ln899_fu_837_p2 & a_fu_863_p2);

assign trunc_ln1192_1_fu_656_p1 = r_V_3_fu_642_p2[42:0];

assign trunc_ln1192_2_fu_1121_p1 = r_V_5_fu_1115_p2[42:0];

assign trunc_ln1192_3_fu_1212_p1 = r_V_7_fu_1198_p2[42:0];

assign trunc_ln1192_fu_548_p1 = r_V_1_fu_542_p2[42:0];

assign trunc_ln4_fu_999_p4 = {{m_3_fu_928_p2[52:1]}};

assign trunc_ln67_cast_fu_1262_p1 = ap_phi_mux_i_1_phi_fu_415_p4;

assign trunc_ln893_fu_893_p1 = l_fu_757_p3[10:0];

assign trunc_ln894_fu_771_p1 = sub_ln894_fu_765_p2[23:0];

assign trunc_ln897_fu_797_p1 = sub_ln894_fu_765_p2[4:0];

assign weights_layer1_weights_V_address0 = zext_ln1118_3_fu_593_p1;

assign weights_layer1_weights_V_address1 = zext_ln1118_1_fu_519_p1;

assign weights_layer2_weights_V_address0 = zext_ln1118_7_fu_1154_p1;

assign weights_layer2_weights_V_address1 = zext_ln1118_5_fu_1091_p1;

assign xor_ln899_fu_837_p2 = (tmp_12_fu_829_p3 ^ 1'd1);

assign zext_ln1118_1_fu_519_p1 = add_ln1118_1_fu_514_p2;

assign zext_ln1118_2_fu_578_p1 = tmp_5_fu_571_p3;

assign zext_ln1118_3_fu_593_p1 = add_ln1118_3_fu_588_p2;

assign zext_ln1118_4_fu_1068_p1 = k_1_reg_387;

assign zext_ln1118_5_fu_1091_p1 = add_ln1118_5_fu_1086_p2;

assign zext_ln1118_6_fu_1133_p1 = or_ln30_reg_1475;

assign zext_ln1118_7_fu_1154_p1 = add_ln1118_7_fu_1149_p2;

assign zext_ln1118_fu_504_p1 = tmp_3_fu_496_p3;

assign zext_ln26_1_fu_1047_p1 = j_1_reg_376;

assign zext_ln26_fu_1043_p1 = j_1_reg_376;

assign zext_ln28_fu_1102_p1 = or_ln30_fu_1096_p2;

assign zext_ln415_1_fu_684_p1 = tmp_9_fu_676_p3;

assign zext_ln415_2_fu_1182_p1 = tmp_14_reg_1491;

assign zext_ln415_3_fu_1240_p1 = tmp_15_fu_1232_p3;

assign zext_ln415_fu_621_p1 = tmp_8_reg_1344;

assign zext_ln67_fu_1281_p1 = i_1_reg_411;

assign zext_ln6_1_fu_467_p1 = j_reg_330;

assign zext_ln6_fu_463_p1 = j_reg_330;

assign zext_ln897_fu_807_p1 = sub_ln897_fu_801_p2;

assign zext_ln8_fu_560_p1 = or_ln10_reg_1332;

assign zext_ln907_fu_897_p1 = tmp_V_2_reg_1388;

assign zext_ln908_fu_900_p1 = add_ln908_reg_1398;

assign zext_ln909_fu_909_p1 = sub_ln909_reg_1403;

assign zext_ln911_fu_925_p1 = tobool34_i_i_i105_reg_1408;

assign zext_ln912_fu_944_p1 = m_fu_934_p4;

always @ (posedge ap_clk) begin
    zext_ln6_reg_1302[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln6_1_reg_1307[15:7] <= 9'b000000000;
    or_ln10_reg_1332[0] <= 1'b1;
    zext_ln26_reg_1445[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln26_1_reg_1450[8:3] <= 6'b000000;
    or_ln30_reg_1475[0] <= 1'b1;
end

endmodule //nn_inference
