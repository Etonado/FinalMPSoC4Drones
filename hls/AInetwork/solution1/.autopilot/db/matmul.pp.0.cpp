# 1 "../../FPGA_AI/src/hls/matmul.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 375 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 158 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_ReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Read(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_WriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Write(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Return(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_Unroll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_Inline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBindPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_DataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void __xilinx_ip_top(...) __attribute__ ((nothrow)) __attribute__((overloadable));


}
# 2 "<built-in>" 2
# 1 "../../FPGA_AI/src/hls/matmul.cpp" 2
# 1 "../../FPGA_AI/src/hls/matmul.hpp" 1
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 1
# 55 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h" 1
# 57 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h" 1
# 100 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 233 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 58 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h" 2
# 162 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 501 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;

template <int _AP_N>
struct ssdm_int<_AP_N, true> {
  int V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, true>(){};
};

template <int _AP_N>
struct ssdm_int<_AP_N, false> {
  unsigned V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, false>(){};
};
# 567 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 568 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 579 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 696 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 56 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h" 1
# 80 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 237 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
           Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 385 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) = default;







  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) half to_half() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 577 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 690 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 708 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 819 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 868 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 977 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1044 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1062_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1284 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    (void)(rd);
    (void)(sign);
    return 0;
  }

};
# 1345 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1364 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1392 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1421 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1455 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1494 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1518 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1549 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1582 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator +=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator -=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator *=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator /=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator +=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator -=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator *=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator /=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator +=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator -=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator *=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator /=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 /= op_rt; }
# 1610 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1647 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1677 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1708 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1740 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1759 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1786 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1817 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1849 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1868 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1976 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 57 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h" 1
# 73 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 116 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 304 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 385 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };



  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_716_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_730_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_744_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 760 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    (void)(radix);
    return 0;
  }

};
# 800 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 838 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 860 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1058 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1117 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1140 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1168 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1217 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1364 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1388 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 58 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }




  inline __attribute__((always_inline)) ap_int(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  ap_int &operator=(const ap_int<_AP_W> &op2) = default;


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }




  inline __attribute__((always_inline)) ap_uint(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  ap_uint &operator=(const ap_uint<_AP_W> &op2) = default;


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 356 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_special.h" 1
# 61 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 222 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 357 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2







# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h" 1
# 56 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h" 1
# 62 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 1
# 63 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h" 2
# 133 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 154 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 333 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 477 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 535 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 688 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 848 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1074 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1090_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1144 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1177 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }
# 1192 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1210 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1328 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1350 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1494 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1580 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1763 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    (void)(radix);
    (void)(sign);
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2215 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2303 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 57 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h" 2
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h" 1
# 71 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 258 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 288 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 300 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
  }
# 312 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }



  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 661 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
     (void)(rd);
    return 0;
  }

};
# 725 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 771 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 58 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 112 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) ap_fixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 147 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  ap_fixed &
  operator=(const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 275 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 307 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  ap_ufixed &
  operator=(const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 395 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h" 1
# 61 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 230 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 362 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 396 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h" 2
# 365 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2
# 2 "../../FPGA_AI/src/hls/matmul.hpp" 2








typedef ap_fixed<24,5,AP_RND> myfloat;



void hwmm_layer1(myfloat input[18*32], const myfloat weights[18*32][80], myfloat output[1][80]);
void hw_act_layer1(myfloat input[1][80], myfloat output[1][80]);
void hwmm_layer2(myfloat input[1][80], const myfloat weights[80][5], myfloat output[1][5]);
void hw_act_layer2(myfloat input[1][5], int &pred);
__attribute__((sdx_kernel("nn_inference", 0))) int nn_inference(myfloat input_img[18*32]);


namespace weights{



 const myfloat layer2_weights[80][5] = {{-0.26221514, -0.18861619, 0.2037817, -0.1343067, 0.22231959},
   {-0.3683117, -0.6959463, -0.039076548, 0.19096632, 0.30611923},
   {0.3025231, -0.029099584, -0.339641, 0.70024955, -0.65260446},
   {0.39001107, -0.47012883, 0.5010513, -0.4986203, 0.17886668},
   {0.47426447, 0.13499871, -0.9105702, -0.2778476, 0.65086585},
   {-0.36700678, 0.54778945, 0.10993398, -0.7996839, 0.12684453},
   {0.5814524, 0.28216842, 0.15787126, -0.5597968, 0.4281037},
   {-0.25673914, 0.20055225, -0.22376274, -0.11109003, -0.1929297},
   {-0.12680645, 0.0077311713, -0.016073138, -0.15110545, 0.05830884},
   {-0.30718988, 0.39366612, -0.5379089, -0.42227924, 0.53646517},
   {0.59610325, -0.6413071, 0.5925643, -0.5266329, -0.28360465},
   {0.057562232, 0.11952025, 0.049746994, 0.070401244, 0.024693437},
   {-0.3153273, -0.55105793, -0.58004814, 0.7741244, -0.0705886},
   {-0.22216704, -0.11501694, -0.21475826, 0.006591022, 0.13785756},
   {0.311003, -0.74056077, 0.24303794, 0.60202485, -0.5200633},
   {-0.5635912, 0.36162436, -0.334921, 0.19899035, -0.24401882},
   {-0.67162037, 0.76962614, -0.78535295, 0.20228806, 0.17624077},
   {-0.249221, 0.09448761, 0.012631774, -0.2034815, -0.038962513},
   {-0.286016, -0.8323139, 0.8135941, -0.020237496, 0.06595442},
   {0.033669017, -0.16133563, -0.10578482, 0.1352759, -0.16593198},
   {0.053728145, -0.57258105, -0.18041757, 0.22527131, 0.40352553},
   {-0.23177846, -0.3596326, 0.46899012, 0.50376946, -0.7926083},
   {0.19023895, 0.12968236, -0.02535893, -0.10351282, -0.025102198},
   {-0.18069537, -0.09921605, -0.11051761, -0.16181177, 0.030756593},
   {0.60871166, 0.7320334, -0.58816093, -0.23848931, -0.84031564},
   {-0.69661486, 0.21322154, -0.17001902, 0.5990455, -0.33179274},
   {-0.67457926, -0.33284742, -0.16938509, 0.5608387, 0.033101067},
   {-0.20637435, -0.10052498, 0.52300876, -0.12470422, -0.5891689},
   {0.16470686, -0.81489897, 0.57846856, 0.5263151, -0.75475335},
   {0.42752692, 0.45691478, -1.0074008, -0.23967183, 0.40207025},
   {0.05395444, -0.17866135, 0.2059492, -0.19898587, 0.21223348},
   {0.25491476, -0.2015678, -0.0022273604, -0.111965105, -0.07900013},
   {-0.2770942, 0.16202383, -0.09626214, -0.45201284, 0.40719253},
   {-0.13229443, 0.020105796, -0.24780716, 0.16711652, 0.24910259},
   {0.069143474, 0.034538884, -0.0063193655, -0.12349487, 0.0679399},
   {0.14083982, -0.6104061, -0.6608952, 0.84610254, 0.6586107},
   {0.16719058, 0.22060962, 0.029859627, 0.19214523, -0.018250218},
   {0.59072465, 0.28784582, 0.10625627, 0.20493738, -0.6897189},
   {0.21224776, -0.15326309, 0.0016578108, -0.24568684, 0.02779599},
   {-0.49656752, 0.6822389, -0.21121578, 0.3971579, -0.81430036},
   {0.6893691, 0.47112152, -0.0904486, -0.85246545, -0.052248463},
   {0.5178297, -0.5560333, 0.35824564, -0.8813796, 0.19134557},
   {-0.62713844, -0.44969225, 0.50480324, 0.5859499, -0.09376681},
   {-0.06559153, 0.1877071, 0.048047397, 0.109568745, 0.045411024},
   {-0.9057564, 0.9950206, -0.9140926, 0.47510815, -0.39081293},
   {-0.0922142, -0.24496542, -0.0353996, 0.2375854, -0.04619977},
   {-0.09488295, 0.1288727, -0.030057222, -0.06793903, 0.020776302},
   {-0.009792354, 0.23301719, 0.19636811, -0.05861224, -0.008211124},
   {-0.043943517, -0.19232869, 0.07714334, -0.15586077, 0.2443958},
   {-0.15210429, -0.17915933, -0.05857875, 0.15306257, -0.17351507},
   {-0.06628707, -0.11441201, -0.027933612, 0.18841389, -0.23665619},
   {-0.21618532, -0.21775326, -0.07663396, -0.14627863, -0.20778693},
   {-0.0822915, -0.24904275, 0.017360969, -0.15562494, 0.18759482},
   {-0.4474419, -0.10729663, -0.42310697, -0.41592446, 0.66494584},
   {-0.041117985, 0.19596836, -0.08413036, 0.25259766, -0.24373116},
   {-0.04072234, 0.171431, 0.010877931, 0.069188066, -0.2241457},
   {0.040485874, -0.20675652, 0.14840575, -0.041840598, -0.20815295},
   {-0.03282708, 0.14030688, -0.031195033, 0.14691056, -0.10699116},
   {0.075610876, 0.25834826, -0.20636618, 0.05611086, -0.17295185},
   {-0.1737057, 0.079065, 0.10602114, -0.25506836, 0.0912254},
   {-0.01980631, 0.07999101, 0.24664214, 0.20610908, -0.13590859},
   {-0.11293171, 1.0970085, -1.6581827, 0.11153963, -0.7306822},
   {-0.42567995, -0.5149777, 0.57577413, -0.4054404, 0.10711153},
   {-0.25597695, 0.8461553, -0.6010135, 0.58002985, -0.6602892},
   {0.25666592, 0.19414741, 0.027795523, -0.0071668923, -0.023479566},
   {0.4367577, -0.6039022, 0.288885, -0.897259, -0.49834815},
   {0.008604817, -0.066014744, 0.028473265, -0.19098832, -0.16917488},
   {-0.09569141, -0.089111656, 0.08553491, 0.14875841, -0.08673073},
   {0.21174276, 0.19749054, 0.021166682, 0.1549632, 0.17720217},
   {0.39511096, -0.93159324, -0.26575288, 0.37070563, 0.75581366},
   {-0.4038342, 0.33154047, 0.1582073, -0.59607244, -0.68962395},
   {-0.22233814, -0.07931869, 0.18591163, -0.24936137, -0.21823013},
   {-1.0258075, 0.3089303, 1.025255, -0.08368775, -0.9148208},
   {-0.19073172, 0.22397989, -0.055022232, -0.12369386, 0.032076772},
   {-0.53894645, 0.10548449, 0.11694379, -0.1894123, 0.05580342},
   {0.05793807, -0.24629773, 0.09310147, 0.20728922, 0.1763416},
   {0.26015997, -0.09592008, -0.14056481, -0.03597183, -0.096693024},
   {0.56273526, 0.4160296, 0.28529677, -0.8684831, -0.36092818},
   {0.15590398, -0.2542273, -0.025936024, -0.26199877, 0.093104936},
   {0.69762933, 0.9423474, -1.3661633, 0.262716, -0.2657858}};


 const myfloat layer1_weights[18*32][80] = {{0.03127373, 0.07548131, 0.025754254, -0.11436816, 0.20166498, -0.068495505, -0.15878516, -0.08316614, 0.017368803, 0.14631203, -0.18519169, 0.055606578, 0.25096738, -0.072574005, -0.16495907, 0.074190125, 0.24914606, -0.022985093, -0.2168042, -0.08853863, 0.09686194, -0.16477145, -0.09559243, -0.013379496, 0.14327852, 0.07348665, 0.10104985, -0.1606289, -0.22365196, 0.11876099, -0.089129835, -0.023143165, 0.01686536, 0.019311782, -0.035826012, 0.14118709, 0.016090738, -0.09413501, 0.08206468, 0.013112739, 0.0024040942, -0.17306595, -0.13453478, -0.056213964, 0.3749701, 0.059548862, -0.0667385, 0.080930896, 0.05676134, -0.040402733, -0.09327703, -0.05048755, -0.090852015, 0.15627046, 0.023039326, -0.096265204, 0.07829742, -0.018460976, -0.01624795, 0.0630092, -0.0026546642, -0.037584163, -0.18538037, 0.31447443, -0.01403372, -0.26131725, 0.020339154, 0.03951952, 0.03281132, 0.012431906, -0.021317828, -0.07300965, -0.16959552, -0.07650408, -0.0803187, -0.091121055, -0.091730125, -0.1588973, -0.08757369, 0.06410873},
   {-0.022318741, 0.062152207, 0.060963076, -0.16407332, 0.16128875, -0.026639184, -0.12424125, -0.056041323, 0.003772003, 0.060720205, -0.096844204, 0.016558561, 0.16007292, -0.048726052, -0.13557644, 0.15498565, 0.11417753, 0.08763199, -0.111068755, -0.02328993, 0.11333306, -0.13544172, -0.05852585, 0.059181307, 0.10186055, 0.047585733, 0.17702629, -0.21021079, -0.15280804, 0.2616246, -0.0779505, -0.09842952, 0.10927026, 0.017214058, 0.027954783, 0.19721773, 0.035430256, -0.16726272, 0.07937561, 0.016322013, 0.0431609, -0.04409449, -0.08979149, 0.066514455, 0.45299897, 0.017599031, 0.0015828386, 0.03467928, -0.039993387, 0.0446514, -0.007727228, 0.07785513, -0.09580751, 0.19291975, -0.098431006, 0.07776223, -0.044277128, 0.04723109, 0.060899533, -0.008974596, -0.07665114, -0.026998004, -0.052531607, 0.2342661, -0.019136816, -0.1871792, 0.047207523, 0.037202016, 0.00535772, -0.01720105, 0.047956046, 0.06641767, -0.19310817, -0.016814033, 0.051685475, 0.027654096, -0.07822975, -0.1007389, 0.03843612, 0.012926637},
   {-0.04254653, -0.036068887, 0.017793724, 0.027544767, 0.19235796, 0.053370927, -0.0052594915, -0.085715346, 0.08572089, 0.11138268, -0.059486266, -0.04218383, 0.13288027, -0.059182372, 0.0036303413, -0.0021968272, 0.1322046, 0.010827482, -0.15384892, 0.007406127, 0.068795204, -0.17860608, -0.044448417, 0.08837758, 0.09359255, -0.09919469, 0.11527268, -0.15900862, -0.055047948, 0.2756798, 0.050864927, 0.06358278, 0.11563996, 0.08303057, -0.018681115, 0.09262347, -0.016230172, -0.12972386, -0.03350672, -0.08021486, 0.037573405, -0.037879046, -0.06623298, 0.034156334, 0.3119006, 0.029978804, -0.045009814, 0.08529351, -0.010858945, 0.052061293, 0.023889452, 0.03654524, -0.06367124, 0.15477942, -0.060510498, 0.013385149, 0.045166556, -0.054085672, 0.06289717, 0.033908848, -0.012478545, -0.11182304, -0.0041919523, 0.22027639, -0.043505095, -0.1359497, -0.07856205, -0.011171805, 0.086757146, 0.09007325, -0.15030013, 0.053838823, -0.27728143, -0.031652287, -0.07687477, -0.0837687, -0.032499727, -0.06800067, -0.047642767, -0.0040709847},
   {-0.096279845, 0.13409473, 0.03880953, 0.05867829, 0.215415, 0.037989248, 0.046099894, -0.019075798, 0.088384636, 0.03793762, 0.04458259, 0.06594599, 0.08050523, -0.0567199, -0.11921973, -0.0043511917, 0.101795726, 0.04398457, -0.0049012066, -0.04540257, 0.056375943, -0.1735643, -0.08101465, 0.07019525, -0.031347156, -0.15937231, -0.045677196, -0.10736516, -0.13649103, 0.21368158, -0.024852145, 0.03186275, 0.02731544, -0.067167744, -0.019006435, 0.061276887, 0.04620059, -0.07620475, 0.0456586, -0.054749426, 0.08273479, 0.038245913, -0.18231417, 0.004729899, 0.21312779, 0.029708691, -0.0652411, -0.011933969, -0.09898678, -0.025380526, 0.03761532, 0.03864565, -0.021564063, 0.11841079, -0.015044256, 0.0027976169, 0.022438535, 0.089169614, 0.09510984, -0.0038522799, -0.03434016, -0.15357327, -0.10334209, 0.15522721, -0.013171114, 0.027129572, -0.07879614, 0.0047259787, 0.08248197, 0.18865684, -0.10069054, 0.0872801, -0.24689692, -0.092067674, -0.09123517, 0.033854462, 0.022509167, -0.0945918, 0.07254267, 0.110036686},
   {-0.030152783, 0.15346622, 0.11191289, 0.007444082, 0.23558633, -0.0630747, 0.16745666, -0.0197452, -0.07932769, 0.039783802, -0.03876664, -0.032016717, 0.109442495, -0.014485829, 0.08766605, -0.16668227, 0.006616991, -0.019712716, -0.06130009, 0.0545628, 0.12284986, -0.024731684, -0.076290675, -0.04779748, -0.10214707, -0.1415582, 0.030598227, -0.11949118, -0.06722398, 0.16152422, 0.032643948, -0.051295284, 0.12107788, 0.05380505, -0.016866986, 0.09742334, -0.0823737, -0.1414693, 0.040747464, -0.12893519, -0.061629258, 0.09284626, 0.020296203, -0.014770696, -0.053686317, -0.03191495, 0.043954827, 0.08793272, 0.03941463, -0.020298326, -0.010579176, -0.07385326, 0.067358255, 0.05616545, 0.019452507, -0.04943988, 0.014265463, 0.04662713, 0.0321706, -0.07698205, -0.07129974, -0.17587328, -0.09760817, -0.012612315, 0.016085766, -0.027456786, -0.10134656, -0.097377226, 0.06469642, 0.18703975, -0.21759509, 0.036849257, -0.20043996, -0.05481546, -0.009576569, 0.05488137, 0.025968721, -0.13285314, 0.067934304, 0.012489498},
   {-0.043831263, 0.120028116, -0.02796269, 0.16770625, 0.090654664, -0.01576096, 0.018247219, -0.05544845, -0.059668694, 0.0013506929, 0.13689779, 0.054090027, 0.059287503, -0.020309933, 0.15952717, -0.08606303, -0.13016926, -0.0917408, -0.002129884, 0.059089568, 0.20618036, -0.026798787, -0.011643298, -0.09501909, -0.011023415, -0.054913733, 0.060946185, -0.060429517, 0.057229504, -0.051794544, 0.06147502, 0.031075561, 0.09732026, -0.07364278, 0.017505854, 0.15197165, -0.082364075, 0.0043698307, -0.09168999, -0.12351928, -0.031624712, 0.09682638, -0.020212986, 0.016056165, -0.07756419, 0.028324552, -0.08676795, -0.040554233, 0.003530294, 0.0779244, -0.06900531, 0.04018215, -0.09795524, 0.031746455, -0.0025480245, -0.050403718, 0.05731378, -0.06789393, 0.03130982, -0.032107025, 0.0011333525, -0.099028856, 0.04720545, -0.004039231, -0.08882442, 0.13425569, -0.054488964, -0.040712345, -0.025950983, 0.2118951, -0.05618748, 0.02320767, -0.0856871, 0.028918833, -0.0057773613, 0.05158826, -0.0061894557, -0.097514234, 0.051638093, -0.077930085},
   {-0.07914369, 0.20748545, 0.026470538, 0.07667082, 0.030837044, 0.033842966, 0.005734949, 0.083969384, 0.091001324, 0.039490297, 0.041015774, -0.07593973, 0.08100806, 0.016392149, 0.025220107, -0.084018, -0.15569465, -0.08547702, 0.093170345, -0.08369683, 0.10620175, 0.10221481, 0.056738056, -0.07067597, -0.04859405, -0.17976233, 0.03204877, -0.11355396, 0.06112291, -0.036068458, 0.014652788, 0.010381697, 0.006370387, 0.026907302, 0.010288356, 0.14176166, -0.027773248, -0.088419914, -0.0050274096, -0.052450687, 0.040219348, 0.15049447, 0.059933756, -0.07786971, -0.14355522, 0.016937263, -0.047129784, 0.02341306, -0.022705905, -0.029064799, -0.07947096, 0.043719277, 0.024079511, -0.0059931935, 0.052846476, -0.02185548, 0.018336216, 0.015153136, 0.08143141, -0.09070771, 0.08442051, -0.14313439, -0.0018700083, -0.01944817, -0.022630557, 0.01636148, -0.06853715, -0.09918431, 0.062616415, 0.18071897, -0.048497196, 0.020686071, -0.024363218, -0.021579783, -0.065801784, -0.034839332, 0.09088366, -0.00074785226, 0.07570696, 0.007644205},
   {0.014688413, 0.10558705, 0.10430473, 0.005080663, 0.08370161, -0.0016750974, 0.065251, -0.07149309, -0.05186673, 0.037404872, -0.019608367, 0.058188945, 0.087086536, -0.0651314, 0.16832104, -0.0539754, -0.07094038, -0.023271069, 0.002818066, -0.0063557466, 0.10483769, -0.03661191, 0.042328157, 0.013782353, -0.045196403, -0.1252594, 0.010194215, -0.007523901, 0.03544974, 0.11459794, -0.057068337, 0.030365981, 0.056169204, -0.002907862, -0.095178, 0.110516496, 0.07174948, 0.06708968, -0.09750116, -0.069167614, 0.01023294, 0.03750362, -0.06392926, -0.022766996, 0.0231458, 0.010948904, -0.060609724, 0.04097318, 0.084880844, -0.03989818, -0.0774875, -0.096177205, 0.0725421, 0.017755292, 0.007028283, 0.030629115, 0.08283594, 0.005377761, -0.025756642, 0.07344902, 0.009911045, -0.0031431094, -0.050709497, 0.006040621, -0.07305028, -0.040879365, -0.0948583, 0.050718326, -0.09040454, 0.20740035, -0.021480404, -0.09546884, -0.034578554, 0.09141797, -0.0008908418, -0.064348035, 0.01579416, -0.073165536, -0.043121044, -0.06599315},
   {-0.018326135, 0.015350519, 0.08813814, -0.02884675, -0.021418696, -0.10148896, 0.0472078, -0.09747109, -0.023807604, 0.026108598, 0.02729998, 0.074155174, 0.15017262, 0.011435874, 0.089929774, -0.043058123, -0.031099245, 0.0063926578, -0.0014826291, 0.02141026, 0.115038484, 0.026918365, -0.007413298, 0.041291896, -0.03512476, -0.04750876, 0.0375539, -0.098409705, 0.016046673, 0.08998261, 0.08643619, 0.010100763, 0.025717035, -0.025095776, -0.01975553, 0.079614915, -0.04270607, -0.010930864, -0.09687694, -0.12479874, 0.09336994, 0.033617534, -0.01804923, -0.06321931, 0.054727435, 0.02007863, -0.06027185, 0.06529473, -0.066364855, 0.0011512253, -0.010164872, -0.06829695, -0.0052553685, 0.06188433, -0.0225033, 0.036712766, 0.0004337816, 0.004984041, 0.036516733, 0.04575242, 0.09388321, -0.07910004, 0.044753402, -0.05697651, -0.09478038, -0.03059723, -0.0383758, -0.10143089, -0.059321076, 0.08315541, -0.084530555, 0.07723932, -0.016230324, -0.07941484, 0.038343433, 0.061202697, 0.043509938, -0.013434561, 0.06912421, -0.067577265},
   {-0.008007698, 0.13020653, -0.014014116, 0.007044647, -0.023382196, 0.054411426, 0.011445667, 0.041338176, -0.058354586, 0.080155335, -0.029442642, -0.018936327, 0.079116985, -0.07909542, 0.02749788, -0.084372655, -0.061576482, 0.057422362, 0.06399515, -0.09522814, 0.13278082, 0.03660437, 0.04307463, -0.005206912, 0.006238399, -0.027755558, 0.0025992885, -0.0733935, -0.07581956, 0.16117592, 0.023081074, 0.028557612, 0.040893856, -0.058717083, -0.022108234, 0.15465474, 0.07332393, -0.096112944, 0.038599297, 0.023532152, 0.095217176, 0.092394374, -0.051239595, -0.07916423, -0.08652659, 0.060706295, -0.040900454, 0.053882413, -0.0343772, -0.062555015, -0.08050079, 0.06660445, 0.023618532, 0.11950677, -0.026587678, -0.018010657, 0.03734288, 0.06741734, 0.07387138, 0.07518874, 0.067552336, -0.14193314, -0.049930856, 0.010666875, 0.0028827488, 0.031928346, -0.0035960602, 0.05469877, 0.0753792, 0.055159587, -0.04651283, -0.086767256, -0.08823855, -0.03309664, 0.0026461894, 0.0114164725, 0.020668894, -0.03273013, -0.010753491, -0.080797754},
   {0.004087035, 0.1027525, 0.057906665, 0.06612011, 0.1589487, -0.0846661, 0.06636161, 0.017904466, -0.056533262, 0.09253767, 0.014706247, -0.060311552, 0.031189986, -0.07071064, -0.009828195, -0.11944402, -0.048449237, -0.05678926, -0.0098748, -0.020306125, 0.042240474, -0.11116998, -0.0710004, -0.064819954, 0.0002483866, -0.11533134, -0.03703937, -0.085904434, -0.11509186, 0.06902914, 0.027697068, -0.08154877, 0.11089898, -0.08382865, -0.0952172, 0.15804003, -0.07213329, 0.039440643, 0.0242588, -0.055903535, -0.03881084, 0.08695234, -0.07559661, 0.051648453, -0.02949966, -0.0148322955, -0.015839644, 0.024645828, -0.061309204, -0.022988195, -0.056868702, -0.023532517, 0.07507075, 0.10905789, 0.0001509359, 0.0003026779, -0.054453533, -0.010333456, -0.02113133, -0.050990276, -0.09499323, -0.01018859, 0.09362286, 0.021450242, -0.004428625, 0.014723829, -0.063069895, 0.07284016, -0.0071444213, 0.04955538, 0.007331581, -0.00087886635, -0.12544277, -0.04640335, -0.024715805, 0.038045265, -0.090362586, -0.07005412, 0.02156013, -0.072366886},
   {-0.05192601, 0.068148926, 0.018632375, -0.041545946, 0.0886016, 0.0049523166, 0.13252273, -0.0015008558, 0.04396807, 0.14269672, 0.0280391, -0.068077624, 0.023919994, 0.060334466, 0.0077572656, -0.03053283, 0.038490765, 0.039363064, -0.08355571, -0.09161277, 0.12918544, -0.115147136, 0.036755435, 0.07062633, -0.050261963, -0.043397523, -0.040906306, -0.14094792, 0.043011844, 0.080804326, 0.03227505, -0.058527216, 0.12673385, 0.056785945, -0.08830664, 0.15690129, 0.08328248, 0.0104987435, -0.07369757, 0.044409033, -0.03219068, 0.08528356, 0.058515277, 0.037388902, -0.02798019, -0.037826445, -0.040136013, -0.09218252, -0.08347286, 0.036939207, -0.017595246, -0.028295346, -0.06358197, 0.10446194, -0.06628191, -0.06154584, -0.046273418, -0.044966202, -0.055254538, -0.06537645, -0.07885124, -0.07820281, 0.062049765, -0.05530708, 0.08434599, -0.07557299, -0.09011666, -0.0059477882, 0.027140535, 0.07993183, -0.011930353, -0.02197394, -0.106349714, -0.021577235, 0.11090187, 0.050769754, -0.0028090393, 0.00771647, 0.06756367, 0.055569794},
   {0.06947973, 0.013830399, 0.056011386, -0.0011127403, 0.08447054, 0.105669804, 0.15957573, -0.011932692, 0.08421442, 0.037367266, 0.057441525, -0.013168928, -0.049511947, 0.03903953, 0.050160173, -0.11312835, 0.02509507, 0.013285898, -0.0855453, 0.0048517147, 0.084115095, 0.035978988, -0.039863806, -0.060002398, 0.05291267, -0.06040879, 0.06040834, -0.0041496856, 0.08137767, 0.072065085, -0.012225382, -0.034348346, -0.0033107358, -0.05985427, -0.068916686, 0.113937944, 0.02996632, 0.059977073, -0.08773947, -0.06862407, 0.010233499, 0.10464799, -0.105075575, 0.016550327, 0.025629643, 0.08005028, 0.07007416, 0.0033513804, -0.041231647, 0.068133846, -0.005989298, -0.09345689, -0.08959297, 0.082426205, -0.036053285, 0.07915258, 0.08695524, -0.038053792, 0.00085831434, 0.03637159, -0.006187193, 0.006931063, 0.06644335, -0.096846014, -0.0480439, 0.08965897, -0.022310313, 0.005217065, 0.03768293, 0.05873846, -0.1339152, 0.05258682, 0.056451578, 0.068625845, 0.032504246, 0.045348532, -0.07966133, -0.017208572, 0.026557177, 0.047070287},
   {-0.092073135, -0.00781725, 0.04729493, -0.018528203, 0.038011685, 0.018681714, 0.16325417, -0.007394622, -0.07462237, 0.07729882, 0.084053345, -0.010160011, -0.0037512716, -0.039104834, 0.01950609, -0.05133213, 0.042311788, 0.024649672, -0.043140136, 0.08417885, 0.10645551, 0.020882836, 0.009793006, -0.10055767, -0.029836988, -0.032513592, -0.050467152, -0.050284553, 0.04739628, 0.017355515, -0.09516456, 0.01456053, -0.020332815, -0.07288876, 0.07005623, 0.062533244, -0.007345619, 0.060594335, -0.049600407, 0.016416194, 0.008720056, 0.018675376, -0.07961611, -0.0028433201, -0.09995989, 0.019517578, 0.08458995, -0.050614312, 0.07103881, -0.0009796506, -0.040895008, 0.029185034, -0.03804538, 0.10967016, 0.015547426, -0.08073624, -0.013421002, -0.026047193, 0.009453282, -0.060716078, 0.082449205, -0.04275598, 0.056675963, -0.030677302, 0.054014705, -0.06771122, -0.05385304, -0.07073315, 0.007210709, -0.057118874, -0.025939189, -0.09459392, -0.019087752, 0.044030394, 0.03328547, -0.03641063, -0.050568495, 0.04494558, -0.08054106, 0.029379943},
   {0.04259392, -0.056154348, 0.05115337, 0.07518754, 0.06719532, -0.03407681, 0.054043513, -0.0037656315, -0.06474328, 0.11348507, -0.018816642, -0.084629305, -0.04759889, -0.029023372, 0.0474996, 0.018369539, 0.0035310593, -0.042242803, 0.052652698, 0.013381648, -0.043287747, 0.027581727, 0.07587331, -0.07990366, 0.04889812, -0.072315134, -0.06210206, -0.05648033, -0.0559933, 0.01818663, 0.032286223, 0.08160173, 0.055521797, 0.05686814, 0.08280051, 0.075535126, 0.046308715, 0.043539807, 0.0068496843, 0.050966583, 0.123671964, 0.11035388, -0.02190538, 0.010270644, -0.09936338, 0.087969564, -0.08306521, 0.07063965, -0.07599609, 0.08776028, 0.0023403242, 0.056135584, -0.020694314, -0.03075057, -0.043245442, 0.08332416, 0.06934331, 0.07549126, -0.09126999, -0.087641485, -0.03086669, 0.03219639, -0.0816765, 0.082709946, -0.043696787, 0.08638377, -0.090592004, -0.04363928, -0.026016213, 0.105767004, 0.098696314, 0.002839459, 0.11391939, -0.05900908, 0.10227143, 0.054082282, -0.057608075, 0.10871256, 0.06673071, -0.08631616},
   {-0.06532028, -0.09884394, 0.013620597, 0.028110212, 0.040183466, 0.06080934, -0.0048702904, -0.01594796, -0.07039344, 0.04471603, 0.003872801, -0.042801067, -0.010678556, 0.03380362, 0.03111318, -0.022316335, -0.026568864, -0.044136744, 0.04951568, 0.07206059, -0.067229636, 0.033344045, -0.009179138, -0.079405405, 0.07938168, -0.015352634, -0.114930324, 0.08157721, 0.008802677, -0.08657292, -0.03537786, 0.026617847, 0.012404496, 0.06901137, 0.034061328, -0.062445987, 0.030735087, 0.21859379, 0.06928255, 0.13249806, 0.08817035, 0.14944485, -0.012385387, -0.022176467, 0.022670357, 0.056444116, -0.0072631314, -0.04975435, -0.052164372, 0.06043802, 0.062339045, -0.09808789, 0.014638461, 0.0035110905, 0.046750728, -0.061616987, 0.012635283, -0.013260226, 0.039624505, 0.06562948, -0.046664953, -0.048894368, 0.11306438, 0.012587272, -0.037734717, 0.1147795, 0.03135032, 0.062259685, -0.08566684, -0.08218585, 0.042896453, -0.08131775, 0.05413427, -0.08271052, 0.027928766, 0.044281833, -0.011608786, 0.0092581045, -0.09326862, 0.044425216},
   {-0.00785443, -0.09467448, 0.03057056, -0.05797411, 0.0788961, -0.034660816, 0.022715345, 0.030384637, -0.026409077, -0.04636289, 0.125072, 0.032107506, -0.00303178, -0.0018082261, 0.08200102, -0.009628817, -0.10937545, 0.063435264, -0.060791507, 0.014624434, 0.031110607, 0.12510705, 0.019840285, 0.07260255, 0.077481374, -0.071511135, -0.13348939, 0.04914054, 0.14636567, -0.026855329, -0.097909465, -0.03532651, 0.014751365, -0.05312552, 0.07112875, -0.09077333, -0.08293003, 0.17496936, -0.070461065, 0.09976034, 0.011364373, 0.088187054, 0.03185038, -0.054441407, -0.096905895, -0.02223041, 0.06300295, -0.013808312, 0.06187387, -0.07240572, 0.049194075, 0.0035714074, 0.05452526, -0.043800954, 0.07671404, 0.018588195, -0.081483595, -0.058355074, -0.056264326, -0.0052592834, 0.06658731, -0.14633174, -0.07102792, 0.066593826, 0.059476055, 0.10358056, 0.003703505, -0.08235369, 0.07840114, 0.008545937, 0.12746134, -0.0050736084, 0.018300787, -0.00017023798, 0.053774454, 0.037744217, 0.047736008, 0.15397389, 0.054510035, 0.11343328},
   {0.010320887, -0.022886569, 0.104916774, -0.012107907, 0.029139278, -0.038683392, 0.047766015, -0.0024290334, 0.02927409, -0.06793242, 0.06635945, 0.071534865, 0.07187862, -0.023023017, 0.096342236, 0.050446674, -0.13748308, -0.0133048445, 0.038052063, -0.08494977, 0.07936398, 0.041051313, 0.08486705, -0.05126081, 0.08145325, -0.05547625, -0.10645214, 0.012462675, 0.07504626, -0.06351668, 0.07614701, 0.06956845, 0.057597023, -0.03508471, -0.09591707, -0.014184786, -0.0552574, 0.054481443, -0.10097738, 0.025937539, -0.029293727, 0.10418108, 0.046830703, 0.03312813, -0.017869487, -0.0404841, -0.041810967, 0.047608797, 0.01987913, -0.043750957, 0.09295917, -0.014220301, -0.084461115, -0.044507306, 0.031864796, -0.080024086, 0.07092383, -0.074657716, -0.055222455, -0.077893265, 0.01792512, -0.13703533, 0.07150727, -0.07047003, -0.021225251, -0.019948415, -0.080650955, 0.019962609, 0.056742914, 0.027515644, 0.07905254, 0.03768767, -0.07063399, 0.07032752, -0.01819493, -0.08029353, -0.026526403, 0.075926766, -0.035521246, 0.10525183},
   {-0.020090802, -0.03871084, -0.013797774, 0.07653225, 0.113689505, -0.02120646, 0.03960509, 0.040922467, 0.02695294, 0.046512328, -0.0051975814, -0.044434004, -0.022676138, 0.022157311, 0.078839816, 0.043032397, 0.009341942, 0.04037579, -0.0076198564, -0.005742926, -0.041593805, -0.022368172, 0.005394317, -0.03137111, 0.05630025, 0.0033710497, -0.096065104, -0.07041846, -0.08039743, -0.0076496317, -0.03343281, -0.03945958, 0.15729608, -0.094852805, -0.02464597, 0.058144625, -0.08118693, 0.061450798, -0.08419101, -0.088526964, 0.09224367, 0.0398417, -0.11229649, -0.051737484, 0.03504486, -0.020736158, 0.02312097, 0.034372933, 0.028812187, -0.05528787, 0.069323234, -0.042171188, 0.06764402, 0.092247956, 0.020148735, -0.065099746, -0.012800937, -0.0527689, -0.023436569, 0.036648855, -0.014324896, -0.16597424, -0.062188797, 0.0871907, -0.026728168, -0.077115044, -0.022245595, -0.07377626, -0.038630314, 0.07266457, 0.045659266, 0.02073949, -0.035163496, -0.06504653, 0.0020474335, 0.04254023, -0.08165624, 0.04929249, 0.06790428, 0.09738576},
   {0.06276847, -0.013218506, 0.003277567, 0.10586362, 0.21570031, -0.048538987, 0.19116941, 0.03515793, 0.06525012, 0.024527896, 0.07004976, -0.028694002, 0.047143694, 0.054706566, 0.018403485, -0.05887692, -0.10316412, 0.032238863, -0.013006213, 0.090353236, 0.061398488, 0.046535086, 0.02135887, 0.07170213, 0.032665733, -0.012136945, 0.017424198, 0.020875897, 0.07348535, 0.015465694, -0.0028588476, 0.07803199, 0.18307431, -0.020130042, -0.08884643, 0.06983887, 0.07927936, -0.110258944, -0.04551983, -0.009180958, 0.023466669, 0.1298251, -0.01830855, 0.065302916, 0.038037814, 0.01570288, 0.006174147, 0.011114822, 0.0876054, 0.082238026, -0.06432286, 0.033035975, -0.07788401, 0.11914219, -0.044090174, 0.03513244, 0.0072184657, 0.053808242, -0.080606274, 0.0820568, 0.07721593, -0.023542855, -0.00057619327, 0.06873263, 0.029474549, 0.06510918, -0.05512589, 0.015976185, -0.008673079, 0.015867585, -0.076769955, 0.089520626, -0.18067768, 0.008924721, 0.086372696, -0.07910687, -0.0011486105, -0.006754242, -0.0013996118, 0.13739362},
   {0.07394048, 0.14327988, -0.002613996, -0.0039534173, 0.126463, 0.0014883961, 0.0567477, 0.05420334, -0.026411103, 0.011959114, 0.05892163, -0.06726726, -0.0097419135, 0.044400446, -0.032259416, -0.13409874, -0.042279154, 0.078029476, -0.055277023, 0.013482523, 0.15820183, 0.0516435, 0.065226994, -0.0979492, 0.051770873, -0.11159464, 0.0136823645, -0.14363624, 0.0068947333, 0.0384807, 0.07836398, -0.03382145, 0.03189772, -0.057490002, 0.08876822, 0.06311696, 0.070590466, -0.044135235, 0.004720781, -0.10503381, -0.07459148, 0.11364522, -0.055811483, 0.07923999, -0.029973647, -0.05245547, -0.06398957, -0.05821017, 0.010170717, -0.04593031, -0.06686731, -0.042797733, -0.03904659, 0.11666569, -0.042781938, 0.00245809, 0.083094664, -0.038084473, 0.06480447, -0.054540813, -0.006222144, -0.18249322, 0.083024964, -0.095702745, -0.020989321, -0.08448919, -0.024504457, 0.058049113, -0.022671528, -0.0012446326, -0.029217564, -0.098321006, -0.17262979, 0.049708474, 0.07248886, -0.0048387125, 0.06180032, -0.12028317, 0.08668041, 0.0047423593},
   {0.034905963, 0.080925606, 0.057805937, 0.04774709, 0.17739691, 0.076486915, 0.041586652, 0.076156236, 0.06792345, 0.15932272, 0.061934855, 0.08227714, 0.06647959, 0.062406234, -0.021534031, -0.026914805, -0.042016387, -0.05975991, 0.01222552, 0.019221878, 0.026246795, -0.050436858, -0.089878805, 0.047817335, 0.073238, -0.119937316, 0.11500879, -0.17820399, 0.0034487706, 0.036817584, -0.0027444018, -0.0718209, 0.044381827, -0.02560111, -0.0788051, 0.09193238, 0.074158415, -0.022504907, -0.06760238, -0.103796616, 0.096913174, 0.100740515, -0.11430956, -0.0034448334, -0.029869396, 0.04029817, -0.017118357, 0.005901128, 0.0013165206, 0.0732264, -0.0037982091, -0.017463522, 0.047843736, 0.13171376, -0.087741055, 0.08561543, -0.018127821, -0.0051580104, -0.08672538, -0.06489858, -0.026418231, -0.20776765, 0.078510106, -0.09627506, 0.052133076, 0.0420782, 0.011225777, 0.0489223, 0.04411698, 0.020362206, -0.0018841057, 0.0830224, -0.064576045, 0.010753206, 0.08110338, -0.013276234, 0.05445807, -0.06645809, -0.007689734, 0.02737088},
   {-0.038624533, 0.1253781, 0.09147849, 0.03392401, 0.19878608, -0.05078523, 0.15876533, -0.08556326, -0.093557574, 0.076611765, -0.06500202, 0.043848332, 0.017556775, -0.054183595, 0.03814691, 0.032501906, -0.08340387, 0.042554818, 0.008825837, 0.03087106, 0.053669345, -0.1319814, 0.011036366, -0.05602777, -0.04639393, -0.032907546, -0.052966736, -0.011506621, 0.029031992, 0.10036688, -0.09122235, -0.023260007, 0.07768745, -0.06585037, 0.07597638, 0.07246706, 0.087437384, -0.024432382, 0.085505165, -0.13247734, 0.07555321, 0.09917424, -0.08402425, 0.005736315, -0.042008527, 0.03814601, -0.050524976, 0.06044556, 0.0019008924, 0.06634306, -0.07674132, -0.032305487, -0.06870854, 0.10590611, 0.038509566, 0.021762047, -0.05888706, 0.0649126, 0.06622834, -0.017572833, -0.06837638, -0.08990319, -0.06930354, -0.06539392, 0.056387387, -0.11395594, 0.012934795, 0.05885688, 0.035320394, 0.17643692, -0.07335827, 0.0073174164, -0.087610126, -0.018009668, 0.002002139, -0.08561693, -0.011587962, -0.14115162, 0.08111757, -0.027845664},
   {0.06482484, 0.085332185, 0.010636698, 0.07887528, 0.08693371, -0.0056686164, 0.12820129, -0.069283396, -0.079142116, 0.11226331, -0.0890012, -0.023063088, 0.08846495, -0.034802485, 0.07140688, -0.123942435, -0.040587503, -0.071966365, 0.010956592, 0.08484961, 0.18428041, -0.013286227, -0.088783674, 0.07828176, -0.10368738, -0.07068474, -0.040740903, -0.016261661, 0.013159979, 0.091755815, 0.031155152, -0.08330974, 0.0332379, -0.099227935, -0.0015324149, 0.022591537, 0.056065265, -0.0029120666, 0.08566147, -0.09269926, 0.10365768, 0.07572886, -0.02987901, 0.03488088, -0.08338272, 0.035248093, 0.047373198, -0.03384468, -0.062834755, 0.007034601, -0.023633614, 0.072699144, 0.0064217243, 0.09417061, -0.020566422, 0.06531401, 0.060093343, -0.047202405, -0.032125086, -0.04040331, 0.07390504, -0.17251481, -0.0883821, -0.024139335, 0.065637164, 0.06664482, 0.07780268, -0.033021852, -0.03741173, 0.16051307, -0.06831218, 0.07924104, -0.10177431, -0.0972628, -0.07404574, 0.035231702, -0.022989852, 0.008886917, -0.016263645, 0.100215435},
   {0.05009674, 0.009030655, 0.044779085, -0.014665523, 0.20225754, 0.05072513, 0.15445456, -0.013670184, -0.020343952, 0.10991909, -0.0652396, 0.0072791665, 0.04627614, -0.021427661, 0.13485937, -0.00064210326, 0.016216455, 0.003613241, -0.030578079, -0.007250945, 0.010853807, -0.024495779, 0.06758688, 0.06692928, -0.0041616466, -0.0648999, -0.0068354513, 0.003137785, 0.06526704, 0.14239816, 0.017000323, 0.022852689, -0.008003987, -0.026684828, -0.09682675, 0.06482583, -0.029567393, 0.061531857, -0.038602725, -0.0008202772, -0.078444056, 0.1137888, -0.11604171, 0.068679, -0.16476384, -0.027785458, 0.08374142, 0.045304492, 0.056307282, 0.039937712, -0.026489258, -0.0711948, 0.07765531, 0.10793901, -0.060940523, -0.091614865, 0.034924172, 0.047761783, 0.029648773, 0.050735224, 0.037551053, -0.17123757, 0.035224147, 0.062412057, 0.039986186, 0.048011772, -0.053075243, 0.057177193, 0.07325841, 0.17126365, -0.098680936, 0.050154127, -0.13081792, 0.057360526, 0.014183712, -0.06506015, 0.026175627, -0.10288832, -0.010389573, 0.13640822},
   {-0.07259612, 0.033315517, 0.059713423, 0.089968055, 0.14061236, 0.022312872, 0.03474998, -0.085880026, 0.07696362, 0.059386227, 0.10984333, -0.00849793, 0.09812775, 0.017507963, -0.009371504, -0.13489257, -0.043932308, 0.0553656, 0.06751895, -0.08227469, 0.08729847, -0.0061646914, 0.07540319, 0.055555634, -0.058914673, -0.16183278, 0.07005463, -0.10951955, 0.11455731, 0.07127852, 0.04981822, 0.037289623, 0.084879264, -0.089531995, -0.0066334107, -0.018682363, 0.05353142, -0.0868141, 0.013806723, -0.008506293, 0.035354767, 0.11867252, 0.013691974, 0.012392749, -0.06179284, -0.057629887, -0.08643486, 0.0862494, 0.026474709, -0.020257924, 0.049060352, 0.041307587, -0.025364067, 0.045607008, -0.049966715, 0.027410263, 0.0401305, 0.03151479, -0.011755303, 0.055703346, -0.069007754, -0.3387601, 0.040793072, 0.047258995, 0.035438187, 0.1294129, -0.06790875, 0.0005657572, 0.059692122, 0.04054346, -0.096207, -0.08582403, -0.10455487, 0.012667835, -0.024550222, -0.094126046, 0.026762191, -0.11906961, -0.09623301, 0.037142087},
   {-0.038167715, 0.20086257, 0.03077826, 0.055076078, 0.046938933, -0.0045574075, 0.08113546, -0.020002337, -0.08571309, 0.058498904, 0.040452667, 0.012610473, 0.013863326, 0.007789932, 0.055473596, -0.146405, -0.11644309, 0.09269034, -0.042358, 0.005804922, 0.11151709, -0.011228063, 0.081794865, -0.0152993025, -0.0024154584, -0.082265414, -0.0023544503, -0.04296451, 0.045850217, 0.08532332, 0.023975966, -0.043827415, -0.020289762, -0.026148051, 0.07616945, 0.116544776, -0.04740787, -0.054832086, 0.06961982, -0.010015273, 0.054449007, 0.020420909, 0.06462158, -0.018293882, -0.016015992, -0.041496944, 0.045603313, 0.08272823, 0.05639092, -0.03307183, 0.005879529, -0.049799524, 0.031417206, 0.12025229, -0.058353387, -0.08025634, 0.023429455, -0.00719667, -0.06284541, 0.038063243, -0.03368829, -0.2759458, 0.08011277, -0.119143136, -0.07556171, 0.086725675, 0.05842068, -0.09095786, 0.039440908, 0.09414326, -0.11962904, -0.06861601, -0.030116761, -0.06403001, -0.15454978, -0.0943534, 0.004471735, -0.11950828, 0.05194565, 0.18462761},
   {-0.08286691, 0.09280203, -0.011433198, 0.09519069, 0.085471444, 0.011007003, -0.0032260765, -0.045032606, -0.047446676, 0.120767206, -0.047782727, -0.0043761833, 0.11235505, 0.026237845, 0.056358725, 0.023420291, -0.08505865, 0.010647148, -0.08531489, 0.028939093, 0.18921858, -0.13223885, -0.011031993, -0.053852703, -0.030435748, -0.12961973, 0.0028827016, -0.16009328, -0.035196394, 0.18411215, -0.051200107, 0.038221434, 0.051278654, 0.07144393, -0.044227764, 0.07358028, -0.096844986, -0.05282994, 0.077015184, -0.0029861182, 0.034970306, 0.05476091, 0.021100737, -0.00896514, -0.04013114, -0.041895036, -0.012947202, 0.0076924213, -0.035663467, 0.038513202, -0.023990393, -0.054238606, 0.006660572, 0.1365061, -0.034769524, 0.06836394, 0.012347768, 0.044854354, -0.04498943, 0.08998075, 0.08293212, -0.20679206, -0.033317346, 0.02982494, 0.025946558, 0.05746521, 0.0047019403, 0.039521646, -0.041374955, 0.087946415, -0.15578756, 0.055194132, -0.12075853, -0.08012282, -0.006492058, 0.09412917, 0.06061166, 0.0036566444, 0.083213314, 0.19729847},
   {0.058728408, -0.023164425, 0.107090004, 0.012842678, 0.24923223, -0.065541476, 0.16524948, 0.025902828, -0.07803047, 0.033347324, -0.11360257, 0.010825318, 0.16128135, 0.021565355, 0.0015501872, 0.023533644, 0.10614255, -0.06539962, -0.004028706, -0.012297639, 0.05310693, -0.061305873, -0.060058933, 0.02792448, -0.017741734, -0.016794855, 0.077194974, -0.12299598, -0.02533303, 0.14206816, 0.029678391, -0.043155782, 0.0038976623, -0.019639699, 0.007913218, 0.08783861, 0.08902681, -0.0013324629, 0.008975294, -0.063583635, 0.122676104, -0.06633415, -0.07601218, 0.059474517, -0.11903347, -0.04006209, 0.035854645, 0.041171923, -0.0783333, 0.07992244, -0.03165006, -0.064568125, -0.036372248, 0.17077352, -0.012239738, -0.03270966, 0.04404502, -0.09854172, 0.09546655, -0.03886462, 0.06603097, -0.15746044, -0.12743051, -0.068455145, -0.028966501, -0.025089866, -0.043492503, -0.012094032, 0.07145459, 0.16151471, -0.088487774, 0.008748027, -0.1389185, -0.0939674, 0.019201634, 0.08095055, 0.048115306, -0.021175051, 0.086510934, 0.22497955},
   {0.08111836, 0.032025736, 0.061584663, -0.038857907, 0.24664608, -0.06031278, 0.061080407, 0.07897694, 0.070529446, 0.26531672, -0.22325492, -0.049914956, 0.16476268, 0.0114344135, -0.08135657, 0.100948855, 0.14736958, -0.019943535, -0.20583282, 0.077443995, 0.089866556, -0.18588002, 0.054721914, -0.08204034, -0.0175007, 0.068676054, 0.13109492, -0.22668925, -0.22293447, 0.29837435, 0.060812134, -0.030087052, 0.030178102, -0.036777195, -0.047378473, 0.10263493, -0.076611854, -0.070007786, 0.0857296, -0.07318231, 0.03557763, -0.15518604, -0.05142404, 0.0015384799, -0.10807699, 0.08563075, -0.06232634, -0.07386805, 0.03630946, 0.052772183, 0.056255348, 0.03677902, 0.02372457, 0.06512874, -0.07912375, 0.06340183, -0.08519931, -0.048885524, 0.026164085, 0.06359649, -0.07141594, -0.20385204, -0.16814327, -0.013206467, -0.062846854, -0.096247986, -0.017506925, 0.030129375, 0.0016153082, 0.15416403, -0.13703506, -0.08569677, 0.061689537, -0.015198646, -0.0936287, -0.09155901, -0.021348562, -0.002497588, -0.054071967, 0.27267122},
   {0.046250932, 0.10344217, 0.0858508, -0.09788391, 0.16713569, 0.015624501, -0.074891366, -0.09478507, 0.054472987, 0.15309268, -0.2025261, 0.050554894, 0.12896565, -0.056513753, -0.109910466, 0.23857135, 0.093523026, 0.038212903, -0.0988211, 0.01697927, -0.057844, -0.12754068, -0.08503987, 0.08258951, 0.050107297, 0.032554638, 0.08853546, -0.0655456, -0.08755934, 0.18691567, 0.052356876, -0.040382266, -0.030923136, -0.03538388, -0.0060883453, 0.20589615, -0.09209369, -0.08306126, 0.060462516, 0.031525526, -0.12459355, -0.12451233, -0.020478057, -0.03091352, -0.16571707, 0.027827546, 0.0195316, 0.08931174, -0.06735275, -0.00865282, -0.00779479, -0.051447432, 0.038478125, 0.07787176, -0.07890802, 0.0667323, -0.081653446, 0.0373896, -0.058019564, -0.05726625, 0.053053685, -0.13748544, -0.18950878, 0.23010868, -0.074788556, -0.24820709, -0.037193414, 0.037710313, 0.020886354, 0.046077393, -0.14468926, 0.051943164, 0.21769138, -0.05663563, 0.034854427, -0.067031935, -0.07351639, -0.12250779, -0.08718043, 0.24128301},
   {-0.08837816, -0.09446965, 0.1585067, -0.12240542, 0.21201588, -0.08016446, -0.09393711, -0.052930564, 0.026062934, 0.21439154, -0.348453, 0.014010598, 0.15624405, 0.05921071, -0.18163007, 0.2049427, 0.19201057, -0.07786819, -0.26477206, 0.015658692, 0.10386484, -0.11572102, -0.01999773, -0.008857335, 0.08754235, 0.24571204, 0.14402236, -0.14771572, -0.10284833, 0.19916871, -0.09685531, -0.08738628, 0.08338519, -0.027449243, 0.08074608, 0.1170433, -0.043857656, -0.14471498, -0.08602132, 0.08212471, -0.1150593, -0.20339292, -0.032493867, -0.031135159, -0.03285509, 0.0029033422, -0.072871745, 0.0031546669, 0.040801946, 0.009310034, 0.0474289, 0.016612468, -0.008206716, 0.08515854, -0.08231219, -0.03220721, 0.037350412, 0.016678337, -0.046707798, -0.009708613, -0.069832735, -0.07714917, -0.19747657, 0.13798404, -0.02200292, -0.19359583, -0.000113211165, 0.04263134, 0.08317139, -0.033869058, -0.1245279, 0.06587817, 0.20161335, 0.06744156, 0.094157554, -0.086820826, 0.07760842, -0.14987953, -0.07287731, 0.19345917},
   {0.07597197, -0.09365496, 0.08170958, -0.17732242, 0.039076574, 0.024864158, -0.054114915, -0.015164943, -0.030979339, 0.16020434, -0.17257372, 0.0072661885, 0.082664765, 0.026155874, -0.0073497957, 0.07082328, 0.20162295, 0.016514935, -0.10998068, 0.07142896, 0.032325976, -0.0028574902, -0.088160396, 0.017047612, 0.01041995, 0.08231259, 0.10046506, -0.042093985, -0.1192696, 0.09329906, 0.058313392, 0.032918256, 0.0019166414, -0.07109473, -0.08569974, 0.11601103, 0.034285877, -0.06522559, 0.048120778, 0.040162627, -0.03065625, -0.2670493, -0.0103937285, -0.017403774, 0.4664472, 0.010504432, -0.04178169, -0.0024245796, -0.071997374, 0.021018842, -0.09292924, -0.0062505496, -0.028294832, 0.0652876, 0.07787274, 0.07905469, -0.09264749, 0.065113045, -0.039339032, 0.008626081, 0.04368017, -0.06357319, -0.24949549, 0.29364964, 0.015732773, -0.1501016, -0.08409503, 0.03384501, 0.090887256, 0.0085582435, -0.0016150189, -0.04129757, -0.26967672, -0.02640173, -0.022680342, -0.034223944, -0.07942399, -0.17833677, 0.08826254, 0.08691878},
   {0.09012628, -0.03381936, 0.07806735, -0.22456896, 0.1899834, -0.037722282, -0.014817896, -0.056840032, -0.03712501, 0.12151659, -0.13304245, -0.00674076, 0.16533843, -0.053120725, 0.0095042875, 0.08727529, 0.059115592, -0.035353873, -0.2677053, -0.00030432837, 0.098798275, -0.19253145, -0.06816912, 0.048708282, 0.09832617, 0.018528426, 0.1818496, -0.11050629, -0.07766995, 0.253402, -0.011817501, 0.052228495, 0.050529912, 0.007232897, 0.061385825, 0.26559362, -0.08916041, -0.061644644, 0.0005975205, 0.10782007, -0.0849007, -0.19397345, -0.18516776, -0.05368264, 0.42605934, -0.060199823, -0.049437664, 0.04879089, -0.05940564, 0.024479026, 0.07016251, 0.032018512, 0.043829944, 0.14484379, 0.09028847, 0.0051180306, -0.07482899, -0.042342342, 0.09061008, 0.020245122, 0.030685745, 0.03726432, -0.18135287, 0.15829508, 0.006252043, -0.21291474, 0.020429537, 0.06660172, 0.0057994276, 0.10016429, 0.01080377, 0.016089767, -0.26006946, -0.047221143, -0.06673018, -0.019756764, 0.0812569, -0.16555431, -0.07453605, 0.19059786},
   {0.03809653, 0.07927406, 0.14787424, -0.07191177, 0.17601092, -0.09538134, 0.06465001, -0.06675936, 0.06765383, 0.03431231, -0.010672573, 0.031018108, 0.09042468, -0.022701673, 0.056235876, -0.025614807, -0.027657771, 0.07352898, -0.112323664, -0.073557235, 0.049412627, -0.06536069, 0.0037129521, -0.016012855, 0.027524816, -0.015188484, 0.14767297, -0.19142014, -0.07130697, 0.18079793, -0.055557817, -0.0027700174, 0.014101951, -0.0003843341, 0.01867573, 0.17381342, -0.07882813, -0.008418936, 0.077987485, -0.057434097, -0.039187696, 0.0326906, -0.08701076, -0.04472898, 0.17011243, 0.08010242, -0.08205752, -0.0057734004, -0.0046921736, -0.09842806, 0.014989078, -0.055783473, 0.021623958, 0.031050263, -0.028647952, 0.0051416983, -0.008648827, 0.03612074, -0.063104376, -0.057845034, -0.080133185, -0.09318518, -0.03788679, 0.13059787, -0.0032503605, -0.03639984, 0.06308667, -0.04774482, -0.07738081, 0.13271685, -0.13252984, -0.070058435, -0.19187275, 0.015136465, -0.109414704, 0.023591459, -0.0848969, -0.16624615, 0.069886655, 0.09106536},
   {0.05113859, 0.14723665, 0.15469751, -0.014116922, 0.064893514, -0.060564198, 0.04239646, -0.10081104, 0.08003551, -0.004317044, 0.00051629724, -0.08634923, 0.12692349, -0.05866918, -0.038860355, 0.035269614, -0.08147043, -0.08388153, 0.023892093, 0.01629151, 0.09784184, -0.11914707, -0.09314487, -0.08567905, 0.023607966, 0.02371476, -0.025881356, -0.05083428, 0.06914519, 0.07176092, 0.048643418, -0.038735095, 0.0061400235, 0.022690425, -0.08910561, 0.059249517, -0.005560923, -0.11228622, 0.0326164, -0.062339026, -0.027775645, 0.097464934, -0.061300002, -0.06760721, 0.1467804, -0.011993714, -0.083842106, -0.091135904, -0.043051906, 0.029093927, -0.01300396, 0.070187345, 0.07079795, 0.030040724, 0.013211249, -0.00310006, 0.006531017, -0.025397677, 0.02832225, -0.05529175, 0.009862617, 0.017542414, -0.052853756, 0.11652749, -0.015631765, -0.11058787, 0.085171044, -0.042055532, -0.0005953461, 0.036782105, -0.14806211, 0.0771998, -0.09310249, -0.079912946, 0.014553689, 0.06868071, -0.054170754, -0.095510796, 0.055994574, -0.0020408542},
   {-0.08172063, 0.09296101, 0.1397104, 0.15765814, 0.09321864, -0.017934753, -0.0025414566, 0.008852921, 0.0828901, 0.054528855, 0.026095064, 0.08379329, -0.00850206, 0.061039783, 0.03923895, -0.09727519, -0.124345034, 0.04082223, 0.10022586, 0.08688808, 0.1953164, -0.02840645, 0.06846259, -0.005347647, -0.043869853, -0.078401014, 0.075783804, -0.011538593, -0.02908091, 0.01280436, 0.053526115, 0.07279292, 0.057278924, 0.07951772, 0.060755968, 0.10858312, 0.04372412, -0.031243311, -0.07238509, -0.008092198, 0.06937064, 0.13866328, 0.021741046, 0.05995653, -0.0980199, -0.07219591, -0.007511802, -0.05730197, 0.024930997, 0.020607086, -0.009039685, 0.010542958, -0.0021804965, 0.043007776, 0.08934895, -0.006833667, -0.029483179, 0.042704653, 0.05160474, -0.015726471, -0.07803449, 0.01563482, 0.0425353, 0.15723333, 0.07590688, 0.14511752, 0.08457067, 0.06621108, 0.009714864, 0.16169442, -0.21480224, 0.04047384, -0.13643286, -0.088869795, 0.02055808, 0.093009405, 0.01951382, 0.031044533, -0.016268505, 0.0633611},
   {0.046540134, 0.2099242, 0.16296524, 0.054605313, 0.03410925, -0.1719967, -0.03933217, -0.079909414, 0.072667494, -0.02431915, 0.2249639, -0.019899223, -0.022762975, -0.050668877, 0.07217777, -0.18748318, -0.19446033, 0.019993559, 0.030960776, 0.08895997, 0.022859432, 0.027435793, 0.060237013, -0.05866542, -0.079662055, -0.15973206, -0.015601593, -0.028494576, 0.17527756, 0.003076613, 0.068741515, -0.07772172, -0.013071379, -0.080961406, -0.086509295, 0.002050521, -0.049108893, 0.0034960576, -0.047687907, -0.09521239, -0.05305982, 0.15751103, 0.07695007, -0.05079028, -0.21258587, -0.05856361, -0.037306912, -0.064159356, 0.08901418, -0.09151815, -0.02556853, 0.029935954, -0.06991843, 0.03464292, 0.013495927, -0.014211167, 0.077327274, 0.016356952, -0.0879853, 0.07893562, 0.006731212, -0.08963991, 0.15669529, 0.046184227, 0.086232804, 0.1287885, 0.015441969, 0.026722515, 0.07053634, 0.025554802, -0.09880249, 0.03482695, -0.10201356, 0.063688904, -0.017465653, -0.07519351, 0.08604736, 0.015237872, -0.095917314, -0.1692818},
   {-0.055768266, 0.06054509, 0.13667688, 0.17208058, -0.025002489, -0.13945772, 0.021978978, -0.080856465, -0.060925998, -0.025670672, 0.15069287, 0.04671102, -0.046439786, 0.08665087, 0.20878078, -0.073864, -0.13246764, -0.0020616874, 0.060991645, 0.0006528708, 0.120146565, 0.05324597, 0.047499694, 0.07724438, 0.012027544, -0.004368649, 0.07277423, 0.10847663, 0.12259862, -0.032118272, 0.0075393203, 0.08335173, -0.0023430127, 0.015312581, -0.016393084, -0.013101262, 0.023127653, 0.044302568, -0.033866122, -0.16201743, -0.042974867, 0.049691312, -0.025041519, -0.047514807, -0.0819842, 0.047171257, -0.0067028925, 0.0133830495, 0.056384116, -0.017326845, 0.09560949, 0.08641199, 0.016828572, -0.05871126, -0.06802418, 0.05577017, 0.011777968, 0.022357563, 0.031731926, 0.0110957995, -0.0482573, -0.087675855, 0.048806414, 0.07330626, 0.08458827, 0.20475227, -0.055416025, -0.084288344, -0.036964025, 0.13991189, -0.11858053, -0.034557417, 0.041982505, 0.057119403, -0.124800995, 0.085866444, -0.06995767, 0.057667658, -0.036529053, -0.16131994},
   {0.009683022, 0.15518062, -0.009532338, 0.11764069, -0.07087881, -0.013020953, 0.12690203, -0.040336587, -0.06629113, -0.12099318, 0.054465845, 0.02623181, 0.03266988, -0.014928199, 0.10247661, -0.119304724, -0.19808446, 0.06375187, 0.120816015, 0.07530681, -0.0015476239, 0.008682152, 0.07079867, 0.0030774078, 0.0534773, -0.08544331, -0.05174453, 0.027195182, 0.14082305, -0.09064013, -0.09579557, 0.05043596, -0.054843493, 0.051950075, 0.0022658817, -0.011113021, -0.059873328, 0.07485488, 0.009560681, 0.033389173, -0.051485453, 0.1383136, 0.12708686, 0.018429093, -0.03737662, -0.069636434, 0.0067511424, 0.009926687, -0.002507496, 0.04548215, -0.081520796, 0.022586394, 0.07085271, 0.017941726, 0.06616864, -0.034907006, 0.014452123, 0.029654931, 0.08941995, -0.08368738, -0.028199963, 0.0036817063, 0.1457184, -0.04337407, 0.08520948, 0.08200539, -0.025253639, -0.040037762, 0.0011364967, 0.05113267, 0.010682593, -0.037589576, 0.031480234, -0.052960925, -0.047531556, -0.00686761, -0.052592896, -0.021679012, 0.07837871, -0.046194844},
   {0.04440261, 0.14184146, -0.02445104, 0.092989415, -0.06554588, -0.11446306, 0.03161873, 0.026224565, 0.015972052, 0.006749999, 0.015427325, -0.06763931, -0.010078716, 0.011499196, 0.075753085, -0.020161094, -0.053609807, -0.0736446, 0.036385134, 0.069148004, -0.028605577, 0.09590816, -0.085447535, 0.030100558, 0.073815145, -0.10513503, 0.014060043, -0.038155723, -0.028411234, -0.039126806, 0.0074301497, 0.039973687, -0.048601095, -0.0904165, 0.013629926, 0.107605204, -0.05422719, -0.00513612, -0.040818688, 0.049916323, 0.0017937298, 0.08751701, 0.0072862534, -0.06191978, -0.11403394, 0.0001116842, -0.09069389, 0.08453885, 0.0863771, -0.0877498, 0.09329555, 0.04233178, -0.062401146, -0.032637633, 0.025106156, -0.10145494, -0.041616723, -0.08728604, -0.041634437, -0.05085807, -0.032469027, -0.102650315, 0.083439395, 0.08125806, 0.019585617, 0.008975702, -0.09010311, -0.057654165, -0.07235543, -0.015718026, 0.015632097, -0.04623237, 0.027112635, -0.044692863, -0.12091381, -0.016295083, -0.008820622, -0.09656015, -0.07852911, -0.112137206},
   {0.03015783, 0.035382576, 0.07486901, 0.067834735, 0.031090071, 0.04223663, -0.021679685, 0.06960211, 0.040703937, -0.041815754, 0.12308892, -0.044921488, 0.007808885, 0.011035249, 0.13501753, -0.10950729, -0.06189645, 0.0047973692, -0.068945564, -0.058429923, -0.012566708, -0.022888431, -0.03611471, -0.0691, -0.07370736, -0.039636098, -0.049099408, -0.045389764, 0.048601106, -0.078016944, 0.078333065, 0.018818388, -0.051185556, 0.031523213, -0.042182297, -0.057713784, -0.039036755, 0.106094755, 0.0803979, -0.010702639, 0.07579494, 0.1568616, -0.064799465, -0.08426172, -0.07111588, -0.07561326, -0.012154989, 0.038415566, -0.03554376, 0.04914612, -0.015255675, 0.07642175, 0.07075312, 0.096005164, 0.0063405116, -0.046858612, 0.020302013, 0.08788309, 0.00030795485, 0.078154214, -0.047464855, -0.078116216, 0.083787106, -0.06532879, -0.083654284, 0.08762717, 0.08499842, -0.082241595, 0.04764075, -0.009721361, -0.050351083, -0.081160605, 0.09588749, 0.009078809, 0.061986275, 0.08387978, -0.08328785, 0.021344567, -0.09085871, -0.030242182},
   {-0.02679158, -0.016798828, 0.09651662, -0.0008945729, 0.0452615, 0.023028644, -0.0010001471, 0.06830235, -0.04977662, -0.06408429, 0.0042172037, 0.032079544, -0.036611814, -0.024437048, 0.09472962, 0.0037682992, 0.03664792, -0.03431914, 0.08502715, -0.07389727, 0.08405666, -0.081000954, -0.05608278, -0.091151446, 0.035786077, -0.1487542, 0.008870569, -0.0950859, 0.015531908, 0.11754765, 0.00015822663, -0.09907282, -0.006882911, -0.08330389, -0.06488755, 0.10722837, -0.017182525, 0.09321022, 0.04163899, -0.025626684, 0.0026417535, -0.011720596, -0.10023773, 0.08023194, -0.09242842, 0.0032589287, 0.07109318, -0.06130196, -0.06992582, -0.04995158, -0.046648946, -0.02736544, -0.09056837, 0.012519658, -0.04709933, 0.01425067, -0.0545911, -0.08503279, -0.020439446, -0.05828828, 0.04444226, -0.038975026, -0.02963512, 0.06815477, -0.024426676, 0.019468151, 0.08295779, -0.077008136, -0.057973094, 0.09418764, -0.115188524, 0.02743508, 0.06442808, 0.018001499, 0.07535411, 0.0858494, 0.017800625, 0.082735695, 0.051990036, -0.05925493},
   {0.070004895, 0.06973124, -0.03792105, 0.040273905, -0.032921463, 0.050919086, 0.071065165, 0.026154244, -0.03505196, 0.051563136, 0.04988118, 0.028901694, 0.045391385, -0.006423071, -0.019224035, 0.04921751, -0.06309766, -0.022823185, 0.046616815, -0.019169357, 0.08487595, -0.039189003, 0.013947666, -0.00032085122, 0.0012261139, 0.004661743, 0.038530573, -0.031846683, 0.024981499, 0.003036172, 0.062026184, 0.05706574, 0.03326477, -0.06997802, -0.08580804, 0.040504232, -0.079612665, 0.030292893, 0.051162, 0.010608505, 0.07496034, -0.031882245, -0.09068234, 0.07408125, -0.054570723, 0.040357895, -0.020543642, -0.020145051, -0.0980617, 0.033341683, -0.08785617, 0.05674969, -0.013013649, 0.13852134, 0.08588177, 3.4090901e-06, 0.06048734, -0.029436063, -0.09247891, -0.03333786, -0.0846609, 0.016458103, 0.013168831, -0.046236824, 0.00504224, 0.09086349, 0.08514566, 0.07982882, -0.07916948, 0.12014707, 0.025255103, 0.036892757, -0.015080598, -0.04309583, -0.06172406, 0.0008772686, 0.005897057, -0.026503475, -0.04473501, -0.038395047},
   {0.0691924, -0.042306326, 0.109304436, 0.026608692, -0.01171425, 0.100149535, 0.12855135, -0.09683467, -0.052442815, 0.035269365, 0.022201395, -0.08501313, -0.037316732, 0.021007612, 0.037093233, -0.04903933, 0.017774284, -0.020318456, 0.032031137, 0.026883725, 0.077220246, 0.09147844, 0.06191101, 0.02794836, 0.13358068, -0.081500374, -0.010203132, 0.015440854, -0.072251245, 0.08387662, -0.038710214, 0.05950375, 0.062460277, -0.027025152, 0.03294438, 0.05135268, -0.05740471, -0.005720327, -0.069603056, 0.016688501, 0.074367926, 0.045352884, -0.005166427, -0.011253831, 0.004260215, 0.04878264, 0.058102123, -0.07108499, -0.017292213, -0.029164143, -0.089835964, -0.057744816, -0.021711435, 0.085644014, 0.022291796, 0.06878676, -0.08288136, -0.030390844, 0.028885946, 0.062247388, -0.059734628, -0.06291528, -0.055944838, 0.07372947, -0.047800492, -0.020986382, -0.04768109, 0.016509844, -0.07623237, 0.036746856, -0.0014149789, 0.004464855, -0.025202997, 0.0679522, 0.049147293, 0.012245856, -0.008888792, -0.052869905, -0.05706903, -0.015689405},
   {-0.012364328, -0.0065687555, 0.020890128, -0.030226525, -0.04728181, 0.11375345, 0.039893933, -0.08135, -0.05286101, 0.05244132, 0.05739706, -0.00076287414, 0.009974737, -0.04469139, -0.0020837486, -0.070320085, -0.021067057, -0.072374836, -0.039051306, -0.07167199, 0.065746345, -0.039767627, -0.09334562, 0.026135713, 0.05065267, -0.076766826, -0.12290246, -0.06006622, 0.10306966, 0.013557824, -0.026154613, -0.084722824, -0.012251571, 0.05900161, -0.007605737, 0.03277778, 0.09043666, 0.06568618, 0.015510077, 0.07541338, 0.02976475, -0.024951173, 0.0013711592, 0.085959, -0.029206444, 0.09083911, 0.057553224, 0.072807126, -0.053656038, -0.070377514, 0.022463627, 0.007921519, 0.041339282, 0.063853316, 0.045349956, -0.03617886, 0.047000058, 0.06013291, -0.05962349, -0.029361097, -0.04021242, 0.08911424, -0.05460374, 0.045063622, 0.036732294, 0.04381391, -0.05530843, -0.013754317, 0.08679215, -0.10609135, 0.04041707, -0.083405115, -0.031296425, 0.068236865, 0.028248528, -0.056622993, 0.07306389, 0.08584635, -0.04777449, -0.03474061},
   {0.034677565, 0.0039620986, 0.01478293, -0.076139085, 0.05663164, 0.072836265, 0.034327425, 0.0033509384, 0.029111193, -0.025257839, -0.0656282, 0.075486995, -0.12517789, -0.010817543, 0.0328774, -0.068593964, 0.018424695, -0.049956467, -0.080175236, 0.024799502, 0.024385883, 0.01840854, 0.013240911, 0.06593741, 0.14999512, -0.030709192, 0.016578501, -0.05002577, 0.017359667, 0.02512333, -0.09179155, -0.025814537, -0.032449756, -0.0368337, 0.0004795883, -0.09465461, 0.031452805, 0.14573988, -0.07190724, 0.072577134, 0.10168691, 0.017849213, -0.019893259, 0.055939507, -0.103623725, 0.0224929, -0.019547515, 0.010734184, -0.007118087, 0.08024654, -0.02974531, 0.031586155, 0.024809899, -0.06429708, -0.056346793, -0.05644599, 0.013612339, -0.08272227, 0.033326752, 0.08930822, -0.043868143, 0.053400267, 0.00706755, -0.02399952, -0.031008177, -0.03055517, 0.013342213, 0.03860176, 0.039840885, 0.02656051, 0.0619592, 0.00097308843, -0.012649693, 0.030861612, 0.049122304, 0.015291475, -0.043531414, 0.12598138, -0.09184297, 0.111350894},
   {0.08434226, -0.084605925, 0.07403028, -0.05864553, 0.00025638944, 0.040352684, 0.11471374, -0.025469054, 0.061525, -0.11052927, -0.014748856, -0.09173751, -0.039644964, -0.031972542, -0.04930911, -0.010318228, -0.08822476, 0.08559985, -0.0017330063, -0.0732741, -0.13065484, 0.040223267, -0.014330119, -0.036756676, 0.12856507, -0.0015587289, -0.18079765, -0.01031839, 0.092521936, -0.045319535, 0.08146236, 0.078455456, -0.055432558, -0.012098937, -0.026026674, -0.11134734, -0.04030612, 0.21501052, 0.0049476824, 0.05836476, 0.014685287, -0.046958383, -0.06992002, -0.07571709, 0.011241858, -0.061350662, -0.08592963, 0.077358454, -0.06395042, -0.07066371, -0.012982227, 0.062432017, 0.0075230147, -0.072936565, 0.05382524, -0.07578933, -0.051458515, -0.056095958, 0.07381732, -0.016533112, 0.034593664, 0.057306882, 0.03379649, 0.07002494, 0.044398777, 0.14284247, 0.002957887, -0.018325223, -0.023791954, -0.15775664, 0.09192592, -0.047258154, 0.07844467, 0.018620761, -0.019204166, 0.054911084, -0.08226728, 0.2046149, -0.01230929, 0.09813027},
   {0.08529542, -0.106467396, -0.0008043428, -0.059225168, 0.014790705, -0.006968414, -0.03778762, -0.053965174, -0.08708159, -0.09047739, 0.07401423, 0.0075441995, -0.046122387, 0.020775974, 0.0037377581, -0.09112416, -0.133193, -0.035170387, -0.04961753, 0.019664424, -0.0046070893, 0.13223684, 0.06595435, 0.050268836, 0.027729029, 0.009490064, -0.03485843, 0.09521521, 0.041373104, -0.03588584, -0.10135899, -0.06036206, -0.015439342, -0.08146433, 0.04262829, -0.1585554, -0.043738544, 0.12636828, 0.032688543, 0.08656479, 0.14324863, 0.08169472, -0.06497799, -0.08842352, 0.038494833, 0.057498477, 0.059606276, -0.053288165, -0.055650447, -0.0066847974, -0.016974501, 0.025292518, -0.014982278, -0.027918875, 0.011408058, -0.009388771, 0.0072194873, 0.0071874084, -0.0019875392, 0.08692602, -0.08415668, -0.048466474, 0.04537683, 0.06532733, -0.089095235, -0.015627583, 0.051792506, -0.093265004, -0.040201932, -0.012383585, 0.04873884, -0.064637944, 0.09679642, 0.023858733, -0.08045391, 0.076992415, 0.040425856, 0.1951302, 0.08594178, 0.083717436},
   {0.06563663, -0.1809121, 0.08390372, -0.012784641, -0.063608475, 0.0954881, 0.038872655, -0.0115085775, -0.06713733, -0.061743792, -0.061830122, -0.06576277, -0.06332937, 0.07129031, 0.049116284, 0.018667694, 0.040070985, 0.092116885, 0.015896155, -0.059417363, 0.02046222, 0.029760294, -0.0269856, 0.06078882, 0.056331914, -0.08701422, 0.009812975, 0.045807358, -0.051069457, -0.067783885, -0.029727142, -0.08952878, 0.05163186, -0.09769708, -0.078218915, -0.061277237, 0.04803038, 0.19530544, -0.08918388, 0.07045771, 0.11714908, 0.11465515, 0.017459871, 0.07107376, -0.06750415, -0.07160063, -0.058970228, -0.094028644, 0.018681267, 0.015026471, -0.00047582388, 0.010808275, 0.010624926, -0.113157384, -0.051038887, -0.05746479, 0.05145729, 0.022204539, 0.07271669, 0.052584913, -0.033062316, -0.020216642, 0.06699837, 0.027675292, 0.09067237, 0.12086849, 0.04884545, 0.059758175, 0.03820125, -0.008028132, 0.084048554, 0.044468366, 0.03077636, -0.061061967, 0.09805524, -0.016818881, -0.036117774, 0.121280126, 0.0842282, -0.023853756},
   {0.073078655, 0.047126587, -0.053289015, 0.08590564, 0.12399359, -0.034419123, -0.008315469, -0.08216542, -0.08313365, 0.0025676447, 0.09138461, 0.042357706, 0.05873952, -0.06760528, 0.06593216, 0.002450578, -0.029071871, 0.019350171, -0.022507297, -0.05132358, -0.10331546, 0.006965362, 0.061765008, 0.00834189, 0.05733698, 0.026766717, -0.041724317, 0.04945914, -0.00097316975, 0.10221932, -0.0085833175, 0.084692195, -0.06078641, -0.09541393, 0.026568115, -0.070460446, 0.07507066, 0.07530297, -0.0555007, -0.03774095, -0.00626031, 0.08986735, 0.003298225, -0.09637848, 0.027701763, -0.028367557, -0.017491527, -0.096353084, -0.04939344, -0.008086481, -0.047496412, -0.09239932, -0.066045605, 0.074318446, 0.088629045, 0.082305044, 0.05857522, -0.050048463, 0.032168277, 0.07214379, 0.056696393, -0.034874994, -0.10571134, -0.025651732, -0.019547947, 0.01542667, 0.08936233, -0.09562974, -0.0002527982, -0.091067895, 0.03750176, 0.07830265, 0.06171444, 0.028814886, -0.05473481, -0.016667612, -0.09537331, 0.02893989, 0.03918072, 0.109181166},
   {0.07919497, -0.10028718, -0.03505463, 0.011281, 0.064604424, 0.047127195, 0.02809262, -0.017727219, 0.08490172, -0.0049486267, 0.0067039956, 0.067030326, 0.011242396, 0.046546794, 0.102567986, -0.07885161, 0.04264282, 0.010390565, -0.038905848, -0.08921237, -0.02859109, 0.08805376, 0.08466629, -0.022461934, 0.026401065, -0.09765373, 0.041862134, 0.0461969, -0.08855516, 0.007480963, -0.0862989, 0.05666151, 0.04065865, 0.03302771, 0.048375055, -0.066292144, 0.037283745, 0.12689978, 0.049731, 0.0048395135, 0.04444245, 0.008107764, -0.092033274, 0.07235606, 0.042600516, 0.065652035, -0.02057778, 0.050685696, 0.061629355, 0.023440875, 0.026622437, -0.06991771, 0.042093046, -0.03903023, 0.06671785, 0.0037805976, -0.069213286, -0.00028724482, -0.073052466, -0.014707576, -0.08024302, 0.030976783, -0.020464318, 0.06605554, 0.029140666, 0.093761586, 0.003937022, 0.08235864, -0.015573256, -0.039340906, -0.06920191, 0.023990495, -0.14178593, 0.030074026, 0.06949909, -0.037461873, 0.0016224307, 0.10820989, -0.027014878, 0.07329481},
   {0.008037403, 0.061714914, -0.0054358677, 0.027390175, 0.13569403, 0.0011756065, 0.1345912, 0.050330244, 0.021440221, 0.09226197, -0.057350736, 0.062308356, 0.06626652, -0.0455534, -0.004775305, -0.11650216, 0.0442299, 0.0032352656, -0.102198035, 0.06761656, 0.011764011, -0.0645917, 0.06597262, -0.033502825, -0.031038571, 0.006308268, -0.071147, -0.12576315, 0.08951175, 0.06541125, 0.03673414, -0.06450361, 0.13019854, -0.05677283, 0.019252926, -0.02603403, 0.04623231, 0.05609321, -0.046640866, 0.034573592, 0.0050632707, 0.008828516, -0.06476405, 0.00396512, 0.030554567, 0.05831746, -0.08893491, -0.0062583326, 0.028446581, -0.048082322, 0.08184964, -0.060207363, -0.022469142, -0.028077736, -0.016887842, 0.08089795, -0.0028784, 0.056682337, 0.050008826, -0.055252276, -0.02985663, -0.1332755, 0.03909298, -0.06790848, 0.059656806, 0.021487435, -0.008529761, 0.0133119775, -0.07977915, 0.06379974, -0.00070634397, -0.029023182, -0.17271768, -0.014650261, 0.008565773, 0.0009151399, -0.0037622815, 0.021855742, 0.026807133, 0.15138231},
   {0.05734449, 0.12343903, 0.036522925, -0.010628574, 0.18663639, -0.02876436, 0.15332408, 0.06764751, 0.034993373, -0.030075165, 0.053770028, 0.032071695, 0.04519827, 0.094247945, 0.077685975, -0.05965734, -0.054352567, -0.0027419478, 0.084379226, -0.053504556, 0.11156448, 0.069933236, 0.013927922, 0.034143038, 0.08464493, -0.0419652, 0.07828379, -0.10955168, 0.0720416, 0.009956075, 0.045633305, 0.059658863, 0.03619342, -0.08721883, -0.07880895, 0.109755, -0.049024783, -0.037206247, -0.07742149, 0.07911969, 0.02844104, 0.013428936, -0.12550671, 0.0074831317, -0.11275749, -0.03045939, -0.055834312, -0.085894555, 0.058540136, -0.013273925, -0.011737265, -0.059789818, -0.05278033, 0.08644407, -0.002584762, -0.020377347, 0.08100352, 0.025848452, 0.04424701, -0.037788697, 0.011309899, -0.027846437, -0.079231806, 0.052878723, 0.00021399558, 0.0024443693, -0.036068242, -0.013042628, -0.06924094, 0.11291696, -0.11001996, 0.08703826, -0.13106497, 0.031792782, 0.008309824, -0.067530945, -0.0613828, 0.056372434, 0.022124339, -0.025458654},
   {0.017834077, 0.11391273, 0.12976208, 0.018054077, 0.13304496, -0.031220159, 0.036906365, -0.056502733, -0.023655277, 0.04430234, -0.038945787, -0.019118866, 0.052271247, 0.008491129, 0.12875009, -0.07097776, -0.11735722, -0.061602414, -0.07973306, 0.086217806, 0.074491695, -0.056998193, 0.0033627227, 0.04902211, -0.057532188, 0.024981637, -0.085190885, -0.11161906, 0.025854997, 0.09315823, 0.0009008877, 0.022756178, 0.019070275, -0.035534393, 0.028594285, 0.0351577, 0.07227882, -0.053242203, 0.004139491, -0.109478414, -0.031621702, -0.01971826, -0.060297165, -0.03333253, 0.042152677, -0.041706923, 0.038969345, -0.039082497, -0.077456415, 0.05009961, 0.018542856, 0.03330281, 0.020378476, 0.050424557, -0.025393091, -0.041356947, -0.04631353, -0.07476305, 0.02896434, 0.0670999, -0.0001495555, -0.07594862, 0.07772995, -0.09612351, -0.08058484, 0.12347061, 0.051940665, 0.006885691, -0.027342215, 0.008621296, 0.033589143, 0.05513032, -0.10231641, -0.02346119, 0.05964619, 0.053988613, -0.037087027, -0.07224158, 0.022141447, 0.029750098},
   {0.020097706, 0.134979, 0.058645345, 0.0039079073, 0.1782249, 0.06314646, 0.119825736, -0.08340251, -0.09591332, -0.039237544, -0.018399319, 0.06214491, 0.118243024, 0.03528186, 0.09793068, -0.056029152, 0.028388988, -0.09017694, -0.027757121, -0.020487495, 0.011381112, 0.06097658, 0.021578588, -0.0016211927, 0.09920698, -0.13558652, -0.048104357, 0.07490944, 0.045864612, 0.003830984, 0.043752108, 0.046614245, -0.015434675, -0.047187023, 0.05535829, 0.02992527, -0.012061655, -0.015311594, 0.037005167, 0.0043260385, -0.037721574, 0.114548825, -0.04318283, -0.009950663, -0.07646855, -0.08042042, -0.08898407, -0.046437994, -0.09216581, 0.011965481, 0.019404478, 0.040107876, 0.045021407, -0.014231112, -0.09356988, 0.054194767, 0.07628099, -0.0041032312, 0.06771139, 0.048148874, 0.034058683, -0.13978699, 0.09565107, 0.066795945, 0.010214604, 0.14107406, 0.04038302, 0.05352639, 0.055988498, 0.10605148, -0.14362842, -0.07305301, -0.14695357, 0.07374797, -0.00846926, -0.059700582, 0.06544584, -0.010004686, -0.051503547, 0.08983413},
   {0.076240025, 0.107740715, 0.013832525, 0.15372197, 0.10787781, 0.039324578, 0.1150221, 0.012924263, 0.08672694, -0.0858572, 0.16887563, -0.04062383, -0.022499746, -0.07031301, 0.12709871, -0.07808275, -0.02911613, 0.00868389, 0.08118035, -0.053183936, 0.114075236, 0.11730974, 0.009224378, -0.09470388, 0.038159665, -0.08049105, 0.020538397, -0.0027107312, -0.014055767, -0.05082877, 0.039500266, -0.100669324, -0.049756672, -0.04738325, -0.09695209, 0.012782974, -0.0020601363, 0.14385563, -0.052419133, -0.09184505, 0.06352876, 0.09683476, -0.074331775, 0.070147164, -0.10014572, 0.006953098, -0.008000985, -0.060498733, 0.014065622, 0.041561536, 0.044782408, -0.073453136, -0.0073025418, -0.0079883635, -0.031283267, 0.007775858, 0.08943882, -0.08077002, 0.08685387, -0.08205932, 0.034020193, -0.24275017, 0.040720392, -0.05275296, -0.019645467, -0.0018955459, -0.03107787, -0.049625825, -0.06328453, 0.13425298, -0.0036370738, -0.0796411, -0.06443686, 0.07613528, -0.07829228, -0.064629704, -0.020297809, -0.058481872, 0.013670349, 0.09428533},
   {-0.021135759, 0.11273111, 0.11105424, 0.0076787057, 0.10009641, 0.018312, 0.08944364, 0.048476793, 0.048871785, -0.0007204564, 0.07720741, -0.098473944, 0.025844458, 0.009427451, 0.17917636, -0.1168128, -0.124199666, -0.03549969, 0.040367763, -0.022456141, 0.13208994, 0.12856871, 0.018450193, -0.09557363, -0.07909143, -0.005734574, 0.051409047, 0.07054392, 0.16040175, 0.039204508, 0.022845805, -0.008252459, -0.053921536, -0.015724644, 0.064988054, 0.06907998, -0.09126463, 0.12139982, -0.071300976, -0.021984711, -0.0049629696, 0.16926117, 0.10894798, 0.07650506, -0.16441192, 0.0062733814, -0.023549296, 0.056208484, -0.06282448, 0.08712446, 0.05501569, 0.019099649, -0.06290206, -0.013025613, -0.095506094, -0.070021614, -0.0075414693, 0.07025366, 0.08271388, 0.08054699, 0.020566724, -0.3944705, -0.030992778, 0.02310878, -0.01593101, 0.09309808, 0.0051531987, -0.036104985, 0.05799257, 0.12796165, 0.0075893407, 0.08196381, -0.0044531827, -0.09181632, -0.032273423, 0.0041782632, -0.009212038, -0.023992838, -0.08388013, 0.011514099},
   {-0.054611992, 0.16767748, 0.07874957, -0.017028237, 0.15826917, -0.17218162, 0.10931495, -0.070935346, -0.034065843, -0.0042154207, 0.14875506, -0.051463418, 0.059001997, 0.06862008, 0.076689616, -0.18368222, -0.1644677, 0.06351615, 0.05215426, -0.087780654, 0.016433708, -0.0065520373, -0.010762364, -0.082219616, -0.011395332, -0.04191317, 0.049988545, -0.008449546, 0.17031442, -0.004336551, 0.07497198, 0.06784709, -0.11564265, -0.063969985, -0.033707596, 0.083781265, -0.040300895, 0.09681195, -0.07886482, 0.017957315, -0.067485906, 0.116802596, 0.024381101, -0.014511774, -0.1206862, -0.033530433, 0.09452959, -0.053633425, -0.06752126, -0.011838548, 0.031431936, 0.062086683, 0.009848587, -0.0728933, 0.011186636, 0.06932384, -0.037780646, 0.042015083, -0.009348512, -0.08730426, -0.089462906, -0.42084882, 0.074745916, -0.04475613, -0.023429312, 0.08175614, -0.048317064, -0.032437406, -0.04038993, 0.11228408, -0.17718081, -0.015030001, -0.0025165812, 0.0030264447, -0.0281909, 0.07919539, 0.0373718, 0.016776137, -0.07412992, 0.037063003},
   {-0.016359791, 0.09045291, 0.15024824, -0.0636325, 0.09258809, -0.004341548, -0.050503913, -0.043299425, -0.043399055, -0.082725614, 0.039153572, -0.053846903, 0.08069753, 0.08987976, 0.019640261, -0.028460627, 0.014678301, 0.08574537, -0.030004336, -0.096924156, 0.07820927, -0.039848007, 0.005687587, -0.054720953, -0.01698562, -0.015275569, 0.026635502, -0.01988331, -0.06363663, 0.01847905, 0.05579849, 0.012310089, 0.048164554, 0.049620472, 0.039386597, 0.015294187, -0.06047801, -0.039197892, -0.03200243, -0.1403116, 0.05110417, -0.03834695, -0.020085631, -0.005434881, -0.14494619, 0.0805665, -0.035121184, 0.012157806, -0.08157945, -0.046296425, -0.07501625, 0.07327334, 0.03173278, 0.11491478, -0.08220636, 0.0010723729, 0.0536794, -0.0070825103, -0.036278907, 0.032142337, -0.09251553, -0.38006654, -0.055522103, 0.005792079, -0.042978313, -0.06117882, -0.07541382, 0.07532325, -0.02089534, 0.052832436, -0.173365, -0.04855468, 0.02623351, -0.014441768, -0.08938704, 0.045796283, -0.046474453, -0.028830102, 0.088649854, 0.24243705},
   {0.0067971065, 0.06270487, 0.1672252, 0.0019099307, 0.1396649, -0.079329774, -0.0009717211, -0.088924244, 0.055744063, 0.064745195, -0.096636295, -0.06887103, 0.14340037, -0.07503043, 0.056133796, 0.08338613, 0.08308499, 0.04438699, -0.06497411, -0.09396164, 0.06174692, -0.08748062, 0.06958429, -0.066456355, -0.046984583, -0.07742524, 0.015304863, -0.06036716, -0.07803103, 0.09149666, -0.03804152, 0.07161129, 0.04530671, -0.018361432, -0.018730171, 0.13393143, 0.089026004, 0.011018656, 0.06267572, -0.121615395, -0.0530801, -0.033052243, -0.060073413, -0.01503288, -0.14588505, 0.07282544, 0.07848183, -0.07207214, -0.09662325, 0.052329928, 0.062103726, 0.043564796, -0.093760036, 0.065388046, -0.04191238, 0.014391584, -0.0047679283, 0.01729034, -0.08540152, 0.08312094, 0.027580515, -0.39628074, -0.04291517, 0.103414565, 0.02759695, -0.0742826, 0.09209283, -0.012974786, -0.036240146, 0.027638825, -0.039686106, -0.015006553, -0.020487312, -0.06448037, -0.0005934221, -0.0026251152, 0.049370326, -0.0310944, -0.061096545, 0.2512611},
   {0.003284115, -0.07002709, 0.16611516, -0.07564191, 0.20968463, 0.02890352, -0.0007576447, 0.0096381875, -0.042174015, 0.044591587, -0.12275861, 0.046419498, 0.13687304, -0.0779241, -0.062897116, -0.017936641, 0.009513695, -0.042785205, -0.05345916, 0.06656386, 0.11681096, -0.11876241, 0.048895083, 0.06857927, 0.06716376, 0.042579588, 0.16773885, -0.16838892, 0.020491172, 0.1925665, 0.08514481, 0.012486867, 0.04738796, -0.0921087, 0.06985446, 0.109052055, 0.07656562, 0.029435618, -0.020613225, 0.03749949, 0.07143345, -0.15797901, -0.094846405, -0.008440455, -0.1789846, 0.08238345, -0.041843686, -0.0069317473, -0.0696687, 0.070027895, -0.03671519, 0.07058751, -0.019854432, 0.1531047, -0.05039749, -0.054873794, -0.0005553671, 0.021188684, -0.085200734, 0.017944057, 0.060116626, -0.39002585, -0.04592424, 0.018080926, -0.09216108, -0.2009407, -0.016981594, 0.031038078, 0.040091984, 0.14295234, -0.092448436, -0.067372285, 0.03903579, -0.0024145623, -0.012377528, 0.0412798, -0.08564409, -0.016070046, -0.045177616, 0.1995103},
   {-0.09860304, -0.1001763, 0.22327846, -0.23146401, 0.22934559, -0.011122153, -0.10287315, 0.00082730956, -0.037557527, 0.13226077, -0.2546917, 0.05994968, 0.22319834, -0.075062536, -0.10959337, 0.23383719, 0.17886333, 0.0365142, -0.1852613, 0.09156282, 0.034747113, -0.14385831, -0.027262911, 0.03221692, 0.1062068, 0.12893508, 0.11765072, -0.096508965, -0.14179595, 0.21314822, -0.019695027, 0.04568325, 0.025663478, 0.0038221874, -0.03228065, 0.16660123, -0.0030342054, 0.073279835, -0.047791224, 0.02424862, -0.0039929785, -0.16508223, -0.11782508, 0.0012000866, -0.047059305, -0.06771734, -0.029110454, 0.005411586, -0.015839979, -0.004057888, -0.022733934, -0.029087447, -0.089623846, 0.01728957, -0.03139357, 0.038045008, -0.016462319, -0.012650095, 0.013188332, 0.05493866, 0.032655336, -0.13170281, -0.25262308, 0.21696946, -0.009966068, -0.15914305, 0.099866465, -0.0019604613, -0.08723431, 0.005462434, 0.015829835, 0.07909581, 0.13557728, 0.07386944, -0.060719386, -0.067499295, 0.034881435, -0.21168081, -0.0016911285, 0.32818753},
   {0.04727478, -0.06593582, 0.20602062, -0.13554639, 0.11558723, -0.09973979, -0.09885147, -0.027855009, 0.023039116, 0.18206531, -0.15710582, -0.03153407, 0.16542087, 0.031020038, -0.18688801, 0.25490946, 0.22408141, 0.079205416, -0.101588964, -0.09507077, -0.0105209, 0.026629329, -0.0049766824, 0.054051314, 0.042477172, 0.20766956, 0.18937342, -0.07331769, -0.057047933, 0.2454577, -0.06380176, -0.10068936, 0.06577417, -0.00074820337, -0.053667124, 0.02954919, 0.028922947, 0.06590075, 0.040625483, 0.1628215, -0.07096356, -0.14104438, -0.037001256, -0.06692081, -0.025733396, -0.08069301, -0.067612275, 0.06630722, -0.033413716, -0.019681985, 0.046390288, 0.005995957, -0.07039023, 0.015558233, 0.029093793, 0.05525216, -0.009403738, -0.049949706, 0.090511, -0.09057682, 0.0028952882, -0.07966266, -0.26354465, 0.28997126, -0.067840315, -0.18884979, -0.0501439, -0.03593204, -0.050736804, -0.07868728, 0.08936388, -0.08275493, 0.40666464, -0.052524235, -0.043567557, 0.03640876, -0.017626034, -0.0324349, -0.022445109, 0.34907576},
   {0.074282676, -0.16862112, 0.05641065, -0.20060429, 0.06365819, 0.10849464, -0.11596823, 0.08241925, 0.028653752, 0.0105156265, -0.14598317, -0.08403051, 0.06749253, -0.07146277, -0.068070464, 0.16792183, 0.12470308, -0.0024894252, -0.059204742, 0.037194084, -0.08849806, -0.022406677, 0.03291724, -0.0021023855, 0.07026301, 0.21933576, 0.11404399, -0.012819762, -0.22439574, 0.18879627, 0.07773034, -0.08923904, 0.08771698, -0.030570697, 0.06815258, 0.05526201, -0.011168904, 0.003090006, 0.030682636, 0.08428616, -0.07208289, -0.18375006, 0.022228476, -0.04140422, 0.4976556, 0.0313896, -0.024588294, -0.015665721, 0.081120715, 0.047845207, 0.09313675, -0.053503104, -0.089756794, -0.00813901, -0.043152027, -0.013350268, 0.07982861, -0.056345847, -0.009348415, -0.095196076, 0.062225737, -0.014045214, -0.20432645, 0.26604623, 0.020303614, -0.22157285, 0.078542516, -0.0003731666, 0.009675823, -0.07754912, 0.09597516, 0.08491444, -0.0152872875, -0.06020468, 0.10689305, -0.017357454, 0.01250754, -0.0054001454, 0.024999307, 0.035596292},
   {-0.021258544, 0.015862515, 0.011495807, -0.24507375, 0.073536076, -0.104875304, -0.16780683, 0.056050297, -0.007500847, -0.012425899, -0.13482228, 0.044105176, 0.12131714, 0.06399048, 0.031540945, 0.09157054, 0.15808839, -0.08907763, -0.07511063, -0.07321083, 0.012748365, -0.09768635, -0.030528247, -0.07605328, -0.017704122, 0.10844933, 0.0577397, -0.0964473, -0.17790398, 0.121737935, -0.035963316, -0.08443864, -0.08692471, -0.0024892483, -0.004868439, 0.12445683, 0.042342737, -0.06480305, -0.043284457, 0.17124538, -0.12538253, -0.16625683, -0.12740892, -0.022063965, 0.3471476, -0.07301848, 0.07971751, -0.09026751, 0.019732825, 0.06539082, 0.024098657, 0.016524049, 0.0070053106, -0.039000638, -0.032061625, 0.023898197, 0.013611497, -0.013144206, -0.0614742, -0.06858898, 0.034481578, 0.0005369066, -0.08023112, 0.24730276, 0.034064792, -0.18571799, 0.025547272, -0.09272657, 0.041480668, 0.046157952, -0.036351312, -0.0065827454, -0.16496286, 0.0065758084, -0.0046583824, 0.087277494, 0.047536217, -0.041143604, -0.08600761, -0.026366822},
   {0.035264965, 0.13114883, 0.10400063, -0.00071391044, 0.05528901, -0.09590449, -0.12289143, -0.04726912, -0.062252365, -0.12794468, 0.02510567, -0.097771116, 0.0064885006, -0.027447194, 0.12225988, -0.047750723, -0.04101789, -0.084831394, -0.087242916, 0.06938455, 0.059195872, -0.030867796, 0.09273461, -0.050463505, -0.02259168, 0.06485577, 0.15131748, 0.0043440936, 0.046418365, 0.014906121, -0.04199212, -0.016844152, -0.109830946, -0.034216963, -0.016548777, 0.055251572, -0.070009835, 0.036294054, 0.04959231, 0.03713701, 0.0269764, -0.09296146, -0.03820035, -0.0039255586, -0.024288096, -0.068626165, -0.03988451, 0.016697584, -0.05576857, -0.08818875, -0.04912225, -0.011962186, -0.012157591, -0.08740677, -0.0634212, -0.08571915, 0.041366197, -4.4409317e-05, -0.027375959, 0.02863843, -0.0837903, -0.108846836, -0.06435602, 0.035084087, 0.045564122, 0.011872129, 0.047948487, -0.00668388, 0.05186691, 0.06806301, -0.07234338, -0.015014528, -0.10500216, -0.01933398, -0.08533449, 0.052749954, 0.062198192, -0.056023184, -0.004795139, -0.07402703},
   {0.031020753, -0.046678074, 0.069583386, -0.024546003, 0.109073535, -0.05187842, -0.03333128, -0.0683489, 0.058414504, -0.11529469, -0.030218894, 0.0077585443, 0.014098698, -0.02750627, 0.13203794, 0.016148614, -0.12621115, -0.054569673, 0.09959161, -0.0057045566, 0.052809313, -0.0014289692, -0.05163231, 0.008762146, 0.049378, -0.0035727108, -0.011237327, 0.003932506, 0.0989265, -0.000721388, -0.09120294, -0.07476083, -0.07259791, 0.0839879, 0.03372918, 0.13510948, -0.056636374, 0.026532127, -0.017767128, 0.0069545615, -0.088807434, 0.005405515, 0.07465625, -0.05306769, -0.050959613, -0.07157799, -0.08224746, -0.05596032, -0.08126209, -0.093519, -0.04908871, -0.027111009, -0.0056900564, -0.11161864, 0.016485557, -0.012780854, 0.032147385, -0.09057121, -0.05410046, -0.08300902, 0.038847156, -0.102864824, -0.015435571, 0.16156612, -0.06013942, -0.022466922, -0.0106272325, 0.006405497, 0.0041864514, 0.13216965, -0.05629824, 0.040347334, -0.059396114, 0.08548523, -0.07289064, -0.018848851, -0.026352491, -0.0014926528, 0.032703016, -0.10323826},
   {0.070770375, -0.0046247416, 0.12894304, 0.0029058922, -0.0644061, -0.04540521, -0.07592791, -0.074658476, -0.07680417, -0.08701068, 0.0854951, -0.0419801, 0.12559484, 0.04455132, 0.11846658, 0.0042634215, -0.06996175, 0.022121191, 0.008537334, -0.021110842, -0.0060307137, 0.12735622, -0.06696063, -0.08631491, -0.09976491, -0.1006764, 0.13525674, -0.0323642, 0.18730803, 0.039353915, -0.00016537815, 0.07447832, -0.118405625, -0.053858515, 0.034848537, 0.08360736, -0.08640893, 0.11992396, -0.058245968, -0.008880684, -0.1410014, 0.030607924, 0.1617963, 0.03583452, -0.12186995, 0.031089507, 0.07501755, -0.08202572, 0.0653093, -0.07996966, 0.005890496, -0.04494313, 0.0353049, -0.071333826, -0.08594884, -0.091027595, -0.031317923, -0.054121073, -0.011519581, 0.0066131474, -0.057358388, 0.044541113, 0.13191442, 0.16848505, 0.013714775, 0.061302137, 0.06658371, 0.021068387, 0.020707749, 0.015016759, -0.028152738, 0.09078805, 0.1108617, 0.047006194, -0.0397382, -0.07681143, -0.035869353, 0.003438352, 0.0007326066, -0.13038309},
   {-0.047846347, 0.0957255, 0.13398843, 0.19339956, -0.0056879763, -0.1720425, 0.013543294, 0.02698604, 0.014993924, -0.17653497, 0.21216662, -0.0905236, -0.04781652, 0.07627428, 0.1929981, -0.16115023, -0.15081194, 0.03523571, 0.16594495, -0.07344928, 0.12131119, 0.17407921, -0.044596627, -0.082559645, -0.005504023, -0.117650986, 0.019925984, -0.012174778, 0.22698613, -0.1554261, -0.060404792, -0.049506225, -0.099799916, 0.069891445, -0.045124527, -0.034818623, -0.02870876, -0.020402098, -0.051224098, 0.0047645723, -0.07243535, 0.08331639, 0.11345292, 0.043416157, -0.20046264, 0.09101277, -0.065003626, 0.070857026, -0.063212655, 0.00797002, -0.041558713, 0.06505581, 0.062228397, -0.04821645, 0.015212201, 0.017975826, -0.058729794, 0.0509292, -0.0030712932, -0.0973112, -0.001060091, -0.022318391, 0.1593563, -0.032991108, 0.09220972, 0.11561239, -0.1015676, -0.044615675, -0.04935747, 0.121473335, -0.055257283, 0.06710075, 0.08447161, -0.022687951, -0.018187022, -0.023699127, 0.06240108, -0.06386859, 0.020596229, -0.17798813},
   {0.034941062, 0.09618468, 0.07335759, 0.1751699, -0.09370838, -0.16316487, -0.040153556, -0.08743399, 0.037878565, -0.17868762, 0.1065422, 0.085612945, 0.09695959, -0.026663505, 0.29897964, -0.12129855, -0.104417026, -0.09067622, 0.083376825, 0.035380527, -0.029658131, 0.14820488, -0.016444683, -0.06772524, 0.025621885, 0.0029671688, 0.0070138425, 0.14784203, 0.27908275, -0.17126693, 0.073215164, 0.026932664, -0.18780546, -0.0710636, 0.088578574, -0.067933366, 0.08480196, 0.10371827, -0.091397524, -0.073789, 0.02938156, 0.06730493, 0.0999799, 0.038953163, -0.20544356, 0.06567975, -0.07510675, -0.08002992, -0.009804748, 0.07431149, -0.043192443, 0.056129165, -0.06156916, -0.18756554, 0.061757457, 0.0119973235, -0.06648269, -0.015896503, -0.08739802, -0.08869056, -0.09379531, -0.017099645, 0.0059977304, 0.11612168, -0.09212339, 0.15811992, 0.017561998, -0.028779611, -0.018644527, 0.04456941, -0.09280969, -0.09888667, 0.016904019, -0.041102365, 0.0045057368, -0.013388075, 0.07605795, 0.03761415, -0.06704868, -0.1728254},
   {-0.097689174, -0.0477747, 0.20288196, 0.14314476, -0.10185308, -0.009893669, -0.07103284, -0.070038915, 0.066377275, -0.21703534, 0.22901063, 0.033810653, 0.01462621, -0.023808211, 0.104097284, -0.015929315, -0.11609457, 0.09011646, 0.08118085, 0.040254734, -0.015444014, 0.22827156, 0.011184394, 0.0032263182, -0.012438152, -0.035817754, 0.0038150225, 0.16198345, 0.19739185, -0.09702655, -0.021880394, -0.10112645, -0.2001377, 0.041239906, 0.029793164, -0.07132795, -0.008552634, 0.13990456, 0.0822043, -0.07964142, -0.03889374, 0.10059752, 0.11858788, 0.08426466, -0.20391688, -0.07938409, 0.039293103, 0.040148105, -0.01751602, -0.031349704, -0.0102715865, 0.056444757, -0.085117616, -0.19474004, -0.026175886, -0.07074995, -0.043253377, 0.04813228, 0.05168111, -0.08870287, 0.027760848, -0.070032865, -0.02225088, 0.087286994, 0.058968045, 0.2033294, -0.09746705, 0.08941525, -0.05558156, 0.11062753, 0.02288238, 0.08303168, 0.20396514, -0.05999056, 0.014391878, 0.005893737, 0.023008613, 0.020953882, -0.06745876, -0.1487991},
   {0.04691907, -0.08803406, 0.19571747, 0.13616756, -0.013058954, 0.03234256, 0.01600611, -0.004967446, -0.100166574, -0.16584972, 0.104155324, 0.04388588, 0.065055124, -0.026849084, 0.16609676, -0.04039753, -0.21354015, -0.04205068, 0.080026485, 0.03450149, -0.07036949, 0.10343171, 0.045592643, -0.0040853415, 0.06549387, -0.09844209, -0.083348565, 0.11295641, 0.13328028, -0.16797616, -0.08984628, -0.038749523, -0.022270156, -2.0956191e-05, -0.06836078, 0.018354164, 0.00457846, 0.2082027, 0.07960463, -0.08065044, 0.006099182, 0.0064095063, 0.11741106, -0.021152733, -0.24439298, -0.05303424, -0.039505526, 0.036978006, -0.012684221, -0.0021612018, -0.008716129, -0.05053122, -0.028250666, -0.12583636, 0.051678352, -0.065052934, 0.048258785, -0.0056571616, 0.0037052706, 0.086419225, -0.029734097, 0.020186285, 0.08753543, 0.07582439, -0.018728942, 0.12253686, -0.015277757, -0.09892292, 0.04453712, 0.11156797, 0.035659745, 0.036835514, 0.040023353, -0.030661166, -0.1269939, -0.017982557, -0.04013395, 0.049982987, -0.026285166, -0.10106953},
   {-0.022767533, 0.0032978975, 0.06453663, 0.08928584, -0.10607964, 0.03709394, 0.08324467, -0.10080788, 0.03955445, -0.080984585, 0.16691357, -0.0679526, -0.001729141, -0.029342249, 0.020083034, -0.06772141, -0.092625745, -0.023481667, -0.036602493, -0.02123288, -0.03568972, 0.10637695, 0.047697954, -0.08432661, -0.029238835, -0.054520685, -0.08721257, -0.04105317, 0.12439533, -0.07093248, -0.04785891, 0.08669128, -0.050928447, -0.019581081, 0.04352896, -0.063531116, -0.05346175, 0.15572624, 0.08118861, 0.08549612, 0.11642607, 0.1445788, -0.03285562, -0.063796125, -0.1090313, -0.08562263, 0.06892314, -0.08067857, -0.091792434, -0.07408124, -0.002694726, -0.018211914, -0.076498784, -0.118523374, -0.016382612, 0.022578312, 0.07755711, 0.079324685, 0.07690408, 0.045527034, 0.06960311, -0.13299698, 0.117525846, 0.08997902, 0.061721273, 0.032001078, -0.030464143, 0.07191581, 0.08061708, 0.08465029, 0.036685966, 0.02895609, 0.12908503, 0.07589254, -0.08956199, -0.023421153, -0.03156291, 0.10422294, 0.013597279, 0.057179432},
   {0.019342314, -0.058753133, 0.07886293, 0.12397336, -0.05213036, 0.016265778, 0.13131903, -0.0028710978, 0.06593931, -0.04282605, 0.045265302, -0.06772179, -0.032821342, 0.051218487, 0.116448425, -0.013264151, 0.043670382, 0.061801217, 0.059085686, 0.015548447, 0.0038518363, 0.10952221, -0.08426569, 0.06585405, 0.12162595, 0.027746974, 0.06315638, 0.036233686, 0.022181937, -0.05413071, -0.047639687, -0.061686225, -0.06421057, 0.016855324, 0.089556776, -0.07807309, 0.0052652173, 0.13889864, 0.07374364, -0.0714337, 0.0444966, -0.028325396, -0.08529291, 0.007469746, -0.021948062, -0.09413428, -0.01763317, 0.05144332, -0.085077785, 0.008265125, 0.07832465, 0.0019280779, -0.027472224, -0.0825146, 0.06278839, 0.025634468, 0.044428293, 0.0794981, 0.08219399, -0.06702214, 0.008857049, 0.0022918982, -0.017503303, -0.022714192, 0.014300495, -0.021089839, 0.07603408, -0.07416728, -0.0683344, -0.0019107352, -0.024338206, 0.040156666, -0.05929969, 0.052674584, 0.013110293, -0.019196555, -0.021031192, -0.008650478, 0.055052344, 0.02171236},
   {-0.041501515, -0.079259284, 0.026901042, 0.091139965, -0.025951985, 0.010985117, -0.018535413, -0.03230765, -0.046372827, 0.05335378, -0.08870987, -0.053742927, 0.011392183, -0.035503656, 0.103761084, -0.11387719, -0.09285244, -0.0157727, 0.036830425, 0.07060677, 0.10653769, 0.03136789, 0.009618819, -0.037837982, 0.065341696, -0.09351083, -0.06415729, 0.031563584, 0.030294707, 0.12156446, 0.007397323, -0.08715887, 0.001152545, -0.01530125, -0.075258315, -0.08713817, -0.077918805, 0.150477, 0.04199411, 0.029748397, 0.07878497, -0.014706826, -0.07532025, 0.08679256, 0.048057962, -0.038146373, -0.040727597, 0.014084453, -0.043971483, 0.056204475, 0.079839654, -0.028458124, -0.0048626666, 0.04025833, -0.0341593, 0.0590237, -0.028725479, -0.05013049, 0.0946256, 0.05291317, 0.09087562, -0.10765069, -0.079651326, 0.052410856, -0.087818824, -0.04913087, 0.044799015, -0.052871704, -0.0013182014, 0.09386788, -0.10619445, 0.038105745, 0.088839225, 0.06331076, -0.035673123, 0.086318515, -0.04782558, 0.084160246, -0.081755176, 0.049918868},
   {0.088939615, -0.06395797, 0.08375377, 0.053520687, 0.012343034, 0.039756197, 0.005767021, -0.0460653, -0.03032423, 0.09116498, -0.06771899, -0.047391403, -0.018954854, -0.08675178, 0.00028814515, -0.027372224, 0.098071106, -0.058575444, -0.10769484, 0.019082878, 0.026168048, 0.106231764, -0.061459083, 0.024357738, 0.17630735, -0.07625763, -0.10178071, 0.054668687, 0.068000905, 0.04986874, -0.06760118, -0.099730544, 0.056183435, 0.077503264, -0.08599381, -0.020981869, 0.032138973, 0.07470295, 0.024989985, 0.112210386, -0.006194387, -0.0019486598, -0.13882898, 0.05839672, 0.019971838, 0.055615716, -0.062881306, -0.023829274, -0.098348334, -0.08712357, 0.029188156, 0.058958918, 0.027939428, -0.044524435, -0.045550074, -0.08517822, -0.01438036, 0.039024018, -0.005309336, 0.034982197, -0.05092553, -0.09055711, 0.00022825076, -0.0048731985, 0.023678236, 0.10997846, -0.08351601, -0.10142616, 0.061570965, -0.009491933, 0.08847606, 0.08919116, -0.027315026, 0.05873146, 0.065927915, 0.00023943931, 0.07329466, 0.040109247, -0.09360273, 0.12124089},
   {-0.015279612, -0.05307321, 0.03862106, -0.081247665, -0.06692045, 0.068966225, 0.074958354, 0.04804236, -0.09402804, -0.01792692, -0.044705544, -0.08537738, 0.044599183, -0.021651842, -0.077668935, 0.07715836, -0.076720975, -0.071209036, -0.06828318, 0.08574528, -0.14455548, -0.049773384, -0.059796873, 0.06470277, 0.20455533, 0.060797054, 0.0001173301, -0.02440791, -0.0014857423, 0.12374562, -0.0048329607, 0.010120364, -0.07251774, 0.032286953, -0.026821412, -0.103034966, 0.05980384, 0.12153207, 0.015854415, 0.054108083, 0.020829985, 0.05512139, -0.120413594, -0.08989535, 0.0049120304, -0.012469739, -0.07545026, -0.010992842, -0.033328973, -0.045421936, 0.044552483, 0.072343536, -0.020224849, -0.068726294, -0.005995983, 0.022575043, -0.060127866, 0.037951604, 0.02001609, 0.036298174, 0.010826364, 0.12405237, -0.05111059, 0.11772555, 0.008767113, -0.052799575, -0.055214997, 0.055772725, -0.0027775243, -0.010209251, 0.1440509, 0.07006416, 0.040999737, 0.05671533, 0.08119935, -0.025480993, -0.005907859, 0.09832, 0.073185, 0.0026012717},
   {-0.035936937, -0.18329622, 0.09308014, -0.047516495, -0.11358534, 0.117420256, -0.04484886, 0.08799775, 0.00091376994, -0.10054205, 0.030870171, 0.016714249, -0.06722455, -0.085490584, 0.007388433, 0.008478966, 0.0045074355, -0.042697717, -0.15418287, -0.08121106, -0.19181035, 0.026435873, -0.037944537, 0.010309336, 0.08542982, 0.050786547, -0.116653316, 0.07508733, 0.07537075, 0.027136689, 0.033729527, -0.049560428, -0.05088197, 0.08482485, -0.06395917, -0.17991789, 0.03756896, 0.22098206, -0.029189916, 0.14755613, 0.19498779, 0.015135968, -0.106896885, 0.08495211, 0.024384826, -0.051945195, 0.0060874373, 0.075597316, -0.0969617, 0.038469616, 0.087252505, 0.014183667, -0.057059377, -0.06351516, 0.029612524, -0.06873743, 0.0039585168, 0.0029913948, -0.006057702, -0.03313205, -0.088797465, 0.045197222, 0.017276978, 0.21256803, 0.06984601, 0.058786057, -0.034426488, 0.019314092, -0.07383011, -0.07977593, 0.036121186, -0.097203344, 0.0770231, 0.018692974, -0.06054072, 0.061528467, -0.031095397, 0.20597392, 0.06880738, 0.14592515},
   {-0.00028333196, -0.27327615, 0.100068785, -0.020943394, -0.09273235, 0.14479698, 0.07773926, 0.042744048, -0.02104745, -0.10640228, 0.024976984, 0.07316165, -0.12515847, 0.06570364, -0.06825483, -0.011094021, 0.030984543, -0.07579912, -0.039602194, -0.061112233, -0.08739829, 0.1883362, 0.08714532, -0.07745692, 0.22054431, 0.1400495, -0.07949561, 0.16764298, 0.001599672, -0.024858128, -0.010333815, -0.012814541, -0.118262075, 0.07231785, -0.10103044, -0.17070858, -0.084779575, 0.26744393, -0.0792233, 0.13971412, 0.19096574, -0.09530433, -0.04250064, 0.06104218, 0.04586314, -0.056107383, 0.08018125, -0.013766462, 0.08287435, -0.049778942, 0.04632493, 0.07356595, 0.039845653, -0.08666749, 0.081775635, -0.02616103, 0.08293919, 0.08838505, 0.038960062, 0.040764187, -0.039660577, 0.051877134, -0.14881516, 0.07403532, 0.0273263, 0.031388316, -0.03361987, 0.039657462, 0.075532086, -0.25264645, 0.20461272, -0.010739325, 0.07019986, 0.08644702, 0.034135822, -0.08952604, 0.06321345, 0.1708859, -0.047830466, 0.12456857},
   {0.00876911, -0.13163093, 0.092790484, 0.005988041, -0.043007996, 0.12647256, 0.013214275, 0.024865765, -0.013661559, -0.017306134, 0.032542888, -0.07355194, -0.019170774, 0.046655588, -0.03550866, 0.017083954, -0.10041498, 0.055203892, -0.06413881, -0.002755412, -0.117911406, 0.17141019, 0.03372539, 0.058380596, 0.23258881, 0.07297659, -0.22058842, 0.18593359, 0.019655129, -0.07390254, 0.060977127, 0.027811186, -0.071608506, 0.027958123, -0.01276337, -0.10839084, -0.032559305, 0.12120093, -0.042167164, 0.13550217, 0.17812797, -0.08457453, -0.10391193, 0.0137569755, 0.008019429, -0.06721902, 0.03361436, -0.04789771, -0.09906852, 0.040082715, -0.061446793, 0.07418231, 0.014685126, -0.06074983, 0.025437027, 0.05601176, -0.04475659, -0.07557687, 0.016808756, 0.017978676, 0.010307401, 0.20456374, -0.021362681, 0.11869024, -0.052343924, 0.066270046, 0.06280897, -0.045153316, 0.043975078, -0.14663121, 0.24122125, -0.09593224, 0.06579268, -0.09276096, 0.010232766, -0.057670496, -0.07614637, 0.16779886, 0.048486926, 0.050884683},
   {-0.07634949, -0.16527866, 0.005121616, -0.063442476, 0.037741985, 0.16285264, -0.067230776, 0.07709205, 0.034218274, -0.11165472, -0.03184438, 0.020621385, -0.15150474, 0.077930324, 0.08807226, 0.1298178, -0.08350455, 0.0394096, -0.026125632, 0.026954493, -0.039990485, 0.17174828, -0.017048791, -0.082955845, 0.09113483, -0.049574267, -0.078331396, 0.06709112, 0.09801702, 0.022895722, 0.047590427, -0.03690887, 0.009871463, 0.016960913, 0.031695485, -0.03747206, -0.025140699, 0.23584628, -0.0916752, 0.15634182, 0.16195509, -0.07838817, -0.07544745, -0.068973675, 0.06621007, 0.075221874, -0.012800999, -0.060048733, 0.062422357, 0.045103904, -0.09133074, -0.055600353, 0.007080096, -0.06510179, -0.08801368, 0.026002929, -0.08076824, -0.06741365, -0.05871289, -0.057493743, -0.0060254857, 0.067513816, -0.033130445, 0.1620109, 0.009502783, 0.035092656, 0.01482828, -0.008461648, 0.061622046, -0.14574917, 0.09739011, -0.077511996, 0.032698467, 0.07091266, -0.04084753, 0.0036839768, 0.024294134, 0.16476317, 0.0077266498, 0.09533446},
   {0.042523194, -0.03634175, 0.03313788, 0.036566008, 0.00033184764, 0.035619967, 0.13337436, 0.054905843, 0.06845516, -0.037209213, -0.006429134, -0.001791951, -0.08055259, -0.02579552, -0.05296272, 0.11236693, 0.073728584, -0.038255364, -0.021514103, -0.00231622, -0.13504007, 0.0024672993, -0.0445422, -0.02992693, 0.1631962, 0.05140236, -0.06779873, 0.024996128, 0.074506015, 0.035361428, -0.054799348, 0.028564401, 0.02134, -0.011454395, 0.063068785, 0.024063015, -0.029224569, 0.11000655, -0.09406552, 0.17838286, 0.047942095, -0.017221492, 0.0071066995, 0.001961465, 0.07060543, -0.03574843, -0.03480586, 0.0761975, -0.020912906, 0.00581789, 0.0888127, -0.08565175, 0.040935576, 0.02739851, -0.045683123, -0.036743995, -0.0044483785, 0.010036304, 0.08267952, 0.024984596, -0.03220594, 0.104494005, -0.029809628, 0.16100885, -0.0667471, -0.00527303, -0.020157391, 0.03412371, 0.06253251, -0.03937393, 0.101081066, -0.015444067, -0.029031422, -0.095845096, 0.03216461, 0.014572136, -0.015542089, 0.1797648, -0.098186605, 0.03949808},
   {0.0048055784, -0.045261707, 0.04866188, -0.034433037, -0.03666575, 0.033749055, 0.051726114, 0.052938297, -0.01227803, 0.10913679, -0.098325394, 0.0092910435, -0.09908329, -0.03245858, -0.07800059, 0.0007741902, -0.04036593, 0.044309534, -0.04132865, -0.013878679, -0.083484106, 0.023250276, -0.094201356, -0.0014309074, 0.16896592, -0.10606606, 0.007091534, 0.058892928, -0.09313822, 0.011549778, 0.00042276215, -0.025526026, 0.03681312, -0.100197785, -0.05018243, 0.032537073, -0.073940314, 0.037098534, 0.014082112, -0.00624431, 0.092148446, 0.108433746, -0.05566087, 0.06986032, -0.007082357, 0.042327188, -0.036669474, -0.019771831, 0.033585172, -0.051921777, 0.017782703, -0.0051744324, -0.06259769, 0.02210587, -0.08353037, -0.09573657, -0.012651215, 0.032850344, 0.0618385, 0.06164145, -0.07557197, 0.14723961, -0.03477601, 0.06807471, 0.033782043, 0.011047822, -0.05757486, -0.01905462, 0.07440264, -0.06722024, 0.021355689, -0.030468678, -0.07640678, -0.09813597, 0.039832376, -0.038126446, 0.009709478, -0.026420629, -0.09918098, 0.015846672},
   {-0.030723419, 0.025478493, -0.028265176, -0.06271057, 0.11294182, 0.100980796, 0.09576279, -0.0790157, -0.07003155, 0.10790192, -0.08831499, -0.01247314, 0.052102197, -0.0069012195, -0.03779466, 0.049131688, 0.07157318, -0.05800132, -0.063527934, -0.055546228, -0.05323275, -0.043256745, -0.046422552, -0.0192535, -0.0054994416, -0.01962145, -0.1094602, -0.05130014, 0.10106496, -0.025680337, 0.023482414, -0.0831877, -0.0414389, -0.05684185, 0.07014823, 0.038799744, 0.055636067, -0.0022355686, 0.009322879, -0.07361632, 0.11639313, 0.071819365, 0.027514363, 0.062725954, -0.0715969, -0.08752491, 0.07120379, 0.007705009, -0.031028196, -0.06025558, 0.01689139, 0.00879838, 0.07483141, -0.040506706, -0.052891064, 0.047688007, 0.07758896, -0.09931615, -0.018386826, -0.07858424, -0.010240525, 0.088465706, -0.069100425, -0.025851464, -0.05794188, 0.025981996, -0.025789596, -0.0058678957, 0.077939995, -0.031177737, -0.030615063, 0.076477185, -0.117168345, 0.027876383, 0.06682029, 0.028863348, -0.01569403, 0.025389655, -0.035822522, 0.097406946},
   {0.04498052, 0.008141806, 0.09326935, -0.0022963323, 0.15140398, -0.06127649, 0.052444726, 0.06265118, 0.053358946, -0.009377938, 0.005020812, -0.04711336, -0.06919133, 0.033349983, 0.1352311, -0.03982167, -0.020633807, 0.054312818, -0.06115893, 0.085351944, -0.05478382, 0.10080998, 0.09429263, 0.06556939, -0.028436814, -0.13214839, -0.028157458, -0.06499981, -0.041636705, -0.040698703, -0.09954609, -0.026129795, -0.08077655, 0.0055904165, -0.035338603, 0.0780163, -0.0711065, 0.0008951353, -0.026096744, 0.08674902, 0.092729956, 0.0056098984, -0.10534186, 0.03861723, -0.015416852, 0.05985654, -0.094985664, -0.06328511, -0.08878717, -0.09828538, 0.0151216015, -0.013404132, -0.058947973, 0.024539731, 0.045260374, 0.051345453, -0.06537043, -0.09699429, 0.08660556, -0.08857808, 0.027864233, -0.06686573, 0.079245426, 0.021255456, 0.016728587, -0.0140476525, -0.05023759, 0.013957197, 0.0320834, 0.057462838, -0.0017036761, -0.017072273, -0.10834658, -0.05767062, 0.017880008, -0.059647318, -0.036515664, 0.09543585, 0.030566627, 0.14215806},
   {0.044111907, -0.07245035, 0.17166701, -0.015301656, -0.053488456, -0.09073732, 0.031388815, -0.024566872, -0.08664657, 0.04879833, 0.03253851, -0.017433671, 0.007702174, -0.029109284, 0.11516317, -0.0015775323, -0.14892237, 0.0060015917, -0.0024162817, 0.08590357, 0.07723996, 0.12345821, -0.045781508, -0.03985314, -0.052430592, -0.08029406, -0.08949826, 0.10508989, 0.013615728, -0.034731206, -0.046440303, 0.08760168, -0.03077167, -0.05554565, -0.07406967, -0.052715033, -0.092571445, 0.09588837, -0.005719454, -0.054481395, 0.11468437, 0.14025955, 0.044770326, 0.05210531, 0.047480583, -0.0574695, 0.0031246766, -0.08042207, 0.015445697, -0.00785032, -0.0016079172, -0.043414194, 0.08972213, 0.041675556, -0.01230083, 0.056668658, -0.037293077, -0.009912675, -0.06221696, -0.045860678, 0.08035142, -0.2527125, 0.06397322, 0.0008884011, -0.028124467, 0.06345009, -0.060578372, -0.09435156, 0.07204028, -0.049882486, -0.10416099, -0.030730398, -0.04869736, 0.06950239, -0.051658135, -0.07597245, 0.04984519, 0.042073913, 0.0072439597, -0.015731916},
   {-0.02693904, 0.07425547, 0.063944966, 0.08639771, 0.05485355, -0.12746273, 0.0535371, -0.0737298, -0.09523963, -0.044017468, 0.16373305, 0.031958852, 0.072191484, 0.077881195, 0.104591474, 0.014892391, -0.19907549, 0.0050494894, 0.1205706, -0.002053375, 0.085319415, 0.08917718, -0.07771949, -0.06142633, 0.120804444, 0.05486479, 0.03595479, 0.12664899, 0.114099845, 0.032652102, 0.0129066855, 0.051595926, -0.124556005, -0.09971967, -0.003949653, -0.09636022, 0.04833478, 0.1818095, 0.034093175, 0.00021871486, -0.023459803, 0.04735197, 0.112240635, 0.065366805, 0.055894356, -0.047106117, 0.0752021, -0.04212961, -0.002242695, -0.04529722, 0.058804296, 0.07116282, 0.07497058, -0.04766821, -0.051104706, -0.0014162477, 0.057075106, 0.050563905, 0.08776101, -0.017914476, 0.008806996, -0.235783, -0.0009394388, -0.0666178, -0.04233891, 0.041591544, -0.027238695, 0.08756079, 0.008792587, 0.10416413, 0.08762386, 0.07332348, -0.059650563, -0.07918317, -0.015773041, 0.04853379, -0.081259236, -0.029336942, -0.076862015, 0.12056662},
   {0.040888924, -0.03748667, 0.12827313, 0.07044346, 0.06964263, -0.0037665055, 0.048028264, 0.08201579, 0.07111318, -0.0928495, 0.11577586, -0.09870285, -0.036313362, 0.041133516, 0.07541568, -0.12336223, -0.17525493, -0.08263912, 0.047609072, -0.092976466, -0.054783802, 0.19396602, -0.09011085, 0.067842476, -0.04288186, 0.0072446344, -0.08555944, 0.10139124, 0.14233631, -0.02455412, -0.019185307, -0.0268435, -0.13444541, -0.039460454, 0.053912245, -0.082272194, -0.081107244, 0.15087181, -0.08843849, 0.08068688, -0.08128724, 0.1683477, 0.0072428295, -0.032705434, -0.07334488, -0.013117969, 0.0011563078, 0.08012027, 0.029117005, -0.021994349, 0.026336737, 0.01648389, 0.05957353, -0.15745218, -0.077241756, -0.06653261, 0.088252455, 0.064971685, 0.052617975, -0.07285954, -0.023337014, -0.3774422, -0.03364273, 0.005731286, 0.022124656, 0.05972982, -0.022076922, 0.0021038705, -0.014303461, -0.057331324, 0.021323338, 0.04814202, 0.0228356, -0.09277764, -0.0638261, 0.038708515, -0.09262517, -0.031039344, -0.016745197, -0.005734068},
   {0.089537635, -0.037831265, 0.16397263, 0.14452715, 0.02979623, -0.18628417, -0.03384036, 0.0071484833, -0.047403645, -0.076033995, 0.2254001, -0.019301271, 0.019171596, 0.022845775, 0.21015213, -0.026719699, -0.15985852, 0.009071857, 0.008913091, -0.07711596, -0.033512305, 0.22746529, 0.08459709, -0.10169553, -0.02944924, 0.024416337, -0.028689913, 0.1664973, 0.21148351, -0.07432222, -0.051342998, -0.044536497, -0.060182802, 0.024480473, 0.024653293, 0.026446331, -0.021193491, 0.21031077, 0.02868377, -0.014409586, 0.03404467, 0.02968558, 0.1266303, -0.078108884, -0.0028942623, -0.03926691, 0.07614923, 0.00030947526, -0.0028486806, -0.055413716, 0.024768107, -0.08872408, -0.098614216, -0.08835833, 0.014535618, -0.061572343, 0.0020571565, 0.036769055, -0.07847184, -0.053987604, 0.018858455, -0.36845443, 0.109478556, 0.00830899, 0.083322935, 0.09446809, -0.0649929, 0.07347267, 0.012324497, -0.00033368205, -0.05604253, -0.06272394, 0.028828606, -0.018131202, -0.1740326, 0.03226865, -0.053530086, 0.087147884, -0.081901506, 0.001586226},
   {0.0868557, 0.116961226, 0.10811211, 0.005075786, 0.019590165, -0.039588325, -0.0395866, 0.06701196, -0.014550384, -0.1409034, 0.20283096, 0.066333674, 0.08355996, 0.07078225, 0.13265096, -0.06551777, -0.1305524, -0.041101042, 0.0071943337, 0.002840073, 0.072856665, 0.07570166, 0.09121043, 0.0003367839, -0.11255667, -0.0072487034, -0.002608163, 0.115782484, 0.08859008, -0.038552012, -0.09746958, 0.07663908, -0.18606772, 0.00916114, -0.0028518902, -0.04835081, 0.043750953, 0.1763172, -0.017118035, -0.04962225, -0.09298032, 0.07030557, 0.055705342, -0.05687233, 0.027103022, 0.016102321, -0.082243145, 0.010761485, -0.09002184, -0.06818924, -0.06626003, 0.044894725, -0.026101569, -0.07765708, -0.08802874, -0.025659561, -0.0746763, 0.043056656, -0.036984455, 0.08025661, 0.0026172027, -0.4277346, 0.10263951, -0.014208545, -0.07687893, 0.20428927, -0.01871519, 0.056755047, -0.01498206, 0.02988844, -0.022714818, 0.010170219, 0.0024089003, -0.013179759, -0.15788642, -0.074563324, -0.08378739, 0.010365417, 0.07721315, 0.039178256},
   {-0.080950156, 0.06572632, 0.1268487, -0.014479837, 0.10324913, -0.13228077, -0.015801063, 0.04753117, -0.018536111, -0.18529035, 0.11459564, -0.07255591, 0.16407716, 0.017719246, 0.1700743, 0.032391384, -0.07970501, 0.07167337, 0.008807495, -0.04500756, 0.09661863, 0.08607288, -0.07449437, 0.020619385, 0.06045604, 0.0796757, -0.030640494, -0.046669766, 0.12925903, 0.057597417, -0.06314664, -0.09636719, -0.053741634, -0.03837421, -0.053664856, 0.011606091, 0.008227366, 0.15210848, -0.018691964, 0.015989484, -0.050526943, 0.020880718, 0.076658145, 0.009008276, -0.03825759, -0.040450215, 0.005177498, 0.02351229, 0.0766125, 0.022426367, 0.0799379, -0.015437313, -0.05388462, -0.049534783, 0.055900164, -0.06028905, -0.033188082, -0.033050757, -0.066943035, 0.04851429, -0.04751625, -0.47162622, -0.0033296158, -0.0044300547, -0.06594533, 0.12431287, -0.0005885917, -0.057793576, 0.09161141, 0.08973135, 0.0042862887, 0.045602936, 0.05716514, -0.062749475, -0.11909468, -0.019791126, -0.07967175, -0.06100396, -0.04449159, 0.13445555},
   {0.038467053, 0.117636435, 0.16923572, 0.062443532, 0.15432501, -0.13697697, -0.17222525, -0.038942482, -0.04518504, -0.00774704, 0.04433618, -0.08292379, 0.17524053, 0.07815743, 0.059228733, 0.023292162, -0.097138114, -0.027176559, -0.025351545, 0.028941562, 0.133879, 0.03914426, -0.055439778, 0.05686314, 0.082449555, -0.028531075, 0.11782881, 0.0807323, 0.047597926, 0.08703809, 0.03307501, 0.042856283, -0.16908294, 0.053121727, -0.056536954, 0.071115434, 0.07958184, 0.16340731, -0.06420117, -0.010242605, 0.020786773, 0.006523758, 0.10397393, 0.017098283, -0.11391691, 0.017749779, -0.08882168, -0.07694511, -0.05717359, 0.086857095, -0.035033807, -0.08008803, 0.044541042, -0.018172374, 0.05424391, 0.041781586, -0.027135007, -0.09799333, 0.0634867, 0.073690124, -0.08600991, -0.5098138, -0.044391923, 0.0013929915, 0.07276309, 0.096490555, 0.07745074, 0.08487969, -0.017513141, -0.0065011205, -0.13617343, 0.030890923, 0.069953896, -0.037073076, -0.15662546, -0.04444974, 0.02050141, -0.120739274, -0.08707198, 0.2601395},
   {0.0791441, 0.058382027, 0.13586569, -0.036200643, 0.050425705, -0.049730472, -0.100898005, 0.043380152, -0.044428393, -0.1418385, 0.07828161, 0.035032652, 0.05393036, 0.0030467361, 0.04335317, 0.052783735, 0.034855586, -0.03348036, -0.014643605, 0.0022209764, 0.088571586, -0.01631161, -0.020423912, -0.05189409, 0.09584051, -0.0022471396, 0.016440233, -0.10804114, 0.1279545, 0.111517675, -0.009761707, -0.00040256503, -0.026013475, -0.033118553, 0.012462878, 0.14182192, -0.036764666, 0.10529815, 0.055880252, 0.056395203, -0.08334609, 0.02894856, 0.006875362, -0.08501469, -0.020642616, 0.03186824, -0.044716198, 0.016071137, 0.038433548, 0.079781055, -0.043924645, 0.019705713, -0.089793615, -0.06891167, -0.054224107, 0.06722664, -0.015742516, 0.05477498, -0.062518895, -0.013655204, 0.02590923, -0.5898901, -0.024000384, 0.051476754, -0.048418503, 0.03393013, -0.0044948272, 0.08410235, -0.083696514, 0.02981243, -0.07700445, 0.07452715, 0.19820476, -0.06112642, -0.05190637, -0.0010999888, -0.03726755, -0.018892955, -0.048990875, 0.18138778},
   {0.0888982, 0.020872854, 0.013348164, -0.08889616, 0.08414958, 0.015477911, -0.036902826, 0.056689125, 0.043425776, 0.1307058, -0.099946, 0.07009513, 0.1050605, -0.015366562, -0.068269454, 0.12804632, 0.12547286, 0.03132931, -0.2020051, 0.06671668, -0.041729677, -0.052125063, 0.004574485, -0.04363678, 0.051432006, 0.2056759, 0.06258227, -0.051478412, -0.06322795, 0.16068353, -0.03553268, -0.007503193, -0.012070115, -0.04763748, -0.078821115, 0.014887777, 0.0068257377, -0.059534747, -0.09482816, 0.054366764, -0.08472571, -0.1778549, -0.106393605, -0.026527464, 0.00967757, -0.040371004, 0.021076038, -0.014887928, 0.034618665, -0.040294573, 0.06725968, 0.02628167, -0.028891942, -0.0649575, 0.05015477, 0.016722886, -0.057828642, -0.059973788, 0.08890445, 0.08436187, 0.022862151, -0.3862768, -0.081392296, 0.15536064, 0.08354505, -0.2480982, -0.035605162, 0.08290927, 0.059832446, 0.032348778, -0.04434379, 0.004542657, 0.36204854, 0.0027732786, 0.06930222, 0.06653983, -0.043065198, -0.1811379, -0.06623489, 0.27047098},
   {0.044633366, -0.18519937, 0.108873524, -0.16938774, 0.05185318, -0.009984935, -0.10666481, -0.090706855, -0.070943385, 0.10246037, -0.2469478, -0.055324942, 0.077100374, -0.08612239, -0.12127092, 0.27820966, 0.18274726, 0.032424696, -0.17462969, -0.00874947, -0.018534865, -0.14511201, 0.012952954, 0.08499531, 0.17075886, 0.16405375, -0.0019312641, 0.060330942, -0.08409306, 0.15532322, 0.014643434, -0.05449022, 0.06469149, 0.018625895, -0.09459169, -0.07182431, -0.09522137, -0.011041317, -0.06834645, 0.16160417, -0.11397423, -0.29078752, -0.10118131, 0.009838929, -0.11471186, 0.045253955, 0.0731053, -0.042337604, -0.0017881471, -0.079193465, 0.014259912, -0.06977872, -0.06493382, -0.08743546, 0.08125827, 0.087093204, -0.050491434, 0.018622845, 0.07529659, -0.07283, -0.06935119, -0.2585292, -0.21248206, 0.20108593, -0.07052127, -0.2721926, -0.029763862, 0.00047975627, -0.043259524, -0.020004837, 0.057400353, 0.052324545, 0.36391217, 0.015255443, 0.095775336, 0.0066265985, 0.056914587, -0.11482391, 0.033786345, 0.1828389},
   {0.07829835, -0.13379985, -0.21383056, -0.060481213, -0.1620404, 0.07615146, -0.019509628, -0.03405498, -0.0695921, -0.04840099, -0.048521306, 0.053204104, -0.12228032, 0.06449848, -0.07599015, 0.17234233, 0.040372618, 0.057303615, 0.016260406, -0.09013865, -0.120694436, 0.05404975, -0.021648698, -0.07106125, 0.024320979, 0.02951279, -0.086711444, 0.18845469, -0.042727344, -0.0091583645, -0.0944901, 0.02981002, 0.049999215, 0.037295144, -0.04463284, -0.08571246, 0.08218656, 0.052026052, 0.080933034, -0.028093578, 0.12032573, 0.03409456, 0.05790088, -0.031484704, 0.15990585, -0.016180709, -0.03087148, 0.04933262, -0.040144056, -0.082915366, -0.01683493, 0.031300727, -0.078728706, 0.037349924, -0.0060278075, 0.02470221, -0.010809278, -0.07512863, -0.015946858, -0.08625935, 0.09121912, -0.06019084, -0.03885102, 0.15704621, 0.062038697, 0.04534396, 0.039444376, 0.02307524, 0.008382276, -0.11932066, 0.2746825, -0.07076416, 0.07631369, 0.079090334, 0.22778165, -0.079018325, -0.07101471, 0.05759483, 0.026202299, -0.040212728},
   {-0.00021287399, 0.018482665, -0.015606421, -0.0107732145, 0.056510963, -0.004439707, -0.096325345, -0.043127358, 0.03776752, -0.09878357, -0.030188134, -0.04347658, 0.048536345, 0.016963124, -0.09180496, 0.07991436, -0.0058527375, 0.0637302, -0.09537559, 0.037104763, -0.038504697, -0.0024371254, 0.09507156, -0.011558186, -0.03780226, 0.020724464, -0.06381907, 0.10761108, -0.10513033, -0.06239591, 0.05318932, 0.021494616, -0.043125205, 0.08337047, -0.048031043, -0.04262549, 0.0563499, 0.020266121, -0.0023489136, 0.14395538, -0.090865195, -0.05649617, -0.0032008542, -0.09472505, 0.16548397, 0.09045429, 0.05728004, 0.035739254, 0.010681364, 0.077034935, 0.006475404, 0.018348884, 0.024909813, -0.08545677, 0.050681405, -0.026014633, 0.026064806, -0.034731258, 0.0019590184, 0.044603776, -0.08481151, -0.024002114, 0.077462435, 0.08062199, -0.0651457, -0.058373254, -0.049591754, -0.08893046, 0.024534598, -0.036671758, 0.1060403, -0.01938553, 0.040851984, -0.07652438, 0.045385554, -0.034696322, -0.03452263, 0.090181164, 0.08101266, -0.11806359},
   {0.0039937156, 0.121059686, 0.04115471, 0.03190546, 0.11034967, -0.117461935, 0.003933723, -0.016334875, -0.071579285, -0.11542594, -0.04758467, -0.08785433, 0.0689286, 0.030853398, 0.17282689, -0.031086257, -0.020051943, 0.035160907, -0.005228864, -0.065635934, 0.024986422, 0.06461363, -0.045303702, -0.096047014, -0.052927837, 0.08698333, 0.038122952, 0.042993892, 0.0071676876, 0.0144531345, -0.055315185, 0.030295232, -0.035904333, 0.053581353, -0.07634684, 0.090902366, 0.07441283, -0.021882273, 0.06964625, 0.07887036, -0.024934892, -0.120078534, 0.062162265, 0.007871879, 0.020669864, 0.07805271, 0.0012497976, -0.0015799344, -0.0018397446, 0.03448583, -0.039582822, 0.08914859, -0.052516557, -0.089677244, 0.050562546, 0.0007129054, -0.0412587, 0.0315954, 0.083732, -0.04040555, 0.008326523, 0.07088492, -0.01887637, 0.12616375, -0.028141886, -0.01168585, -0.09005631, -0.03003894, 0.012854174, 0.09793061, 0.013498977, -0.05798971, -0.09988519, -0.038699497, -0.1519521, 0.091847904, -0.06129542, -0.04986689, -0.0473462, 0.03615161},
   {-0.022567531, 0.13657188, 0.24923545, -0.053561013, -0.10530338, -0.08292303, -0.06459487, -0.02314537, -0.00676024, -0.23081435, 0.21529882, -0.01510419, 0.09773191, 0.067569084, 0.21465024, -0.07588974, -0.13689193, -0.035650566, 0.13800265, 0.006525366, 0.027709747, 0.19322214, 0.02536653, -0.040383074, -0.011445438, -0.018237546, 0.10852533, 0.090407416, 0.28781015, -0.13594857, -0.055244457, 0.07168574, -0.27109358, -0.08659279, -0.033725787, 0.1341239, -0.05398301, 0.19382572, 0.0276879, 0.061785806, -0.08059987, -0.07545521, 0.07592056, 0.033718303, -0.1528852, -0.03561114, -0.009886965, 0.035286278, -0.015285004, -0.08198363, 0.042423718, -0.028771702, -0.0777371, -0.14846264, -0.030110395, 0.022614509, 0.08651874, -0.023182135, -0.07962467, -0.011754966, -0.025531799, -0.051059093, -0.039512932, 0.11687142, -0.07507754, 0.16852434, 0.017778812, -0.0809311, 0.09486338, -0.03243133, -0.108827196, -0.0805563, -0.054927487, -0.057303846, -0.16541229, -0.005658172, 0.06635364, 0.038057007, 0.01105046, -0.027150672},
   {-0.05628659, 0.16061606, 0.23285389, -0.015823636, -0.008986633, -0.105398774, -0.07962768, -0.057494238, -0.040531177, -0.090907164, 0.16264395, 0.043767855, 0.17123063, -0.014542721, 0.20333363, -0.09532837, -0.20569876, 0.045876928, 0.106577, -0.09120739, 0.03181239, 0.15407985, 0.009797424, -0.10125142, -0.13736346, -0.07604595, 0.18358228, 0.064271905, 0.21238972, 0.007899442, -0.023681676, 0.0841112, -0.14754738, 0.06952771, 0.05715183, 0.07173937, -0.058172584, 0.0028216932, -0.07612814, -0.030749606, -0.14448822, 0.038121477, 0.11768727, 0.07560789, -0.2096072, -0.050685, -0.056808416, -0.016340883, 0.002350981, 0.083870225, 0.083517246, -0.004620083, 0.022736471, -0.120113075, -0.05911417, -0.0069277063, -0.074943274, 0.033378173, -0.07888945, -0.04502818, 0.058702238, -0.043823797, -0.0500326, 0.12991396, 0.026196212, 0.14595442, 0.07650005, 0.050041772, 0.042248778, 0.118854046, -0.092249244, 0.013893822, -0.05482737, 0.08464287, -0.05501999, -0.0936665, 0.030607946, -0.046000533, -0.036185402, -0.023386143},
   {0.083002396, 0.103342645, 0.20322871, 0.03520531, 0.03951654, -0.17653285, -0.13810983, 0.05560254, 0.06350501, -0.13874215, 0.12699077, -0.025712473, 0.09435519, 0.090262644, 0.21032412, -0.14199582, -0.11232148, -0.020577304, 0.02895748, 0.05468676, 0.048025537, 0.061406795, -0.09246409, -0.09315977, -0.04791215, 0.05973336, 0.14402543, 0.088544935, 0.24965537, -0.1508602, 0.06802849, -0.059650186, -0.20071349, -0.049328186, -0.034230415, 0.14150974, -0.078112714, -0.005377486, -0.00094653416, -0.1497202, -0.08315876, 0.15146843, 0.058247082, 0.046833374, -0.23509839, -0.019095816, -0.01739692, -0.061327662, -0.098966956, -0.052910082, -0.090713955, -0.0035767802, -0.012431639, -0.027840387, -0.05941488, -0.056658495, -0.020213777, 0.085358, 0.0040275007, 0.0736609, 0.077674754, -0.013130699, 0.08377148, 0.012873568, -0.022220448, 0.066150285, -0.07978087, 0.07998587, -0.087341934, 0.013500033, -0.08334248, -0.049931075, 0.033457268, 0.09125714, -0.11371749, -0.0074046776, 0.026443927, -0.038506124, -0.028133158, -0.053365033},
   {-0.08886653, 0.08222015, 0.11686155, 0.026497366, -0.108605884, -0.1525758, -0.1199279, -0.040947374, 0.012147182, -0.09366439, 0.09094425, 0.06987448, 0.121159494, -0.022976816, 0.26645836, -0.045756873, -0.10573779, -0.095066085, 0.1232616, -0.0883556, 0.13759655, 0.13215001, -0.02328644, 0.08380545, -0.040203813, -0.020836925, 0.12336548, 0.06742998, 0.17318448, -0.1342238, -0.020570766, 0.023614125, -0.05378736, 0.018726846, 0.010860811, -0.015578662, -0.0057201595, 0.15625328, 0.060428698, -0.14560583, 0.022275172, 0.055720724, 0.028173063, -0.07139105, -0.25820416, -0.027344063, 0.059312485, 0.019143542, -0.06774405, -0.046894036, 0.08733819, 0.015206883, 0.05736221, -0.17783816, 0.029195512, -0.033002656, 0.07906847, -0.007609903, -0.0658315, 0.07789958, -0.0009431839, 0.039395668, 0.008907491, -0.005462387, 0.04040494, 0.23363398, 0.01005405, 0.028432714, -0.06574739, -0.009169284, -0.095456555, 0.0045505757, -0.011315603, -9.579864e-06, -0.07809883, 0.08030803, -0.09793151, 0.09557117, 0.00437988, -0.12094472},
   {0.010532753, -0.045128368, 0.1479593, 0.12650424, -0.10480652, -0.0062222956, -0.0807851, -0.026901437, 0.010763983, -0.14417031, 0.1071956, 0.064047664, 0.0668139, 0.023036562, 0.12611015, -0.11115038, -0.101110496, -0.056318182, 0.04181042, -0.035303794, -0.023131328, 0.24502182, 0.08380965, 0.065044, -0.01510593, -0.07551721, -0.03474464, 0.099655114, 0.13694492, -0.017393397, 0.0013876616, -0.019062167, -0.20939137, 0.03195362, -0.07226661, -0.017746184, -0.041616075, 0.19485843, -0.06633585, 0.028190946, 0.0096347, -0.036347285, 0.13550818, -0.07197351, -0.11953975, -0.07150441, 0.08244585, -0.017553074, -0.0752433, -0.024243798, -0.029260486, -0.024245542, -0.03506324, -0.07966812, 0.089154854, -0.09046037, -0.0593562, -0.09833419, 0.034997873, -0.084738016, 0.049242117, 0.06341852, 0.054598775, 0.090191774, 0.02384597, 0.21662763, 0.023296708, 0.038351573, -0.0754778, 0.021734865, 0.021509638, 0.03368985, 0.16371311, 0.0013909531, -0.12610601, 0.04929685, -0.07071649, 0.03772205, -0.079056285, -0.035639424},
   {-0.0019260411, 0.018130874, 0.22299072, -0.016359216, -0.060278308, -0.033805538, 0.013415655, -0.07931541, -0.04883087, -0.21598256, 0.14715658, -0.015281268, -0.045596443, -0.061601363, 0.2303458, -0.005431347, -0.16584177, 0.038799517, 0.06436874, 0.066998124, -0.052981634, 0.12085594, -0.06849773, 0.012496591, -0.007473482, -0.065779105, -0.012701093, 0.14478068, 0.17196546, -0.08743005, 0.048671376, 0.02615705, -0.06928888, -0.098529495, 0.014257081, 0.026526032, 0.067070276, 0.22930737, 0.072051935, -0.059835844, 0.0119369645, -0.010216558, 0.0739348, -0.06588336, -0.18844864, 0.050450765, -0.09263788, 0.08212782, 0.036467142, -0.0018820317, 0.06189931, -0.096614785, 0.042218633, -0.14842735, 0.0332414, -0.011049191, 0.062129617, 0.07854182, -0.04488331, 0.060852125, -0.032655723, -0.032967802, 0.04063132, 0.04360211, 0.03254994, 0.2056695, -0.054023854, -0.029264206, -0.015233718, -0.023105636, -0.005925823, 0.088542044, 0.06825396, 0.079558685, -0.08689808, -0.049880173, 0.07540789, 0.05907501, -0.071489654, -0.030658092},
   {0.06838084, 0.027356336, 0.18611221, 0.007910668, -0.04431557, -0.08318987, 0.03550423, -0.06435528, 0.03168722, -0.004398971, 0.10969452, -0.06608455, -0.009975226, -0.055172384, 0.13053632, -0.013528091, -0.17117561, -0.015535906, -0.02285949, 0.030167442, 0.03708448, 0.12618156, 0.06763738, 0.01606146, 0.08084455, -0.06998514, -0.054349065, 0.030646043, 0.08345122, 0.026789622, -0.032365616, 0.04240836, -0.08370566, -0.10104748, 0.034941554, 0.029328756, 0.03692077, 0.11354514, 0.08754422, 0.051557124, 0.08097502, -0.038134646, 0.017986774, 0.02056408, -0.14409101, 0.07503944, 0.056758203, 0.03147616, -0.050742045, -0.00015141198, -0.051244136, -0.048668172, 0.071084164, -0.13018847, 0.0077670957, -0.07641515, 0.021297714, 0.054181702, -0.01616849, -0.0062630074, -0.033013865, -0.05332675, 0.027005011, 0.20766939, -0.014583215, 0.15513095, 0.0061099697, 0.08678567, -0.057416964, -0.08572676, -0.0934856, -0.07628254, 0.14062534, -0.07509898, 0.009579141, -0.0109163225, 0.009206428, 0.106338084, -0.067399725, -0.0086752465},
   {-0.0014966419, -0.07562385, 0.15760678, 0.061898164, -0.018746285, 0.0048056887, -0.018727237, 0.073421195, 0.0071521485, -0.0853526, -0.025746493, -0.084669694, -0.075168245, 0.035669945, 0.007120192, -0.0036644181, -0.028372299, -0.06896514, -0.020302497, 0.041975934, 0.015290748, 0.15826668, -0.0072421506, 0.066030204, 0.118000165, -0.08944652, 0.033235356, 0.0833971, 0.018783186, -0.044715263, 0.06878318, 0.050605085, 0.03451966, 0.07145251, -0.013916221, -0.07980234, -0.06084777, 0.17691208, 0.08495569, 0.052564286, 0.053753864, 0.11520337, 0.0034392911, -0.07587127, -0.023048235, 0.012016922, -0.09131843, 0.060918678, -0.06254043, -0.04983728, 0.08932149, 0.024691151, -0.020639522, -0.06766213, 0.0345071, -0.0059148064, -0.012215254, 0.0128701655, 0.019166388, 0.0546136, -0.06710604, -0.05716515, -0.10660521, 0.055523816, -0.08258672, 0.05341821, -0.0151039, 0.018303994, -0.0383144, -0.060096838, 0.022849903, -0.0010131645, 0.07969562, 0.052486215, -0.11020582, -0.09173538, 0.051843274, -0.011627656, 0.056699716, -0.03753255},
   {-0.0682362, -0.07906905, 0.04477933, -0.051693898, 0.05439559, 0.08627784, 0.034024563, -0.003546566, 0.052388746, -0.005594173, -0.053193722, 0.03387398, -0.06833727, 0.017845154, 0.06311788, 0.011605288, 0.032549206, 0.05581983, -0.03855179, 0.061290614, 0.06981137, 0.034822475, -0.0025517195, 0.039586507, 0.02839938, -0.059495464, -0.037654042, -0.040936273, 0.09548603, 0.042900972, -0.02316393, -0.0184651, -0.010293772, -0.041174773, -0.03520794, -0.08392909, -0.0418573, 0.12349505, -0.045206062, 0.023784766, 0.093536176, 0.0001888395, -0.040865965, 0.08696867, -0.0068154596, 0.014201835, 0.07759551, -0.035343517, -0.018869415, -0.016328508, 0.02767799, 0.036297157, 0.0046747173, -0.03789163, -0.038552914, -0.057231724, 0.02397986, -0.038940992, -0.0018142909, 0.046707813, 0.0039928854, -0.13238418, -0.1267016, 0.15343146, 0.018779926, -0.008645323, 0.08603434, 0.03797678, -0.0691745, 0.08959119, -0.050247565, -0.023176976, 0.11107834, -0.030503266, -0.11878869, 0.07983882, 0.08727017, -0.017445268, 0.071642295, 0.08441555},
   {-0.0037889234, -0.03929108, -0.025776416, -0.10346086, 0.09208319, 0.05182323, 0.07185729, -0.0234772, 0.06126109, 0.032577198, -0.022020502, -0.085546106, -0.09311563, -0.052430913, 0.026651643, -0.033411317, -0.009659448, -0.042875342, 0.0067399996, 0.069435, -0.01788211, 0.050064843, 0.056477703, 0.0663997, 0.09567451, -0.038459104, -0.017495422, 0.026270632, -0.043085232, 0.009566012, -0.04633596, -0.02902709, 0.014761455, 0.058131307, 0.029721236, -0.06177197, -0.043721315, 0.15255664, -0.04133655, 0.026440714, 0.16450141, -0.024769872, -0.096289754, -0.0016668441, 0.102754965, -0.081891134, 0.079556994, -0.038486276, 0.04281307, 0.007553448, 0.089655735, -0.0026751484, 0.036835305, 0.030695561, 0.07238028, 0.015139367, 0.078104325, 0.046329703, 0.059141196, 0.005726313, -0.040364824, -0.052827034, -0.13574801, 0.17020951, -0.064282686, 0.052818157, 0.0567288, -0.0011407817, 0.095077, -0.10385066, 0.08457871, -0.05502385, -0.035560012, 0.047497574, -0.10038335, -0.08048996, -0.053643346, 0.028017202, 0.050854675, 0.013414958},
   {-0.07755421, -0.15769774, 0.013786965, -0.12381543, -0.03114827, 0.019323839, 0.019387264, -0.09930638, 0.039864156, -0.09022032, -0.065413624, -0.06468057, 0.037544675, 0.013568819, 0.07688746, 0.14813375, 0.0863736, 0.062047116, -0.063614234, -0.061372336, -0.18501586, -0.027352989, -0.06735218, 0.039955996, 0.10471484, 0.024060836, -0.106342696, 0.06499283, 0.07356034, 0.08720096, -0.08620255, 0.04423846, 0.05901813, 0.033052996, 0.057146825, -0.1109912, 0.028521962, 0.12802586, -0.01065569, 0.19918658, 0.089586586, 0.025607653, -0.07780007, 0.003695655, 0.13904138, -0.067888655, -0.092267856, -0.0028106393, 0.01829543, -0.060016084, -0.08352229, -0.087803826, -0.09121926, -0.09125011, 0.089144506, 0.06955284, -0.06040193, -0.07521718, 0.08429871, 0.01937618, -0.06324332, 0.0044574896, -0.09083379, 0.19971973, -0.059842635, 0.0795869, -0.08745559, -0.06914882, -0.03331487, -0.106143095, 0.06169082, 0.0030480532, 0.14120534, 0.06492542, 0.019004561, 0.036629684, -0.06397429, 0.19190244, -0.0153551195, 0.10667058},
   {-0.019244257, -0.1108109, 0.1592004, 0.010611293, -0.037712384, 0.10299341, -0.0004067114, -0.021104096, -0.03370586, -0.13136499, 0.00913148, 0.011235975, 0.016535942, -0.08692544, 0.029410817, 0.0876338, 0.096561536, -0.055521976, -0.11511828, -0.020759512, -0.1721053, 0.041347697, -0.06527991, 0.021411086, 0.20753874, -0.03644344, -0.04517292, 0.029361604, -0.024890097, -0.03663045, 0.08032964, -0.016121889, 0.021475276, 0.034934577, 0.0028423516, -0.2001683, -0.060407195, 0.26361462, 0.0030246077, 0.13969599, 0.15940638, 0.040191334, -0.070083216, -0.01990755, 0.0030490484, -0.05167347, -0.029676817, 0.045312498, -0.07298391, 0.081063986, -0.05298193, -0.07334083, -0.039862614, -0.058832042, 0.021453355, -0.08479753, -0.06935498, -0.06387013, 0.03775514, 0.076379575, -0.008907758, 0.054671597, -0.15129545, 0.10028726, 0.03715969, 0.037344124, -0.07725266, 0.058802493, -0.017499663, -0.2095767, 0.10858362, -0.013109323, -0.016076751, 0.07128327, -0.0055498043, 0.029351369, 0.00034114707, 0.10535614, 0.01471782, 0.118012756},
   {-0.071862146, -0.21239744, 0.10845309, -0.0031134167, -0.012904293, -0.0110998275, -0.033875845, -0.06813849, 0.040541604, -0.077834114, -0.02915971, -0.014831891, -0.026525341, -0.009982049, -0.02530382, 0.11672866, -0.047903996, -0.014809586, -0.20212874, -0.013267124, -0.09118515, 0.18702535, -0.08578308, 0.0020545868, 0.16062701, 0.12919244, -0.08228264, 0.104385875, 0.11652288, -0.08926949, -0.09563475, -0.0760844, 0.0041683516, 0.009494876, -0.011962306, -0.12052142, 0.0070307506, 0.196562, -0.052262694, 0.16285762, 0.19859596, -0.08384283, -0.045970015, 0.030946478, 0.09492888, -0.07682644, -0.08643381, -0.029829575, -0.00061294273, -0.04239514, 0.07289366, -0.039415453, 0.012456213, -0.1800242, -0.0682232, -0.047573473, 0.064848475, -0.047685895, -0.040082246, -0.03318041, 0.008618794, 0.08901645, -0.12582242, 0.21648611, 0.049051665, 0.082954936, 0.025363103, 0.06980706, -0.028007656, -0.18091828, 0.058548685, 0.038510535, 0.0021388803, 0.0004423083, 0.08197088, 0.015038192, -0.084014766, 0.14422978, 0.0012038897, 0.05147947},
   {0.051087987, -0.18882369, 0.14919439, -0.12631045, 0.013492996, 0.070331454, -0.04369956, -0.06381016, 0.088448636, -0.08131086, -0.018605685, -0.080353566, -0.055185262, -0.0041245446, 0.04113644, 0.06526404, -0.0486182, 0.014373966, -0.16773999, -0.074780956, -0.17630206, 0.114261135, 0.0452028, 0.024116004, 0.25533888, 0.06016457, -0.19943933, 0.12133489, 0.1278063, 0.06509917, -0.010725333, -0.065444976, -0.06854287, -0.084426425, -0.07363942, -0.072057694, 0.055619616, 0.18663983, 0.046344467, 0.17419747, 0.1035229, 0.003463719, -0.056004938, 0.086488344, -0.034451917, 0.0450558, 0.06084942, 0.07610829, 0.056480765, -0.02542842, 0.077952765, -0.03403436, 0.019608635, -0.07875552, -0.100423686, 0.08297883, -0.04072627, -0.011161818, -0.07335623, 0.06685183, 0.09215478, 0.03431677, -0.10216702, 0.102503516, 0.027273536, 0.05713215, -0.064538255, -0.057004586, 0.049123712, -0.20014706, 0.095392495, -0.016354065, -0.05148919, 0.03293215, 0.07326712, -0.089553565, -0.05330702, 0.11617368, 0.08052884, 0.13163823},
   {0.0612652, -0.16233917, 0.016796961, -0.004377412, -0.03800307, 0.077608615, -0.06738247, 0.06646745, -0.06270699, -0.0020572229, -0.04189222, -0.038930826, -0.06576456, 0.013679154, 0.071007065, 0.15809198, -0.024275912, 0.08404169, -0.18069403, 0.056370527, -0.09857944, 0.07050852, 0.07820318, 0.05823137, 0.19309096, 0.09095031, -0.09988358, 0.11903121, -0.0597931, -0.0037499352, 0.044036783, -0.00012040852, -0.011520609, 0.00989476, 0.05774122, -0.022682322, -0.033269864, 0.26213226, 0.07751847, 0.16129886, 0.053293787, 0.041401774, -0.15331328, -0.08193704, 0.029328696, 0.02453079, -0.049123026, -0.031478852, 0.08888474, -0.07805436, 0.03151866, 0.019076135, -0.06433576, -0.12644328, 0.04413353, -0.03016194, -0.003854495, -0.073374435, -0.036478397, -0.03580156, -0.07915308, 0.15517184, -0.16661194, 0.14004368, 0.008539833, 0.12802295, 0.0980266, -0.09478047, 0.059004523, -0.10646341, 0.16961643, -0.009615753, 0.037360992, -0.094972044, 0.043918256, 0.07624436, -0.04462803, 0.09980866, 0.010024415, 0.19697052},
   {0.033462532, -0.18610616, 0.15962058, -0.05592001, -0.013607624, 0.03444679, 0.00048624116, -0.088667884, 0.051972635, -0.10170187, 0.004091994, -0.051252563, 0.04199036, 0.08797381, 0.017032666, 0.066996545, 0.086389326, 0.02951894, -0.13450293, 0.033970628, 0.0014881172, 0.15999311, -0.08868665, -0.100906014, 0.079670325, 0.018081283, -0.068833835, -0.0009751783, 0.08867303, 0.010266599, 0.064280964, 0.05127606, 0.06411238, -0.023145216, 0.0875661, -0.008752191, 0.006084791, 0.22579943, -0.062387142, 0.2082829, 0.094050325, 0.026909612, -0.063619636, -0.015826927, -0.038506497, -0.003504455, -0.0019822493, -0.060942926, -0.06579774, -0.099478304, 0.0918129, 0.033648234, 0.03164886, -0.15254194, 0.0064870166, 0.08643182, -0.078962326, -0.013092412, 0.053382717, -0.04246496, -0.010376766, 0.117018856, -0.06949196, 0.059634764, 0.055449657, 0.0923172, -0.008235557, -0.034058157, -0.033422172, -0.025508529, 0.17461738, -0.036247585, -0.11974367, -0.04386778, 0.072027765, -0.055387765, -0.01758684, 0.05897428, -0.057819366, 0.18702695},
   {-0.0054438827, -0.18255965, 0.09496557, 0.06351922, 0.07293952, 0.09679174, 0.035408743, -2.9193727e-05, 0.013643357, 0.05802888, 0.058718223, -0.067533135, -0.10685291, -0.086350456, -0.013641059, 0.024575302, -0.096679986, 0.058546774, -0.0535535, -0.054797295, -0.11129651, 0.12615694, -0.07948838, 0.049702857, 0.020171942, -0.032141007, -0.16475354, -0.06955138, 0.06966327, 0.05600692, -0.027229961, 0.013032989, 0.083091065, 0.08586627, 0.060713105, 0.04859989, 0.061393075, 0.15616074, 0.012589708, 0.046207104, 0.120802514, 0.0878192, -0.053479012, 0.04947634, 0.010040321, -0.0007978678, 0.00088250637, -0.0030879225, 0.043954015, -0.04104737, 0.08446502, -0.015907086, -0.09504058, -0.060068253, 0.02317666, -0.071173824, 0.013761619, -0.036824264, -0.08978455, 0.08491245, 0.047919787, -0.04409293, 0.035668228, 0.14789991, -0.031197175, -0.039083645, -0.07214888, -0.021390237, -0.0056511313, -0.013359162, 0.119342655, -0.06262598, 0.005037416, 0.08506818, -0.090336725, 0.06263281, -0.024833571, 0.017649872, 0.08208828, 0.17518191},
   {0.033967223, -0.13336076, 0.041947953, -0.08532462, -0.0032954426, 0.10017384, 0.12098008, 0.034397874, -0.017307192, -0.07549889, -0.06979486, -0.07209115, 0.046401296, -0.069627315, 0.016655542, -0.017394815, -3.407787e-05, 0.019450314, -0.026121702, -0.07652796, -0.057765845, 0.013722927, -0.022893116, -0.052894097, 0.18828292, -0.025331357, 0.020056289, 0.09989748, 0.09091368, -0.0043352265, 0.042748954, -0.046769474, -0.096157536, -0.056134395, 0.052286357, 0.0054179034, 0.07422363, 0.16551001, 0.062422987, 0.077382125, 0.09727678, -0.049111206, 0.037557762, 0.07597737, 0.012321042, -0.020603776, -0.02624932, -0.05783361, 0.028998494, -0.097315684, -0.08675461, 0.07406978, -8.1879945e-05, 0.048776437, -0.0602964, 0.038594775, -0.0025732552, 0.08429616, -0.05105331, 0.07410934, 0.026281603, -0.11933515, 0.058700196, -0.014793128, 0.027774826, 0.037459776, 0.032352448, 0.04967525, -0.05713491, -0.049155716, -0.036775224, -0.05385562, -0.15258281, -0.09837123, -0.0064128954, -0.031542458, 0.0026404655, 0.15603976, 0.074273616, 0.04656133},
   {-0.059259176, -0.03862681, 0.15220354, -0.004115702, 0.09955348, 0.048430648, -0.027526056, 0.01014432, 0.025839865, -0.0830927, -0.0449783, -0.0068998258, -0.05970425, -0.0541724, 0.09449846, 0.03372671, -0.07830107, -0.07731371, 0.019587072, -0.076324165, -0.050763402, 0.012060202, 0.06624503, -0.0062740874, 0.17046975, -0.05149303, -0.11521549, 0.10457002, 0.00041716502, 0.04608613, -0.059449393, -0.023691671, 0.03348187, -0.016029948, -0.011512544, -0.010704953, -0.06189245, 0.036397412, -0.010062986, 0.02844433, 0.05321488, 0.014764776, 0.049343556, -0.09832889, -0.06858235, -0.033599615, 0.068187065, -0.0643061, -0.041087415, -0.097457506, 0.057804935, 0.0377897, -0.040031508, -0.077674344, -0.07786255, 0.028200973, -0.064617544, -0.098703824, -0.05173439, 0.06347737, 0.05852195, -0.054272227, -0.07623977, -0.019720394, 0.07731547, 0.17122307, 0.090530366, -0.07446407, -0.04980374, 0.05148979, 0.057496402, 0.04433088, -0.027559888, -0.031168783, 0.021544734, 0.081836544, -0.09432843, 0.046486408, 0.019436223, 0.094106734},
   {0.07981592, -0.09801504, 0.17995974, 0.03468704, -0.053343497, 0.0113613885, -0.08380294, -0.002740234, -0.007864937, -0.11664929, 0.16122904, 0.075248286, 0.07374766, 0.07683583, 0.09104954, 0.022801131, -0.111308105, 0.069008, 0.07472908, 0.020119974, 0.01485141, 0.14563778, -0.07548539, 0.07681148, 0.119431965, -0.05995075, -0.13088587, -0.054793537, 0.107289374, 0.066161305, -0.057286296, 0.014418254, -0.16237883, -0.10074189, -0.077930085, -0.04825311, 0.020980783, 0.15391237, 0.04614279, 0.007987888, 0.13887084, -0.04492607, -0.017765805, -0.0073141246, 0.021983191, 0.07775804, 0.005344175, 0.0014523155, 0.042660203, 0.074613094, -0.059621736, -0.037743125, -0.012579566, 0.018971112, -0.042666253, 0.01077441, -0.02963559, 0.07853903, 0.08176545, 0.049268376, -0.036938462, -0.19495249, -0.107704625, 0.11422306, -0.05206335, 0.031444702, -0.015237254, -0.0843345, -0.016223125, -0.10001909, -0.070621714, -0.05397828, -0.034984604, -0.07434586, -0.13418028, -0.0670377, -0.012185828, 0.13923636, -0.09387865, 0.1060504},
   {-0.027142558, -0.03684557, 0.23973216, 0.035701945, -0.037318256, -0.13812847, -0.08241656, 0.08077708, -0.07464808, -0.07183865, 0.19427294, -0.005344622, 0.0753514, -0.091297835, 0.11581567, 0.013972792, -0.0418193, -0.014451623, 0.0054829097, 0.07255065, -0.089419276, 0.14992575, 0.036112644, -0.02984666, -0.013694334, 0.051566407, -0.10142348, 0.012436987, 0.123527505, 0.02189566, 0.06485216, -0.052120708, -0.098416016, 0.03190617, 0.02749899, -0.092512816, 0.04097102, 0.256769, -0.043884158, 0.016066356, -0.045053914, 0.073955394, -0.022822866, 0.023479441, 0.049986135, -0.021182358, -0.08571705, -0.039673273, -0.07560522, -0.04384993, 0.07399105, -0.00881055, 0.059736017, -0.12797983, -0.008764853, -0.0670653, -0.061384268, -0.01444281, 0.006463684, 0.011113088, -0.06178309, -0.37265038, 0.041651916, -0.050929427, 0.016687267, 0.09587723, -0.015806403, 0.08069329, -0.08804351, 0.06405615, 0.04446582, 0.00082032895, 0.02032904, 0.010307363, -0.1294917, -0.0127930865, 0.019655956, 0.1066761, 0.06949661, 0.075883016},
   {-0.05365398, 0.010307047, 0.16799416, 0.035667267, -0.06936503, -0.013599726, -0.071147166, 0.07977526, -0.07377813, -0.060178116, 0.167707, 0.039980687, 0.07043538, -0.006939344, 0.10633051, -0.041939877, -0.13324685, 0.0783818, 0.010788014, 0.00453492, -0.08335628, 0.1609748, -0.028530769, -0.08082779, 0.12281904, 0.03426122, 0.037949514, 0.15348554, 0.105593726, -0.1351336, 0.07871373, -0.06439415, -0.060015675, -0.017685674, -0.08890612, 0.031473573, -0.09312881, 0.12276995, 0.058419567, 0.06586905, -0.0064009433, 0.055755164, -0.030598657, 0.04426675, -0.03974442, -0.01739806, 0.09309029, 0.043111682, 0.07483766, -0.07096235, 0.06388373, 0.046973504, 0.008170164, -0.13891126, -0.056069117, 0.077571906, 0.028075287, 0.028597888, -0.05285862, -0.015098364, -0.08786559, -0.35054496, -0.019813104, 0.009296589, -0.0009048134, 0.096384846, 0.08026344, -0.093733646, 0.087587796, 0.06399827, 0.09539433, 0.08555607, -0.009344297, -0.087017424, 0.02508049, 0.015819378, -0.05259702, 0.02748246, -0.040752515, -0.0063861734},
   {0.025854204, -0.017437851, 0.1604416, 0.042398937, -0.11000059, -0.11734648, -0.01956632, -0.032041606, 0.08033981, -0.24843292, 0.17678773, -0.06791146, -0.007099634, -0.08130035, 0.25959986, -0.16031413, -0.095598556, -0.074889, 0.021871177, 0.070737794, 0.13788548, 0.12959972, 0.051989593, 0.062406678, -0.018311635, -0.040949464, 0.111675434, 0.14105496, 0.21031399, -0.026270892, -0.03576389, 0.0050826655, -0.107843846, -0.077518255, -0.027971482, 0.018961372, 0.025070323, 0.085414544, 0.00650599, -0.008237547, -0.0055753607, 0.13803193, 0.1731332, -0.0044035814, -0.041428033, 0.03049042, 0.091902144, -0.09634631, -0.07050023, 0.063716985, -0.061715737, 0.036910936, 0.04055711, -0.17088248, -0.040040687, 0.07089705, 0.011863824, -0.011228727, 0.095315374, -0.0009448953, -0.0040571913, -0.31682134, 0.0052780635, 0.002943868, -0.029005721, 0.10494582, -0.06034406, 0.037005197, -0.039494514, 0.007058317, 0.025447374, 0.0483302, 0.07464782, 0.011829927, -0.14050856, 0.058782823, 0.072756946, -0.081134774, 0.062237184, 0.031083811},
   {-0.0900861, 0.008491897, 0.118568145, 0.111115165, -0.08540007, -0.18323508, -0.19392544, 0.013778167, 0.007541603, -0.16920096, 0.078642145, -0.02175852, 0.1822532, 0.05330775, 0.2659669, -0.030014642, -0.20980085, -0.017718472, 0.105328016, 0.07463256, 0.017607246, 0.123402245, -0.089642674, -0.04051168, -0.072383866, 0.02185945, 0.089888796, -0.023983875, 0.16930033, 0.04668432, -0.0024863216, 0.033848725, -0.24110466, 0.06252175, -0.08020335, 0.040516205, 0.02459955, 0.16154158, -0.016229527, -0.017953286, -0.14074136, 0.14248836, 0.10479117, -0.08105589, 0.012160165, -0.06396923, 0.070467345, -0.067360505, 0.07236452, -0.008925744, -0.03394581, -0.056669053, 0.088752136, -0.12837923, 0.073250555, -0.020015547, -0.07686757, -0.073310845, 0.0067444146, 0.06445394, -0.08522333, -0.3697103, 0.06881938, -0.10622996, 0.003990628, 0.056176722, 0.088771045, -0.040312927, -0.037429653, 0.056659035, -0.058145303, -0.011039942, -0.022509586, 0.07266883, -0.13480416, -0.08626428, -0.008512812, -0.07864566, -0.07776194, 0.099670015},
   {-0.03521035, 0.090742245, 0.21076636, 0.033702757, -0.0324804, -0.14703858, -0.105515316, 0.05932532, 0.06394552, -0.11900251, 0.11271161, -0.04281771, 0.17591496, 0.007323049, 0.14720772, -0.025917329, -0.04491509, 0.032539822, 0.021101268, 0.031750645, 0.036219753, 0.10456308, -0.06411425, 0.045521922, -0.020079857, 0.07149079, 0.056572203, -0.047204822, 0.20671338, -0.008294903, -0.06157476, -0.083833046, -0.16233732, 0.0425223, 0.013899774, 0.12787782, -0.044328038, -0.003411855, 0.04440713, -0.049809843, -0.17303038, 0.05610121, 0.13747038, -0.03606025, -0.09228949, 0.018656954, -0.047348473, -0.07860612, 0.04097762, -0.06097569, 0.07307092, -0.04618166, 0.03798135, -0.108139224, -0.034027867, -0.0456599, 0.07519861, -0.047017545, 0.07387661, 0.034574762, 0.02810926, -0.43433538, -0.023708882, -0.07369785, 0.00049675256, 0.14345835, 0.015273714, 0.05918342, 0.094437234, 0.006391592, -0.09414152, 0.040809512, 0.013849636, -0.034512095, -0.18035994, -0.09058296, -0.08236998, -0.042903528, -0.031058356, 0.12404977},
   {-0.07745423, -0.027635427, 0.21024373, 0.008234382, 0.0005005563, -0.2474483, -0.15571108, -0.04795222, 0.050922003, -0.1462489, 0.053094912, 0.034625083, 0.05000966, 0.075951435, 0.17159289, -0.032999694, -0.09429141, 0.005741447, 0.17519604, -0.085153036, 0.09603014, 0.12954645, -0.064041354, -0.0014076367, -0.052409936, 0.09658284, 0.16812117, 0.11459702, 0.11268629, 0.026203196, -0.0633251, 0.0018249947, -0.25108102, -0.05207406, 0.0443335, 0.0072666337, 0.06651581, 0.11346889, -0.0002800858, 0.029940452, -0.054738514, 0.08452636, 0.14538978, -0.07880865, -0.070965245, -0.038240112, 0.05146388, -0.055536747, -0.063384324, -0.046903756, -0.08427706, -0.06905018, 0.058003005, -0.088556364, 0.08576825, -0.08215853, -0.050532296, -0.051658083, -0.09385844, -0.09364025, -0.05217996, -0.6333734, 0.005411118, 0.0914649, 0.040136166, 0.13712865, 0.094271034, 0.014024204, 0.09494688, 0.09462496, -0.022325225, 0.044189878, 0.15275428, 0.007210914, -0.04729921, -0.02189003, -0.09181813, -0.13079068, -0.039159223, 0.12128961},
   {0.023456754, 0.120169304, 0.1549681, -0.037661254, 0.084665194, -0.11432411, -0.13359317, -0.016549323, 0.011588425, -0.16088039, -0.02094237, 0.060840193, 0.22598128, 0.08184669, -0.014466864, 0.060483515, -0.08475773, 0.0913739, 0.005657399, -0.09032863, -0.026442856, 0.14620145, 0.078676574, 0.026591577, -0.07306501, 0.06582751, 0.15793069, 0.01158063, 0.05966759, 0.0062063504, -0.093828835, -0.084111094, -0.13465595, 0.016556194, 0.07069508, -0.010939163, 0.04305927, 0.041781444, -0.04879113, -0.030955393, -0.06258176, -0.12790751, 0.04963296, -0.07698483, -0.04196137, 0.08343338, 0.042767607, 0.08042, 0.009580707, 0.048865933, 0.06726775, 0.072744675, 0.005297233, -0.058605175, -0.0439402, 0.075937755, 0.049358193, -0.01779218, -0.030808501, -0.0011829461, -0.029017873, -0.47005606, -0.081492625, 0.12787536, -0.058321524, -0.084241904, -0.08359032, 0.08288088, -0.026145823, -0.034307603, 0.009400723, -0.082660675, 0.21638651, -0.025166806, -0.17371722, 0.08503357, -0.013050142, -0.078040585, 0.00045293893, 0.051562063},
   {0.060790543, -0.12491247, -0.12765284, -0.08994389, 0.11187651, -0.021918893, -0.06560182, 0.053680554, -0.074407876, 0.06991987, -0.02237616, -0.0492745, 0.06265833, -0.023771338, -0.048343305, 0.07133284, -0.029818317, 0.00734435, -0.08550946, -0.054524228, 0.011377454, 0.021793824, -0.06989412, -0.037759673, -0.084620535, 0.110970855, -0.014644855, -0.023038732, -0.03773386, -0.01629861, -0.0391212, 0.06297167, -0.09855707, -0.015758665, 0.061896767, -0.027796986, -0.019193912, -0.057452407, -0.09279396, 0.10640256, -0.09889075, -0.044957798, 0.072613046, -0.09482377, -0.06900372, 0.013248913, -0.00929486, 0.04483147, 0.082454026, 0.07355783, -0.05702056, -0.034131538, -0.005508898, -0.038562603, -0.0070248335, -0.094433025, 0.0354056, 0.00439991, 0.055872522, 0.07410681, 0.017405607, -0.42293844, -0.072782315, 0.09832323, -0.09375021, -0.069173895, 0.06792123, -0.026483826, 0.0802476, -0.026544558, 0.1830913, 0.03451404, 0.32927415, 0.08573138, 0.050596315, 0.038743682, -0.037736524, -0.004130371, -0.010552752, 0.080634445},
   {-0.06206615, -0.11076423, -0.14000838, -0.091866665, -0.08252943, 0.13882793, -0.028693976, -0.08318383, -0.06842186, 0.021398447, -0.0066564586, -0.098996475, -0.15924808, 0.0018940791, -0.09884705, 0.092868224, 0.08119917, -0.08972471, -0.09128755, 0.0021916023, -0.19182435, -0.0855005, 0.08952873, 0.02526584, -0.0048307944, 0.041115835, -0.030995311, 0.10437212, -0.0020819956, -0.09791163, -0.070574835, -0.040243287, 0.13555092, -0.014342964, 0.033585373, -0.15854833, 0.08060405, -0.055821262, -0.08383716, 0.1352683, 0.086181104, -0.07606277, -0.05379416, 0.011326146, -0.07891211, -0.02996412, 0.0136990845, 0.056976087, -0.013102192, -0.031025408, -0.01919619, -0.07901757, -0.00954174, -0.04561765, -0.025677726, -0.045379434, -0.00938245, -0.060757205, -0.014148802, -0.030949337, -0.079381675, -0.50014067, 0.06526437, -0.016899098, 0.060487457, -0.10350027, 0.05260829, -0.008590005, 0.029292837, -0.2184517, 0.237021, -0.023561347, 0.39853802, -0.041319266, 0.1417899, -0.025720753, 0.034851108, 0.016359027, 0.020850305, 0.054473534},
   {0.06139281, 0.0032173684, -0.33380714, 0.054991044, -0.19364218, 0.26874712, 0.11608482, -0.03935849, 0.0011552223, -0.06979898, 0.19136417, -0.078501746, -0.34595218, 0.00029092282, -0.015373203, -0.088181, 0.02209739, -0.0019468367, 0.21548127, 0.062362123, -0.20826493, 0.07842871, 0.08204336, -0.100141644, -0.11648105, -0.09248267, -0.074338384, 0.18209165, -0.04265647, -0.24142328, 0.05730332, -0.009262807, 0.06395399, -0.042385556, -0.09080243, -0.16960213, 0.0031130812, 0.008140005, 0.021866487, -0.064783506, 0.066082776, 0.071772695, 0.012147221, 0.012422209, -0.07457593, 0.06877936, -0.08752325, -0.10035473, -0.01987136, 0.028795777, -0.05802955, -0.008785331, -0.091797575, -0.124776095, -0.059656873, -0.06045362, -0.0850014, -0.004028538, 0.032842986, -0.07679578, -0.025169596, 0.0062917424, 0.105902486, 0.053790513, -0.05737964, 0.122606285, -0.0007529255, 0.054842684, 0.033020638, -0.27209863, 0.31698683, 0.06514941, 0.30461186, -0.062326476, 0.1739998, -0.030064441, 0.08076261, 0.21881312, 0.0021979874, -0.15910627},
   {0.038457002, -0.022992598, -0.20629472, 0.06254044, -0.24403964, 0.07666788, 0.013380474, -0.016822867, -0.044028107, -0.13191396, 0.01823025, 0.0015445256, -0.17687197, 0.017644934, -0.040275555, 0.027472124, -0.15733819, -0.07051261, 0.2238104, 0.0025233496, -0.112309694, 0.068254635, 0.0063359514, -0.086972356, -0.089258514, 0.02717356, 0.04727137, 0.07359319, 0.045921955, -0.28926605, -0.068514496, 0.004317483, -0.019759322, 0.056407176, -0.01757807, -0.19424275, 0.023150573, -0.13489696, -0.06091443, 0.0618671, -0.117436275, -0.058426876, 0.23889363, 0.063620485, -0.13102652, -0.021260709, 0.0444896, -0.0009769368, -0.037551787, 0.021554781, -0.045971036, -0.038792923, 0.015461453, -0.071552575, 0.04330006, -0.0359299, -0.052785866, 0.044966947, 0.09421862, 0.08136143, -0.054738518, 0.028760392, 0.12644847, 0.0051592207, -0.010225318, 0.15622786, -0.025372924, -0.09583015, -0.08644893, -0.17404477, 0.2736121, -0.036777407, 0.15549918, -0.017335055, 0.16970067, 0.02598434, 0.014023021, 0.02948803, 0.051651027, -0.19143465},
   {0.06665644, 0.03003555, 0.11362189, -0.0083462065, -0.12511882, -0.18336864, -0.21566665, -0.012262368, 0.010522598, -0.11013698, 0.11911111, -0.03284283, 0.15650703, -0.09201182, 0.11025518, -0.08713655, -0.13447025, 0.014902115, -0.015584584, 0.04955952, -0.005472256, 0.15637414, -0.06471172, -0.08769881, -0.12064916, 0.16787024, 0.1422626, 0.091683365, 0.09597793, -0.06250422, 0.07259831, -0.0826554, -0.19017567, 0.06977507, -0.059808046, 0.013754661, 0.06971391, -0.0391968, 0.016889933, 0.032300655, -0.14830543, 0.007737692, 0.20977417, -0.06662307, -0.15047535, -0.072579816, -0.0032405034, 0.020450994, -0.076137155, -0.025480788, -0.014233738, -0.046944346, 0.0435571, -0.11634254, -0.011174725, 0.040055916, -0.0128797, -0.09749475, -0.0776148, -0.020989923, 0.015155233, -0.08239313, 0.080725536, -0.0080425, -0.022493452, 0.001781195, 0.07594549, -0.013546625, -0.08702622, 0.08953915, -0.0075650793, 0.014006075, -0.11874484, -0.038073894, -0.11795131, -0.05944231, -0.052102305, -0.084301494, -0.03514114, -0.050617974},
   {0.015676035, 0.15499918, 0.14448074, 0.0010622314, -0.08094688, -0.2521379, -0.22411251, 0.058744054, 0.05384014, -0.1343596, 0.19487952, -0.0029815934, 0.21077187, -0.0054618046, 0.302275, -0.1228678, -0.24192049, 0.033424683, 0.12961513, 0.08955713, 0.1693517, 0.18599294, -0.0870602, -0.045076832, -0.17848472, 0.063068405, 0.124813914, 0.10983719, 0.2431193, -0.12825534, -0.045806423, -0.02155567, -0.2097059, 0.082853556, -0.08404949, 0.042745337, 0.07897343, 0.074076906, 0.049273763, 0.015527958, -0.22563536, -0.003938475, 0.25007758, 0.047914915, -0.22167091, -0.083288275, 0.048249386, -0.06231672, -0.026279537, 0.00081498415, -0.08176495, 0.012997919, -0.06722366, -0.23142764, 0.030778488, -0.007253328, 0.048247654, -0.076102644, -0.07247892, 0.089247964, -0.050095305, 0.07300644, 0.026883185, 0.08749686, 0.035680182, 0.09101002, -0.009065532, -0.0578034, 0.026102632, 0.09229676, -0.10290714, 0.011423759, 0.07633427, 0.032340717, -0.0640769, 0.024550036, 0.017959207, -0.23584273, 0.00771012, -0.18728031},
   {0.028328126, 0.10997796, 0.25932896, 0.07936701, -0.14595088, -0.19006762, -0.13496259, 0.089474216, -0.032680463, -0.24480532, -0.0047192136, 0.07444737, 0.27775562, 0.021436825, 0.14264737, -0.06522075, -0.11374848, -0.036545068, -0.0087520145, 0.071557544, 0.10634305, 0.24964929, 0.026776053, 0.03055143, -0.006585963, 0.0444457, 0.08248868, -0.0537202, 0.22232005, -0.13064691, -0.0682001, -0.073434345, -0.25030473, -0.09536253, 0.052888885, 0.20968209, 0.086933784, 0.0126907285, 0.082826465, -0.0029328084, -0.06637125, 0.041990288, 0.19811694, 0.05423144, -0.022034988, 0.013472162, -0.08247481, 0.037914414, 0.06961878, 0.07977819, 0.08422101, 0.060483094, -0.057390332, -0.2085842, 0.012954597, -0.034567267, -0.007817025, -0.06534198, 0.07187066, 0.033781566, -0.092282906, 0.055521175, -0.11282816, 0.13196066, -0.054183003, -0.044867545, 0.07532493, -0.058144357, -0.059035964, 0.07531397, -0.17102571, 0.04031939, -0.013068486, 0.07341578, -0.07960839, 0.0080015585, -0.081743516, -0.14271897, -0.093547404, -0.011354581},
   {-0.024119955, -8.408907e-05, 0.17113577, -0.07066575, -0.12209872, -0.19080861, -0.06907979, -0.0060154, -0.07070009, -0.1351918, 0.007241598, 0.03202509, 0.15583368, 0.0390616, 0.2596366, -0.13013248, -0.15626267, 0.09542263, 0.09030326, 0.044038363, 0.006049032, 0.2279098, -0.059702247, -0.023315074, -0.06837504, -0.0055988054, 0.1381196, 0.036307786, 0.20420581, -0.09987838, 0.06602667, -0.01472062, -0.14777246, 0.020180302, -0.061568443, 0.12762073, -0.08132075, 0.04019629, -0.032049388, 0.03569033, -0.17876114, -0.019254318, 0.13492662, 0.028024793, -0.036243133, -0.057034973, -0.065206766, 0.00831124, -0.02565834, 0.05453042, -0.02189698, 0.06215113, 0.02220372, -0.19662276, 0.055114374, -0.06968826, -0.064241596, -0.0101391645, -0.079374164, 0.026920449, -0.020078972, 0.075940974, 0.050141945, 0.12266595, -0.01881399, 0.025901787, -0.0036681057, 0.045956824, -0.00016273558, 0.13459249, -0.03294928, -0.0749964, 0.05763596, -0.021244489, -0.033382922, 0.07549194, -0.041868087, -0.12704195, -0.033797443, -0.064862154},
   {-0.055435125, 0.05619421, 0.098432474, -0.0024765835, -0.019632876, -0.16856244, -0.0709242, 0.023831328, 0.0061926334, -0.13066208, 0.063034475, 0.08646944, 0.09396952, -0.08364307, 0.15767649, -0.0042274543, -0.012131388, -0.039756753, 0.033848707, 0.06275242, 0.08034137, 0.07261621, -0.04590696, 0.06773454, 0.06611475, 0.120663024, 0.007907605, -0.0318766, 0.17969376, -0.13608441, -0.016221344, -0.052095745, -0.17676274, -0.06295094, 0.02340382, 0.02705728, -0.019575521, 0.17934106, -0.0794179, 0.0075161215, -0.083407655, -0.0955768, 0.13431841, 0.08011256, -0.15750378, 0.036328085, -0.051194042, 0.021429641, -0.052188873, 0.026922954, 0.023566782, -0.089290865, -0.087982595, -0.114332914, -0.054543957, 0.0767638, 0.044367425, 0.038103078, -0.06607153, 0.023277862, 0.06897513, -0.03116718, -0.002162177, 0.07386166, -0.07155186, -0.021697165, 0.0032188266, -0.044837937, -0.016259447, -0.04095797, -0.15502697, 0.027590483, 0.04272294, 0.02967529, -0.09424778, -0.016792089, 0.013934319, -0.048406728, 0.059464555, -0.05193884},
   {-0.022256577, -0.06918777, 0.2183479, -0.041722856, -0.14335555, -0.0067513585, -0.053274766, 0.049616568, 0.0669019, -0.0953929, 0.076486, -0.020010743, -0.013263294, 0.020535871, 0.12374123, 0.0634352, -0.14818303, -0.009182677, -0.042746585, 0.07957047, -0.10218213, 0.17377105, -0.046692543, -0.039253358, 0.022944916, -0.008179689, 0.005653715, 0.17339984, 0.1118959, -0.10548636, 0.08304214, 0.004147023, -0.16098428, 0.026731586, -0.094710216, -0.027852949, -0.03172695, 0.17007014, -0.07205906, 0.019890659, -0.012071231, -0.06717193, 0.024450717, 0.050619975, -0.07034812, 0.09463618, -0.0056785345, -0.064043924, -0.08589645, 0.045027006, -0.019669458, 0.040378135, 0.009324838, -0.1633638, -0.10045768, 0.013899345, -0.099341415, 0.024501769, -0.083018124, -0.025236242, 0.08584132, -0.06257364, 0.03250276, 0.18749115, 0.07603628, 0.19040635, 0.07500126, -0.033099707, -0.074659385, 0.024646837, -0.033853184, -0.012496088, 0.19656035, -0.041962847, -0.012273563, -0.029429995, -0.031301327, -0.041409366, 0.0020649666, -0.09896083},
   {-0.04917037, -0.045070987, 0.22537538, 0.004139105, -0.15693627, -0.05013694, -0.17384422, -0.04741515, 0.06223274, -0.14448218, -0.009832475, 0.07589451, -0.053417835, -0.00397636, 0.21738143, -0.100300394, -0.06536135, -0.046371724, -0.009000289, -0.09004963, -0.11595707, 0.23917696, -0.06383224, 0.06765995, 0.067066975, 0.09849695, -0.025690693, 0.12076308, 0.12894295, -0.16296527, 0.059264023, -0.008295356, -0.06277343, -0.08346073, 0.07023949, -0.06636, -0.08625904, 0.10275426, -0.082241975, 0.08803875, 0.07876525, -0.08207676, 0.13656521, 0.043077245, -0.1464091, -0.029140115, -0.026561469, 0.0476756, -0.027257284, -0.03519185, -0.022470057, -0.009422078, -0.085063234, -0.25152513, 0.04439455, -0.04846014, 0.07600596, 0.08162593, -0.048714675, 0.04956689, -0.078169815, -0.07715442, 0.051431764, 0.20235036, -0.07118231, 0.07052452, -0.098091446, -0.019692644, -0.07859951, 0.0019948003, 0.021295711, 0.07713532, 0.23017596, -0.003070929, -0.13768505, -0.038736932, 0.043819975, 0.10060868, -0.09155943, -0.08579445},
   {0.05897058, -0.10055769, 0.12793864, 0.058807783, -0.062603325, -0.029788809, -0.09423713, 0.03933959, -0.07783882, -0.122634895, -0.025564061, 0.0074589327, -0.03618972, 0.04859797, 0.095125645, 0.050420012, 0.024715722, 0.059655897, 0.077999756, 0.015213539, -0.010801266, 0.077101484, -0.019184284, -0.018907843, 0.10802315, 0.061187357, -0.031714246, 0.012909777, 0.19794233, -0.034533285, 0.07143368, -0.049450308, -0.12196143, -0.045466464, -0.08979308, -0.136041, 0.029133542, 0.21289442, 0.03637505, 0.09076947, 0.09678161, -0.08908645, 0.02186685, -0.06617156, -0.063318685, -0.01190301, 0.055277772, 0.009047164, 0.067972235, 0.07017032, -0.08223163, 0.06076508, 0.010712222, -0.1091151, 0.08475202, -0.014514277, -0.017814314, 0.057902426, -0.045344472, -0.04637241, -0.08505948, 0.037131604, -0.03433459, 0.18619686, 0.0036256239, 0.1197204, -0.049133055, -0.07819235, -0.07869847, 0.030001823, 0.14894949, -0.010599017, 0.16874272, -0.030413996, -0.038527578, 0.09108371, -0.052258074, 0.04239844, 0.072904766, 0.027424155},
   {-0.065926425, -0.03980313, 0.2419653, 0.026687946, 0.034889415, 0.041878607, 0.026448073, 0.071581125, -0.088631414, -0.07001093, 0.12766056, -0.08264596, 0.01744374, -0.008923151, 0.0049602226, 0.056883544, -0.023023844, 0.04232072, 0.016048558, 0.04515831, -0.14096412, 0.10700004, -0.050377727, 0.08663658, 0.21156678, 0.09896376, 0.0102154445, 0.14220335, 0.07478427, -0.078532, 0.048837043, 0.075367816, -0.07791424, -0.07814403, 0.0499116, 0.0050546373, 0.029478375, 0.27493432, -0.01794885, 0.16024563, 0.10686963, 0.055441216, -0.014635061, -0.0071268636, -0.087105595, -0.0902455, 0.0614501, 0.03743044, 0.013092168, 0.034750942, -0.045735836, -0.028534299, 0.046322055, -0.11981357, -0.060369477, 0.06018965, -0.0054376037, -0.08316364, 0.025199167, -0.042469613, 0.038696073, -0.010326585, 0.038813777, 0.2087331, -0.029388763, 0.15012775, 0.070423715, -0.06745582, 0.07676289, -0.050866067, 0.06509273, 0.01771814, 0.03812234, 0.065707095, -0.11141, -0.033461004, 0.057826757, 0.14521863, 0.0070441905, 0.11080438},
   {0.08506014, -0.1124908, 0.18342969, -0.00957936, -0.107847504, -0.05615857, 0.07291655, 0.08366688, -0.080379725, -0.02964615, 0.07693631, -0.0015588683, 0.05773144, -0.08068154, 0.118957385, -0.060987763, 0.024986459, 0.017621994, 0.010706628, 0.054260563, 0.0131936185, 0.057354957, -0.07273432, -0.0044078096, 0.14356655, -0.057316806, -0.15718713, 0.076384194, 0.0031980537, -0.09498512, 0.019322436, 0.01773247, -0.0099169165, -0.08177392, 0.064467326, -0.075492285, -0.031332623, 0.085353196, 0.019394925, 0.08565435, 0.1347636, 0.07485035, -0.11234979, -0.06829978, -0.104711846, -0.012581266, -0.07260973, 0.02622226, 0.02355639, -0.06728406, 0.036105298, 0.052308053, -0.06950934, -0.037862495, 0.016644364, 0.060561914, -0.016685456, -0.059808593, 0.07088306, 0.06531863, 0.008413874, -0.102821335, -0.048122674, 0.20994523, 0.026443608, 0.061681904, -0.043788098, 0.03340921, 0.08791592, -0.13136657, 0.03816936, -0.06974087, 0.03430981, -0.03557403, 0.007121257, -0.06432624, -0.06319126, 0.043885257, 0.047502186, 0.031792004},
   {-0.09727975, -0.052714206, 0.056953218, 0.057381235, 0.015820656, 0.017418563, -0.03882765, -0.026230445, -0.07355307, -0.03263789, -0.07073577, -0.060842745, -0.12130469, 0.066026635, 0.12184815, 0.08668397, -0.011519218, 0.034972273, -0.032799594, -0.07223615, -0.045940317, 0.050534617, 0.08460278, 0.05408918, 0.058939513, -0.00030461446, -0.061812334, 0.100410365, 0.057929702, -0.036892645, 0.04917817, -0.008191642, -0.118126996, 0.033722863, 0.08399321, -0.06110993, -0.045878492, 0.13008846, 0.0446875, 0.06933377, 0.1757654, -0.046704758, -0.09708163, 0.06284178, -0.07201566, -0.012530938, 0.020790264, 0.05171951, 0.028226087, 0.024152616, 0.033826582, -0.0009371065, 0.0073264414, -0.03864904, -0.09222456, -0.05175028, -0.05584401, 0.07504051, 0.080384485, 0.025831698, -0.08140829, 0.047037605, 0.04593343, 0.18220808, 0.024502926, -0.009207965, -0.07227108, -0.03621781, -0.09298374, -0.003751493, 0.08205541, -0.01760162, 0.019880883, 0.053986963, -0.03318683, -0.04868672, -0.082597345, 0.03838441, 0.08017938, 0.050675638},
   {-0.005977582, -0.11809456, 0.20539933, -0.031184565, -0.089110136, 0.082207695, 0.04928844, -0.09232025, 0.02258501, -0.0024390693, 0.011787903, -0.030702632, -0.0051982426, 0.042895384, -0.04941062, 0.086333446, 0.07170852, -0.016240887, -0.15701398, -0.030178634, -0.15873176, 0.079568654, -0.010541573, 0.05937984, 0.25388774, 0.03674848, -0.035831366, -0.030912966, 0.07908527, 0.045515127, 0.0039840573, 0.008019225, -0.029557176, -0.044565987, 0.051753696, -0.015932593, -0.043235514, 0.30547363, 0.02425445, 0.21397308, 0.22230154, -0.120318756, -0.0414249, -0.09616554, 0.06840681, 0.0063471645, -0.051185813, 0.049005605, 0.048770655, -0.06192234, -0.056833997, 0.017610867, -0.087978266, -0.14324267, -0.012917622, -0.039199926, -0.09615618, -0.09178821, 0.068138234, -0.031160383, 0.08679164, -0.06026159, -0.034675542, 0.08619213, 0.07905338, 0.0027713887, -0.014959641, -0.03235999, -0.06271453, -0.110959195, 0.06527775, 0.061227746, 0.055326194, -0.0549841, 0.012449359, 0.030242257, 0.069668904, 0.19183509, -0.08948564, 0.088552915},
   {-0.08997026, -0.15379873, 0.18324226, -0.0038597505, -0.027865833, 0.11397046, 0.08204323, -0.042646874, 0.036163557, -0.03247036, -0.120215476, 0.032994863, -0.09877845, 0.051449083, -0.05506314, 0.10763195, 0.09034899, -0.049835917, -0.088854074, -0.007564765, -0.06139723, 0.112039804, -0.048789326, 0.04506489, 0.307239, 0.13991053, -0.1164733, -0.013025073, -0.009274647, 0.025742035, 0.008295147, -0.04568663, -0.14110857, 0.070879646, -0.073420756, -0.09693935, 0.022024933, 0.17228836, -0.064165264, 0.11257029, 0.09855467, 0.011476442, -0.0066856444, 0.055188175, 0.06655904, 0.023466341, 0.07988184, 0.0025997777, 0.021724243, -0.07854223, 0.031625368, -0.015650613, 0.025167545, -0.21588086, -0.05341529, 0.057753827, -0.041052766, -0.029083427, -0.0883924, -0.014624792, 0.02261293, -0.0608635, -0.057038113, 0.18839478, 0.026624471, -0.024073372, -0.047670703, 0.02726651, -0.0013257042, -0.20252067, 0.15087707, -0.010789064, 0.16148324, -0.036132082, 0.017372854, 0.035827257, 0.021850836, 0.17762415, -0.04475462, 0.19426246},
   {-0.0070417877, -0.1697278, 0.23204298, -0.029590981, -0.11402438, 0.096935935, -0.026754573, 0.054104943, -0.09042446, -0.13445719, -0.07062414, 0.008995305, -0.15680543, 0.029196888, -0.053448785, 0.016953016, 0.01641406, 0.069282405, -0.14453925, -0.075841874, -0.23613364, 0.21898687, 0.028221168, -0.02734573, 0.22306421, 0.15870956, -0.23374207, 0.032850668, -0.033798374, 0.03501475, -0.083916575, -0.0240027, -0.11224886, -0.0089182705, -0.058880474, -0.22117032, 0.004626609, 0.2725579, 0.08393652, 0.23133917, 0.23221569, -0.07827465, -0.010097875, 0.014619125, -0.004346551, -0.07973459, 0.023231007, -0.085371435, 0.08400066, 0.023745231, 0.08251854, -0.010707759, 0.08516775, -0.23012456, -0.011079227, -0.08488679, 0.054540694, -0.046516262, -0.038737595, 0.06383035, -0.06297304, 0.03368138, -0.04139549, 0.1806627, -0.032631963, 0.040693402, 0.047009062, -0.016458407, -0.017293677, -0.18976359, 0.15667123, -0.051588524, 0.048413295, 0.048954275, 0.04430129, -0.06726252, 0.03421189, 0.23963761, -0.02209471, 0.09919726},
   {-0.09281594, -0.32873082, 0.094595976, -0.09823945, -0.04014373, 0.1068081, 0.03416217, 0.010695994, -0.06808812, -0.051543336, 0.059714526, -0.056792907, -0.151531, 0.05252341, -0.072929665, 0.041413832, 0.027484782, -0.016362466, -0.08967527, 0.0063995384, -0.106250286, 0.13364583, 0.0777824, -0.06643711, 0.34436148, 0.1561413, -0.20000711, 0.07348003, 0.002676512, -0.031320605, 0.0024140768, -0.031514447, -0.16477406, 0.0828615, -0.06355261, -0.11531098, -0.07280378, 0.31405786, 0.014132051, 0.2763053, 0.06348198, -0.07210733, -0.0635324, -0.03100188, 0.07919609, -0.08656791, 0.012173548, 0.0131797185, 0.021772912, -0.10064079, -0.086267635, -0.024481203, 0.06835717, -0.17176154, -0.08878157, 0.029864311, -0.025704581, -0.012795072, -0.053489882, -0.068493284, -0.08329984, 0.0045453645, -0.08937647, 0.2013702, -0.023827113, 0.12630814, 0.0639779, 0.08852296, 0.049544968, -0.13885361, 0.16965327, -0.021809481, -0.075576656, -0.047964226, -0.07853115, -0.06309545, -0.09238378, 0.1977994, 0.020638166, 0.09828855},
   {-0.031970102, -0.2873858, 0.21110465, -0.053960323, -0.07245451, -0.0142894415, -0.006334238, -0.08057174, -0.0065680766, -0.1546516, -0.018413465, 0.0718198, 0.03777407, -0.021175064, 0.01860969, 0.05002136, -0.007287075, 0.0933978, -0.07856737, -0.07010744, -0.13537095, 0.043755434, -0.05371808, 0.08576716, 0.18508646, 0.10406451, -0.06250314, 0.14585944, -0.0048426664, 0.0111794965, 0.0063453824, 0.030346781, -0.0061827246, 0.050134826, -0.030533008, -0.043662373, -0.035035085, 0.19279687, 0.023072446, 0.23712459, 0.05880302, -0.09173958, -0.10367191, -0.062116306, 0.009983119, -0.031772025, -0.091843024, 0.024760047, 0.086803965, 0.0181852, -0.09091924, -0.05224644, -0.07978846, -0.107223675, -0.08363718, -0.07943021, -0.07497299, -0.05839031, -0.011765406, -0.03907373, 0.06240665, -0.0004245979, -0.0589353, 0.19756204, -0.021606289, 0.057426356, 0.09498078, -0.007346127, 0.029986598, -0.2168278, 0.1458374, 0.06960098, -0.13187598, -0.01167644, 0.047740195, -0.07800533, -0.048852924, 0.25078544, 0.014664383, 0.05047621},
   {-0.08902442, -0.19767435, 0.09064323, -0.0935554, 0.060186777, 0.034926035, -0.013690261, 0.0064268783, -0.08658294, -0.054889265, 0.061413016, 0.08537481, -0.0078693805, -0.059184447, 0.07097839, 0.08051447, -0.073158935, 0.074364744, -0.0023490705, 0.023794618, -0.062481087, 0.07602413, 0.04142957, -0.04275486, 0.10844693, 0.034219746, -0.041514847, 0.07253589, -0.01429874, -0.067830786, 0.057987798, -0.055165965, 0.018190958, 0.0141429305, -0.0976259, -0.15469351, 0.071371526, 0.20785458, 0.07643534, 0.2212013, 0.20790832, -0.09960111, -0.08180764, 0.076294735, -0.050533455, 0.068488695, -0.07532879, -0.032465484, -0.019400343, 0.0174066, 0.02923125, 0.043714546, -0.059896283, -0.09294544, 0.08379895, 0.08541116, 0.0368162, -0.09737054, -0.01596266, 0.0052312072, 0.095534466, 0.10367664, -0.069125585, 0.17715612, 0.082838066, 0.040287416, -0.08568219, -0.041082688, -0.07180002, -0.12709929, 0.071609445, -0.09049455, -0.17165115, -0.045850307, -0.018286292, -0.062041454, 0.06442208, 0.15783355, -0.0646934, 0.030935429},
   {0.07735274, -0.1688394, 0.03131195, 0.03357378, -0.10431727, -0.011037395, 0.043418303, 0.057309333, 0.03488906, -0.13240883, 0.120389864, -0.06529175, -0.13257076, 0.013862774, -0.04157278, -0.020439366, -0.02350204, -0.01478152, 0.036765214, -0.03396864, -0.09646665, 0.055129454, -0.043744877, -0.011580528, 0.22337598, -0.009397974, -0.023113986, -0.029998187, 0.02126959, 0.11480981, 0.05242603, -0.051687613, 0.029728452, -0.09125897, -0.05441905, -0.10437062, 0.013590216, 0.20004015, 0.085774764, 0.1896798, 0.18464231, -0.046757523, 0.03107523, -0.027739894, -0.058804624, 0.006626077, -0.024298325, -0.08814863, -0.004518761, -0.013560417, 0.057562076, -0.0762755, -0.022617212, -0.115369245, -0.027480152, -0.02735718, -0.0977132, -0.01782045, 0.08031053, 0.017237525, 0.028323889, -0.13090514, -0.13901117, 0.07415432, -0.06673358, 0.0061291615, 0.061179515, 0.050044693, -0.09350498, -0.041354783, 0.13498104, 0.0660319, -0.11798604, 0.043488648, -0.015560988, -0.030780137, -0.06349366, 0.037467066, 0.033537127, 0.17825334},
   {0.019883726, -0.05260387, 0.20330761, -0.053782836, 0.0044005197, -0.04482011, -0.05357389, -0.0037138097, 0.011439302, 0.020615315, -0.004965398, -0.08214441, 0.03491786, 0.09413444, 0.0192716, 0.012874916, -0.114833355, 0.05749599, 0.011487288, -0.04585499, -0.07221101, 0.16329187, 0.083536364, -0.019218063, 0.2134148, -0.047980975, -0.07284449, 0.094597414, 0.12064112, -0.0699749, 0.051309083, 0.0039454857, -0.015987711, -0.03500248, -0.019793183, -0.0798829, -0.047231585, 0.1927453, 0.056856133, 0.16691197, 0.15891305, -0.06711012, -0.13147773, 0.051882338, -0.037416294, 0.093935676, 0.03768567, -0.027004862, 0.031501573, 0.07447556, -0.028475448, 0.012320235, 0.018923154, -0.041274663, -0.075225055, -0.048656624, -0.026213465, 0.037515834, 0.024887607, -0.0110577, 0.0158754, -0.14542429, -0.11663328, 0.09603063, -0.09046677, 0.04989723, 0.06752416, 0.077983916, 0.092368476, -0.109656796, 0.09978425, 0.06871947, -0.08472075, 0.041756354, 0.03296352, 0.056047343, 0.045243368, 0.111291766, -0.08568522, 0.1492172},
   {0.0032267298, -0.083706275, 0.2344172, 0.0024642104, 0.028255334, -0.0910092, -0.040018413, 0.0369404, -0.09095414, -0.027870106, -0.038707692, 0.059531175, 0.041652244, 0.0409685, 0.03234129, 0.084797874, 0.040824708, 0.06700138, -0.0076905615, 0.07625576, 0.013395162, 0.12555785, -0.00010000914, -0.062382333, 0.14278005, 0.09112313, -0.06811012, -0.0021154091, -0.0072453264, -0.063556425, 0.07068419, -0.08497944, -0.114887424, 0.006443509, 0.02984503, -0.09211984, -0.025183493, 0.18966755, -0.07279778, 0.05757409, 0.07529279, -0.089084946, -0.060140222, -0.048122965, 0.0068507637, 0.04835979, 0.007935591, -0.042972833, 0.063063554, -0.052629817, 0.027348101, 0.08968498, -0.01746361, -0.010648431, -0.066512674, 0.03260407, 0.0712649, -0.03729352, 0.018231615, 0.0071667973, -0.061435666, -0.13848636, -0.022752697, 0.19273902, 0.016313344, 0.035735276, -0.066945195, 0.034504745, -0.020592324, -0.057900514, -0.0057313275, -0.07179419, -0.13293403, -0.070374385, -0.07379097, 0.03156223, -0.038424537, 0.086992525, -0.068070345, 0.16173336},
   {-0.05001842, -0.07294575, 0.25524592, -0.11216743, -0.011535127, -0.1061246, -0.125856, -0.052781377, 0.08267399, -0.034822207, -0.008664352, 0.005681021, -0.1063836, -0.011187084, 0.11024826, 0.015731769, -0.018282538, -0.056734517, 0.029081445, 0.006207769, -0.038648766, 0.14906646, 0.040997364, 0.043354873, 0.1341482, 0.11328891, -0.060876198, 0.042182077, 0.12335448, 0.011168632, -0.014070344, -0.0652438, -0.06395425, 0.007238819, -0.07570454, -0.070296064, -0.067601636, 0.1480288, -0.021836461, 0.05855716, 0.0997595, 0.04556972, 0.030859483, 0.018667586, -0.059723884, -0.09493842, -0.05248844, -0.071690574, 0.04469872, 0.050661318, -0.07995043, -0.021999786, -0.08741871, -0.08364029, -0.01008071, 0.07004355, 0.087194785, 0.0053881425, 0.015571088, -0.09006684, 0.024209216, -0.3091147, -0.09323126, 0.0263214, -0.028871015, 0.13320528, -0.037490673, 0.048099395, 0.0640588, -0.095725656, 0.1117312, 0.004147594, -0.06329103, 0.016294537, 0.011645822, 0.06832426, 0.008751763, 0.02775698, -0.053456143, 0.18986449},
   {0.07510892, -0.16650817, 0.21780014, -0.06296473, -0.16719776, -0.12918568, -0.12559329, -0.019868532, 0.015864404, -0.22759075, 0.09355968, 0.087534025, 0.05014374, 0.004210755, 0.084001854, 0.08594127, -0.119450144, -0.015487477, 0.0065387446, -0.08984164, -0.12563612, 0.24983488, 0.083032645, 0.046598714, 0.10071556, 0.16208676, -0.08836479, 0.15071015, 0.15752093, 0.034463782, 0.0829772, -0.071460575, -0.22047633, 0.03780586, -0.019498453, -0.12027889, -0.05384753, 0.1403393, -0.027603447, 0.032533396, -0.048278917, -0.052990664, 0.08192591, -0.058524348, 0.049970895, 0.07489266, -0.011202954, -0.012209732, 0.04305439, -0.028917665, 0.05294705, 0.05012038, 0.07327081, -0.16414152, -0.09371615, -0.0086012175, 0.07136845, 0.015614732, 0.016200826, -0.026172783, 0.0007847175, -0.393139, -0.14238676, 0.18374102, 0.054493107, 0.024238424, -0.057798516, -0.06308628, -0.07281631, -0.0038824193, 0.10767508, -0.09244256, -0.12782264, -0.08713771, 0.005434121, -0.0768969, 0.061161555, 0.16637096, -0.057720594, 0.00047172888},
   {0.0188183, -0.08768297, 0.12603727, 0.0095633315, -0.16354118, -0.17846103, -0.19492088, -0.054407082, -0.023684414, -0.098629355, 0.1289481, -0.050992105, 0.039566375, -0.014063269, 0.10840987, -0.04202846, -0.077970065, -0.05439948, -0.031906024, 0.029062256, 0.00041053086, 0.14534055, -0.062886365, -0.029090215, 0.14162743, -0.014413081, 0.0035646772, 0.15792239, 0.13615745, 0.013484826, -0.077162266, -0.032702606, -0.12176011, 0.033998113, 0.067872, -0.06474164, 0.007351564, 0.2186877, 0.021254105, 0.1190228, -0.03569309, -0.020235188, 0.1679711, 0.014992099, -0.036740635, -0.07890934, -0.033476852, -0.04502415, 0.013750178, 0.037947755, -0.0737115, -0.09643866, -0.055384856, -0.22478741, 0.036419604, -0.006980825, 0.029252952, -0.026462622, -0.009721473, -0.011214269, -0.05089867, -0.2699807, -0.06783136, 0.09794409, 0.06084203, 0.029616142, -0.000439515, 0.0078498125, 0.08636647, -0.07247439, -0.018520905, 0.016935369, -0.037139338, 0.007896557, -0.07067013, -0.032438427, -0.0103721935, 0.13227773, 0.037501484, 0.07378886},
   {-0.015091561, 0.0005681411, 0.1561052, -0.009309005, -0.14061394, -0.20868424, -0.17827393, 0.023686247, 0.038899045, -0.1964127, 0.029554127, -0.046260208, 0.12761483, 0.040553324, 0.15490669, -0.0020679974, -0.064425744, 0.065319605, 0.09073727, 0.04185635, 0.039932713, 0.20697002, -0.002620168, 0.013000744, 0.063057624, 0.11139208, 0.068167046, 0.12839156, 0.25109679, -0.10414031, 0.016096897, 0.047662377, -0.23378047, 0.031311233, -0.05013542, 0.12528214, 0.066467434, 0.12834395, -0.09560848, -0.008815044, -0.1015518, 0.06494363, 0.089906916, 0.062104467, -0.07509261, 0.04010286, -0.034165546, 0.011888997, -0.012106478, -0.047344238, -0.08774235, 0.017383391, 0.04510239, -0.11637273, 0.048218675, 0.072159104, 0.08098294, -0.094516166, 0.029166907, 0.026963526, 0.06806136, -0.16461203, -0.008248955, -0.06372001, -0.029332422, 0.07118655, 0.05674969, -0.014992189, 0.032019667, 0.022422796, 0.026042694, 0.04465241, -0.08795127, 0.007888066, -0.038064312, 0.013081737, -0.025573181, -0.035091896, -0.09413274, 0.047235172},
   {0.041754987, 0.008572441, 0.20876494, -0.033531882, -0.016301224, -0.099776626, -0.20420544, 0.037237745, -0.0032989802, -0.1676353, 0.09665466, -0.05156557, 0.041255236, 0.033370413, 0.11664094, 0.025131313, -0.09690439, 0.019484513, 0.16711304, -0.08990831, 0.11839181, 0.11608019, 0.034252428, 0.07923027, 0.07008514, 0.10179617, 0.17295317, 0.11505624, 0.1491489, -0.0864599, 0.086901866, 0.08625622, -0.11180899, -0.022290818, 0.0008861463, 0.13591707, -0.078846596, 0.20342916, 0.024575246, -0.10638582, -0.20726264, -0.036283012, 0.092377685, -0.056956127, -0.022903353, -0.025626332, 0.06638386, 0.07564974, 0.07003323, 0.065115154, -0.052901033, 0.07471179, 0.06994575, -0.093801804, 0.063977845, -0.012715456, 0.038624518, 0.005363597, 0.059414677, 0.03542312, 0.04803998, -0.33725005, -0.007783321, -0.08129101, 0.09409451, 0.11220088, 0.011734384, 0.06005991, -0.004285179, -0.030320985, -0.14992236, -0.07247593, 0.036149412, -0.091672935, -0.11375872, -0.06601483, 0.0902594, -0.15274915, -0.0336264, 0.0663459},
   {0.0701425, 0.06361048, 0.33592314, 0.112831056, -0.06293492, -0.25847915, -0.12493555, -0.061980158, -0.06297984, -0.2125869, 0.059785075, -0.015588395, 0.23099498, 0.07712097, 0.22021236, -0.114745446, -0.1271797, 0.030482583, 0.097029746, -0.059870295, 0.05749848, 0.27450505, -0.067810856, -0.08680918, -0.115372114, 0.0028161216, 0.18609798, 0.09431927, 0.27734, -0.08755782, -0.00846662, 0.016560463, -0.18784355, -0.041652538, -0.0916457, 0.09972342, -0.093172, 0.073738664, -0.015869329, 0.01759053, -0.17703703, 0.034434814, 0.15084225, -0.018961545, 0.04402522, 0.06568203, -0.07509507, 0.046965145, -0.087737955, -0.09960566, -0.043011308, -0.08049613, -0.09009824, -0.106320545, -0.08256237, 0.05661445, 0.0021662854, -0.06615071, 0.01721225, 0.049175, 0.07548427, -0.38470963, 0.00015163192, -0.06280814, -0.0014086291, 0.040333502, 0.019395567, 0.017099062, -0.041331314, 0.17558305, -0.15358727, -0.018972702, 0.06935144, 0.07045741, -0.065477364, 0.03950254, -0.030380607, -0.087888256, 0.08444211, 0.04604071},
   {-0.037048, 0.13985427, 0.27616414, -0.033465818, -0.18895778, -0.12242106, -0.2820619, 0.002389418, 0.081316836, -0.3172369, 0.21378238, 0.072393134, 0.109095655, -0.057018645, 0.21015897, -0.07434621, -0.1112056, -0.055503987, 0.106538735, 0.024007713, 0.042470235, 0.28951514, 0.04368048, 0.034778602, -0.07700495, 0.17844002, 0.3157013, 0.008063927, 0.21402927, -0.12730286, 0.07872935, 0.051081385, -0.17451735, -0.09259427, 0.024089491, 0.09594695, -0.06254803, -0.031688467, -0.09075532, -0.0030866023, -0.22461694, -0.055499993, 0.20993274, 0.08990117, -0.12875639, -0.040549356, 0.051849045, -0.057087958, -0.08736939, -0.083476216, 0.031634577, 0.08211119, 0.077330865, -0.18740217, 0.087017946, 0.040337708, 0.012142033, -0.026119031, -0.07196684, -0.0657319, 0.03694389, -0.459717, 0.056307822, 0.00085896644, -0.06855154, 0.083841085, 0.07362679, 0.06095293, -0.009480961, 0.0631943, -0.026963685, -0.09265251, 0.20739116, -0.014890625, -0.14919543, -0.016437776, 0.08678915, -0.07141187, 0.058668714, -0.14416514},
   {0.021791654, 0.015266661, 0.1167707, 0.01624266, -0.040578615, -0.22345635, -0.15603518, -0.03498509, 0.05589872, -0.22430272, 0.067104824, -0.037638407, 0.16362303, 0.053969257, 0.19060484, 0.06887391, -0.1585189, -0.0052408352, 0.117546335, -0.044280753, 0.1160606, 0.12153975, 0.05377362, 0.04325053, -0.16970058, 0.12595934, 0.08457315, 0.10960375, 0.12082672, -0.079969764, 0.058983367, 0.057862014, -0.05893148, -0.047464173, -0.06372223, 0.10205698, 0.07367997, 0.04677579, 0.08029068, -0.01067843, -0.226195, -0.028686622, 0.114685595, -0.048251048, -0.05255174, -0.044899523, 0.0024613813, 0.08930525, -0.054066993, 0.07531951, -0.07690898, -0.031723194, 0.080783516, -0.024166513, 0.0011342977, 0.0520809, 0.0053495937, 0.046712678, -0.04945057, -0.07431013, -0.058224685, -0.28284174, -0.03676271, -0.043516297, 0.024114795, 0.07587629, 0.010182551, -0.064219296, 0.050405003, 0.07526112, -0.100607626, 0.028459646, 0.34027204, -0.025211485, -0.028449886, 0.059175663, -0.05536324, -0.04909913, 0.06442978, 0.03788609},
   {0.038041044, 0.049981788, -0.21119802, 0.124650985, -0.077677004, 0.05518574, -0.025426183, -0.0096482355, 0.035166375, -0.08428963, 0.1857653, -0.06512138, -0.19893493, -0.0075296313, 0.085684374, -0.009873823, -0.0048745936, 0.09424753, 0.11520124, 0.036335472, -0.03049298, 0.12275542, 0.058661975, -0.0053548412, -0.20019363, 0.08727845, 0.035945904, 0.21050245, 0.060723756, -0.25579962, 0.0007389704, 0.07020179, -0.07586186, -0.02254615, 0.058719262, -0.197768, -0.097671874, -0.08080249, -0.08197423, 0.08039623, -0.013142981, -0.0067521096, 0.115729995, -0.03519764, -0.007942844, 0.029025033, -0.00038286299, -0.034923635, 0.07434893, -0.031436823, -0.041709498, -0.04110666, 0.090411164, -0.024039173, 0.03612376, -0.014402493, 0.027030472, 0.050054036, -0.042053506, 0.02179366, 0.018425636, -0.319859, 0.10972243, -0.14842738, 0.0875129, 0.13715182, -0.037676033, 0.062303815, -0.09045236, -0.060586367, 0.22833668, 0.079803206, 0.49786836, -0.03158316, 0.10699675, -0.049711965, 0.015759839, 0.002996108, 0.04555786, -0.13689443},
   {0.055959526, -0.094923794, -0.40712795, 0.12591356, -0.13811669, 0.23405077, 0.06976609, 0.03870277, 0.04163717, -0.08119563, 0.050195593, 0.028249966, -0.35790882, -0.05360332, -0.10249254, -0.051202092, -0.13753131, -0.006368719, 0.14258315, 0.039288774, -0.18002315, 0.10246415, 0.08097275, -0.04839559, -0.051061068, 0.023606334, -0.079029486, 0.14935921, -0.052766103, -0.091285236, 0.018898884, 0.06718179, 0.060674544, -0.044566236, -0.053621706, -0.30168724, 0.06623437, -0.0864607, -0.025280952, 0.1031896, 0.09584258, 0.0093942955, 0.09511325, -0.049509075, -0.0017589863, -0.07417638, -0.059642166, -0.0017039139, 0.0054144273, -0.033306975, -0.08392077, 0.07586073, -0.09944937, -0.051161204, 0.04338606, -0.025920136, -0.077042885, -0.045349214, 0.024820253, -0.002296791, -0.04985044, -0.34451163, 0.21314354, -0.16307043, 0.07642459, 0.19755262, -0.054978874, 0.058592062, -0.07503561, -0.17643015, 0.34521952, -0.09272492, 0.4750925, -0.007296291, 0.12683797, -0.012240268, 0.05250502, 0.25135157, -0.0007832418, -0.1931469},
   {0.020518553, 0.012940054, -0.27149114, 0.08014132, -0.22195192, 0.09932879, -0.14951599, -0.06348973, -0.025597956, -0.15140401, 0.0015210566, 0.034336645, -0.14143915, -0.07860851, -0.059366964, 0.095676124, -0.06349248, 0.08825701, 0.12477243, -0.08900728, -0.15038526, 0.1898922, -0.070578486, 0.07674291, -0.18718258, -0.006259991, 0.025961101, 0.23102245, 0.09510809, -0.31227314, -0.09377058, 0.034133766, 0.13727762, -0.06442147, -0.05903282, -0.22359598, 0.06264187, -0.07511157, -0.09532849, -0.10125803, -0.06833583, -0.051879644, 0.13628332, -0.04335798, -0.24030162, -0.05875539, -0.08394024, 0.032933436, -0.09888319, -0.037701044, -0.078710236, 0.058906563, 0.07839103, -0.13869497, 0.011552877, -0.01991708, 0.06599452, -0.0631974, 0.020639934, 0.0381029, -0.08395021, 0.0072867917, 0.26040265, -0.042613033, -0.015784852, 0.078527495, -0.026927587, -0.07317005, 0.066963695, -0.10040228, 0.17574501, -0.020071473, 0.2662151, 0.039837897, 0.30428058, 0.09243021, 0.0456807, 0.09333887, 0.06793787, -0.3030292},
   {0.058158025, 0.12838674, -0.1763876, 0.097971685, -0.21487023, -0.05155237, -0.09131505, -0.043821897, 0.0068126507, -0.040971007, 0.059236925, 0.07379931, -0.12827457, 0.08658127, 0.023232494, -0.0143758245, -0.14797989, -0.031238154, 0.12004188, -0.051963635, -0.043772172, 0.11232529, 0.03640888, -0.0144879855, -0.13699344, 0.123399384, 0.060573615, 0.08125275, 0.015409047, -0.20064943, 0.014374447, 0.043187097, 0.0072869314, -0.081749335, -0.08524648, -0.122607104, 0.079520784, -0.16454874, 0.024376947, -0.12857203, -0.17410159, 0.027580814, 0.1541485, -0.07461747, -0.22810328, -0.07398934, 0.06092491, 0.06900685, 0.09174542, 0.085715294, -0.063519835, 0.038791902, 0.036634307, 0.023861097, -0.04862866, -0.07556558, 0.08691139, 0.091419555, -0.06249662, -0.047850735, 0.048462577, 0.002329332, 0.25571725, -0.0026666438, -0.060346756, 0.14611664, -0.033340134, -0.03246194, -0.046951137, -0.049526557, 0.19106361, -0.06617572, 0.049031932, 0.006956356, 0.14032532, -0.00048786402, 0.057953373, -0.022378333, -0.009865023, -0.35063902},
   {-0.079940714, 0.13930036, 0.076763704, -0.034805182, -0.13312338, -0.09672558, -0.14885591, 0.01422677, -0.026875496, -0.108955435, 0.022202728, 0.016082492, 0.16756625, -0.09459293, 0.072320305, 0.053964533, -0.12556721, 0.04164525, 0.07875102, -0.06707751, -0.055573747, 0.14066923, -0.08331532, 0.06921325, -0.1954709, 0.10599075, 0.1697068, 0.16808665, 0.19692013, -0.21415956, -0.053072665, -0.0053908993, -0.13307905, -0.091354415, 0.0014373263, 0.106579416, 0.07703837, -0.017919907, 0.035031807, -0.05472163, -0.1855721, -0.06762074, 0.2836051, 0.06347017, -0.1509326, -0.010926463, -0.037678465, 0.021468619, -0.063267514, 0.050776325, 0.0006260872, 0.07627708, -0.07373095, -0.07262633, 0.023803653, -0.07639429, 0.060526505, -0.03727921, -0.0642205, 0.017129712, -0.010808654, -0.0376478, 0.06571133, -0.06294483, -0.07271359, -0.095349364, -0.028517937, -0.07594112, -0.010865286, 0.008709243, 0.12554626, 0.08897535, 0.087066405, -0.008237945, 0.0316504, 0.015454732, 0.059448097, -0.16736284, -0.025582764, -0.19000916},
   {0.0555091, 0.18835887, 0.25728032, -0.039104372, -0.19945148, -0.2298836, -0.33246553, -0.054953635, -0.056864537, -0.3333784, -0.07101667, -0.050886795, 0.14083862, 0.056987993, 0.23696455, 0.0516534, -0.08846997, -0.020757407, 0.097014606, -0.038616497, 0.12548348, 0.3226901, 0.08542111, 0.06610106, -0.16425149, 0.27263075, 0.35636336, 0.20691496, 0.1861611, -0.17945841, -0.028089354, -0.09202871, -0.18684243, -0.03329221, -0.03397945, 0.114252105, -0.08869196, -0.021981185, 0.061656646, 0.043665733, -0.33023965, -0.17927906, 0.34801617, -0.00067411386, -0.1248154, 0.09293152, 0.0019414574, 0.05109226, 0.054736823, -0.0040674033, -0.07572656, 0.048645154, -0.0065514627, -0.21831718, -0.02596263, 0.047394138, 0.03528415, -0.07184173, 0.036558934, -0.07636548, 0.0038477555, 0.0840069, 0.13514039, 0.011059038, -0.05274947, -0.02266778, -0.061856385, -0.0497296, -0.022840127, 0.07008573, 0.01597306, -0.09574272, 0.18245684, 0.048945636, 0.069576465, 0.0023889616, -0.021426203, -0.29682034, 0.009118967, -0.29908502},
   {0.013818192, 0.19717929, 0.2515183, -0.017272038, -0.12220406, -0.15422574, -0.24610281, 0.020572223, -0.028640997, -0.3270657, 0.046176847, 0.017860891, 0.32808495, 0.024359755, 0.31660187, 0.14616327, -0.124598205, -0.025645323, 0.015882265, -0.06891608, -0.017404458, 0.29261935, -0.032448, 0.063511245, -0.006619226, 0.30209312, 0.24101497, 0.025284996, 0.1325221, -0.18992753, 0.06892419, -0.093394056, -0.21453825, 0.072902694, 0.06045187, 0.16672735, 0.070921004, 0.12904078, -0.10074622, 0.13930625, -0.3239669, -0.17578796, 0.1262868, -0.09971732, -0.012299027, 0.04208771, -0.08058488, 0.04154484, 0.018684015, 0.047539253, -0.071490884, 0.0053624813, -0.023637047, -0.26293433, 0.022040827, -0.06728333, -0.083717965, -0.085805595, -0.057820257, -0.07785916, -0.027848773, 0.06205125, -0.048951827, -0.005074539, 0.04804965, -0.14220129, 0.046959296, 0.03531442, 0.01175309, -0.047250193, -0.09812339, -0.049907725, 0.11817752, 0.04564174, 0.0066439705, 0.062072374, -0.09545256, -0.18130998, -0.09861832, -0.14670421},
   {0.0020121292, 0.052710444, 0.35909384, -0.08119061, -0.11837074, -0.28352576, -0.3586648, 0.018593647, -0.09368575, -0.1783275, 0.0037306787, -0.07046087, 0.24162042, 0.052654274, 0.24089587, 0.10996922, 0.027891813, -0.060887698, 0.02080008, -0.027939416, 0.015581287, 0.21955536, 0.0021534413, -0.035696387, -0.008045601, 0.24245204, 0.14830822, -0.039813735, 0.21762769, -0.13840495, -0.048208185, 0.029390952, -0.26257965, -0.044131707, 0.050004803, 0.095413834, -0.03725832, 0.20873968, -0.040509086, 0.0120251225, -0.1654786, -0.23474354, 0.17542844, -0.014545949, 0.07531938, -0.09423023, 0.06012342, 0.08268922, -0.048405092, 0.08387967, -0.06958705, 0.054915328, -0.090046234, -0.24671729, 0.019521961, 0.03805751, -0.0887862, -0.058048498, -0.0346019, 0.08919658, 0.069208, 0.030294616, 0.019274704, 0.10261379, -0.023428105, -0.099761575, 0.05964114, -0.041635558, 0.017114207, 0.0725361, -0.0797349, 0.020371992, 0.06718285, 0.027576502, -0.17273536, -0.05129332, 0.025564037, -0.14555715, 0.08328343, 0.07847405},
   {-0.09133341, -0.11636071, 0.2874404, -0.06454424, -0.038570166, -0.11309043, -0.18192731, 0.05839108, -0.05487224, -0.26354486, 0.0101631265, 0.043957524, 0.2360905, 0.09424313, 0.119504444, 0.08475722, -0.029224321, 0.04694485, -0.047174912, 0.09272665, -0.052079704, 0.134665, 0.023914762, 0.08555749, 0.0031944977, 0.0772333, 0.19883576, 0.050269872, 0.08799063, -0.007128895, -0.07170834, -0.056663323, -0.1850789, -0.093031906, -0.053004857, 0.08723048, 0.004189639, 0.16013747, -0.07341212, 0.0933728, -0.17375743, -0.095464654, 0.0515233, 0.06452297, 0.026684484, -0.07024059, -0.046560273, 0.047319748, 0.0018290962, -0.09794005, 0.016285166, 0.0101032965, -0.052221693, -0.16280857, -0.09821705, 0.021661695, 0.040848687, -0.07407459, 0.039919622, -0.08160115, -0.029429607, -0.0046283966, -0.035327107, 0.10382052, -0.021823153, -0.011225124, 0.072229, -0.0048646764, 0.0072412193, -0.06706506, 0.009008663, -0.0010633799, 0.1374316, 0.0111123705, -0.13427274, 0.03871187, -0.023195494, -0.060565706, 0.002840128, -0.0032043175},
   {-0.0014341935, -0.17519905, 0.18586871, 0.060810015, -0.12542777, -0.08507944, -0.19121665, 0.009602998, 0.083187126, -0.27896616, 0.14418451, -0.069296055, 0.10217013, -0.08114904, 0.18372467, -0.03477293, 0.0017892066, -0.036381766, 0.06588369, -0.05267785, -0.090936765, 0.28575152, -0.03343599, -0.023068385, 0.05888335, 0.11228849, 0.063598394, 0.037938498, 0.25981995, -0.12740989, 0.0021047045, -0.04872226, -0.22597344, -0.035418373, 0.0721521, -0.101639934, -0.04156546, 0.25987557, 0.06701802, 0.028109998, -0.026657784, -0.056798685, 0.055843666, 0.030434782, -0.02779558, -0.07806915, 0.061258845, 0.083477296, -0.014440394, -0.036611445, 0.010303639, -0.07877016, 0.07046349, -0.21822406, -0.04982354, -0.049643107, 0.035108704, -0.060169253, -0.027416386, -0.024764415, 0.05268628, 0.038967967, -0.06470283, 0.18490595, -0.051817916, 0.054937728, 0.036136545, -0.030373901, 0.08161708, -0.04150165, 0.050141, 0.05199094, 0.21919253, 0.08556954, -0.120839834, 0.042947672, 0.049899638, 0.04737372, 0.061271634, 0.08090267},
   {0.019473476, -0.13432144, 0.3077658, -0.077401064, -0.13765311, -0.020787384, -0.048238445, 0.026406152, -0.068827845, -0.18483855, 0.143348, -0.020437907, 0.03678099, -0.08207982, 0.1146129, 0.0980313, -0.13834438, -0.018318243, 0.021345628, -0.014051083, -0.051644135, 0.10533427, 0.09503084, -0.04180523, 0.07416872, 0.040006317, 0.02052363, 0.018818943, 0.15979703, -0.030486284, 0.08759167, 0.038885415, -0.15104291, -0.045482233, -0.09632019, 0.0034485045, -0.006609744, 0.21931209, 0.056209624, 0.021052446, -0.011439197, -0.09786678, 0.042244215, 0.020460982, -0.13308376, -0.072680876, 0.08432978, 0.024260296, 0.062282618, -0.0026358229, 0.052288793, -0.016367536, 0.036987152, -0.26872265, -0.0147805605, -0.05220116, 0.044691853, 0.074439585, 0.008113325, -0.07629128, 0.016943812, -0.014470644, 0.018417245, 0.14602435, -0.06579563, 0.0089799445, 0.012101019, 0.022483753, -0.0056895018, -0.028486334, 0.0026087018, 0.09112099, 0.10980798, -0.035532046, 0.0048113214, 0.08614462, 0.017556809, 0.02040093, -0.05220138, 0.058032613},
   {0.053124335, -0.065874375, 0.14470887, 0.0139212515, -0.14027515, 0.047379278, -0.14999107, -0.061645307, -0.014976023, -0.17225689, 0.069870256, -0.012108601, -0.07926078, 0.014873661, 0.17021355, 0.049501482, -0.01809837, 0.09294235, -0.0033509566, 0.0028454694, -0.11227453, 0.14624956, -0.021465577, -0.038183592, 0.17278424, 0.025763832, -0.03466927, 0.07724781, 0.17011856, -0.021643858, 0.037855167, 0.0024976206, -0.15433817, 0.047218863, -0.076272935, 0.04113375, -0.067554146, 0.19161694, 0.05737359, 0.10567141, 0.11754113, -0.036298484, 0.04833907, -0.025838753, -0.017096052, 0.06727048, -0.017762296, 0.08965616, -0.015984438, -0.030246055, 0.07068164, -0.078427956, 0.00122364, -0.23404808, -0.012618516, -0.0537846, 0.031305037, -0.022703322, -0.08864328, -0.1013066, 0.03628411, 0.046384584, -0.0007870639, 0.23213963, -0.07431187, 0.08731613, 0.048864786, 0.038634896, -0.009375438, -0.04302728, 0.14317057, -0.012801592, 0.15152438, 0.054110423, -0.103753544, 0.011814132, -0.00790878, 0.14557514, 0.015216669, 0.0072943666},
   {0.012848125, -0.15899475, 0.07500263, -0.074324794, 0.032506984, 0.008485477, -0.10057254, 0.04242986, -0.03845645, -0.06551262, -0.033688158, -0.032133672, 0.0152790835, -0.068607815, 0.09665148, -0.069384605, 0.052614838, 0.01459799, 0.0026299697, -0.08349242, -0.041854218, 0.17577556, -0.03862751, -0.015340575, 0.18105724, 0.051239043, -0.1491815, 0.13233621, 0.010149197, 0.0148985125, 0.089425676, 0.0036839654, -0.089735895, -0.07602518, 0.07944437, 0.02600424, 0.007959137, 0.18502815, 0.082722954, 0.17014417, 0.061203443, 0.017607639, 0.019353727, -0.08417371, -0.042167343, 0.00026281178, 0.08456419, 0.047543008, 0.055030625, -0.07722935, -0.03302969, 0.024448575, 0.09003486, -0.14517307, -0.08090799, 0.016255544, -0.08671652, 0.08656137, -0.08832812, 0.038029812, -0.06452477, 0.023351151, -0.09878427, 0.08272377, -0.004026592, 0.027879892, 0.044895478, -0.096888505, 0.010976128, -0.14290854, 0.026709957, 0.024023734, 0.0068285675, -0.0658804, 0.05669901, -0.06132672, -0.06262896, 0.05219078, 0.04628226, 0.08602377},
   {0.032854788, -0.048548974, 0.123240635, 0.09142902, -0.049251113, 0.02640056, -0.008138793, -0.07906844, 0.0899486, 0.0023782104, 0.081825316, -0.089422636, 0.014472625, 0.06116139, -0.014669354, 0.022881934, -0.06588335, -0.043267503, 0.0033386182, -0.028439555, -0.051177755, 0.10675348, 0.058216132, -0.03892702, 0.12887074, -0.033089742, -0.13645606, -0.036005918, 0.036309343, 0.05262128, -0.054401416, 0.029154599, -0.11976992, 0.051039655, 0.08042119, -0.0033678971, 0.002313441, 0.21830744, 0.032589253, 0.11424523, 0.10212965, 0.0037607152, -0.059329305, -0.011565514, 0.010851144, 0.024661347, -0.052120127, -0.0017954474, 0.059092954, -0.0010756073, 0.04700605, 0.029498229, -0.035545457, -0.13197266, -0.028199472, -0.053680774, 0.046286, -0.07682338, 0.008045062, 0.011917179, -0.07894215, 0.035083394, -0.0722982, 0.116252705, 0.03780251, 0.067380816, -0.014804038, 7.779195e-05, 0.02831944, -0.09372035, -0.037587136, -0.040115107, -0.025730776, 0.008992518, -0.039049525, -0.06363393, -0.0055212057, 0.067329995, 0.0051100207, 0.107013695},
   {-0.040189274, 0.03254177, 0.18531348, 0.10795606, 0.071240745, 0.009471269, -0.0028053478, 0.07858867, 0.09030695, -0.042844124, -0.0036930633, -0.038731538, 0.019660773, 0.09076505, 0.07903164, -0.07547798, -0.020512108, 0.050718658, -0.04796395, -0.023493567, 0.067837365, 0.0103723, -0.06900358, 0.07116656, 0.16236466, -0.029781276, -0.12442922, -0.06361842, -0.01968467, 0.035287928, 0.044198275, -0.06801313, 0.04228523, -0.02867732, -0.021968296, -0.057574086, -0.008740037, 0.20086709, -0.09529185, 0.08508515, 0.026300365, 0.063566454, -0.027069673, 0.056959018, -0.093507215, 0.035875432, 0.049158342, 0.013051777, 0.014115476, -0.041052375, 0.014132246, -0.015837105, -0.021522762, -0.06452088, -0.025836544, -0.09293252, 0.06788928, 0.025767136, -0.05509739, -0.06646044, -0.02160535, -0.032849915, -0.076807424, 0.056722578, -0.07745063, 0.084369205, -0.03679046, 0.028910214, 0.021974966, -0.05695919, -0.01994229, -0.035963982, 0.032448985, -0.025059663, 0.03212792, 0.009120062, -0.0026798039, 0.12771668, -0.06128697, 0.07689784},
   {0.024557551, -0.10386009, 0.11437728, 0.0307358, -0.06786396, 0.05445616, 0.08539384, 0.025528131, 0.07525666, -0.012275588, 0.013379832, -0.100894995, 0.0029053253, -0.07183017, 0.059049822, -0.042162187, 0.021009253, 0.056859963, -0.011823239, -0.090372175, -0.11588805, 0.0044651045, -0.009248026, 0.07061852, 0.18304385, 0.012173351, -0.11600925, -0.029819904, 0.059905045, 0.09845421, -0.10041699, -0.05994121, -0.049484126, 0.053255416, -0.018601326, -0.052401222, -0.0020921787, 0.23927471, 0.0058869086, 0.12723425, 0.19796486, -0.04569664, -0.12889601, 0.043758847, -0.091653384, -0.02765061, 0.03281138, -0.06804709, -0.018314544, 0.07551317, -0.0047770813, 0.019833492, -0.08965027, -0.13450712, -0.028350802, 0.08450429, 0.015610209, -0.047144193, -0.095219746, -0.04153109, -0.06083448, 0.013588632, -0.08619974, 0.017602995, 0.06840324, 0.14607328, 0.020556731, 0.010823414, 0.050682284, -0.1287663, -0.030594923, -0.071960896, -0.00580187, -0.0056029465, 0.018461648, -0.011629231, -0.017328713, 0.07718209, -0.0029191228, 0.030628316},
   {-0.09480299, -0.21308334, 0.2068716, -0.112420626, 0.012706996, 0.07810846, -0.03483172, -0.05722018, -0.02623647, -0.046548333, 0.10321636, 0.0856756, 0.035532787, -0.050470777, 0.07406152, 0.106037736, -0.0034274773, 0.051686503, -0.012570481, -0.028989011, -0.1383612, 0.012709469, -0.029429168, 0.021299757, 0.2671413, 0.054245863, -0.096421696, 0.104311764, 0.03296277, 0.027868414, -0.09295411, 0.045026213, -0.027679445, -0.08087942, -0.07498399, -0.1476501, -0.09440292, 0.28628522, 0.01957493, 0.19346343, 0.05881703, 0.03615376, -0.14532496, 0.056905854, 0.11774652, -0.08274111, 0.030143, -0.08424789, -0.038991354, 0.026978498, 0.08038608, -0.09643222, -0.08600581, 0.003738926, -0.03322332, -0.05151999, 0.073103875, 0.044352617, -0.09426231, -0.013109346, 0.03855423, -0.112322696, -0.13898341, 0.1581953, -0.030761622, 0.019531634, 0.07293792, -0.08368635, 0.05625183, 0.018696666, 0.08777111, -0.074379146, 0.093691126, 0.07662828, -0.014955481, -0.022280462, -0.056543212, 0.086368024, -0.03816624, 0.08925186},
   {-0.0025486348, -0.1611027, 0.14082956, -0.055245534, -0.07385714, -0.020757375, -0.018163435, 0.036851414, 0.034382496, 0.077217534, 0.08157141, -0.05859352, -0.12571973, -0.08813187, -0.02771931, 0.119580805, 0.09052727, 0.083576106, -0.025161967, 0.024570853, -0.04241733, 0.04783987, -0.03543719, -0.08999251, 0.19452147, 0.07848307, -0.019887116, 0.050157417, 0.082317345, -0.038130034, 0.033398896, -0.057388864, -0.056865245, 0.07947585, -0.080702014, -0.041127037, 0.04656541, 0.25500852, 0.0043708174, 0.18706653, 0.13638304, 0.03956962, 0.009320564, 0.033159066, -0.0058267983, 0.08423377, 0.0028892457, 0.027675493, 0.06966324, 0.030447887, 0.084247954, 0.043041028, -0.043312103, -0.04598782, -0.025562884, -0.037124794, -0.08285783, 0.01900045, 0.004429586, 0.060852543, 0.009709254, 0.044029582, -0.030429197, 0.07325631, 0.016979903, -0.044074845, -0.07864172, 0.04777822, 0.026766822, -0.12899022, 0.14159705, 0.08768589, 0.044508893, 0.015055088, 0.0144377565, 0.012703843, 0.065612905, 0.19298047, 0.035563774, 0.11024827},
   {-0.058819298, -0.23501025, 0.12546706, 0.046625994, -0.05324536, 0.04485378, 0.092175074, -0.011537322, -0.062311843, 0.052208003, 0.03744504, 0.0884421, -0.05294616, -0.079652324, 0.06997753, 0.004913019, 0.07334179, 0.0027404726, -0.09939768, 0.013972661, -0.12712434, 0.099003814, -0.06888216, -0.036832742, 0.1256682, 0.101571545, -0.16609831, 0.0045541865, -0.026121857, 0.0257227, -0.031214084, -0.041787423, 0.02179153, -0.09801123, 0.08565161, -0.13203602, 0.071551494, 0.1387084, -0.051577695, 0.16103618, 0.06834435, 0.061560936, -0.14706765, -0.08090074, 0.07469189, 0.06016407, 0.086041965, 0.047390215, -0.015082944, 0.025035894, 0.006138213, 0.017879648, -0.08165403, -0.064547494, 0.078296706, -0.08139207, 0.02559649, 0.068348326, -0.065272495, -0.065266386, -0.025189161, 0.011940078, -0.07132049, 0.15251935, 0.03870312, 0.054137602, 0.030861644, -0.05432265, 0.0039136037, -0.018999435, 0.022673134, 0.0878022, -0.08468173, -0.07120627, 0.057990205, 0.05246342, -0.060168155, 0.052525885, -0.09706742, 0.082856},
   {-0.025624018, -0.13989735, 0.087869346, -0.03114473, -0.057217386, 0.002332246, 0.040073834, -0.001214278, -0.05492886, -0.056594685, -0.06768663, -0.07688831, 0.013899745, -0.041283477, 0.029437888, 0.021414557, 0.04630006, 0.060336404, -0.15062363, 0.06621622, -0.048772726, 0.16138144, -0.06152637, -0.08856048, 0.23667015, 0.024794448, -0.1105913, 0.04032861, 0.06360038, -0.011494313, -0.010051527, 0.087190315, -0.13736595, 0.002150955, -0.09691764, -0.16428216, 0.02478709, 0.14543644, -0.09029216, 0.17053257, 0.19231898, 0.08744727, -0.06483047, 0.088815995, -0.05009012, -0.056385767, -0.06610131, 0.02303486, -0.086449124, 0.04782793, -0.053805068, 0.07676912, 0.01685387, -0.15293285, -0.016241489, 0.015289685, 0.025945116, -0.054048043, -0.06239645, -0.04474293, -0.05328075, -0.11355242, -0.022993354, 0.14064652, -0.033051692, 0.054330733, -0.02926565, 0.018900909, 0.06345234, -0.109134994, 0.06129547, 0.05490798, -0.010497368, 0.06267642, -0.039584715, -0.029873095, -0.061045308, 0.2040933, -0.033084325, 0.18017446},
   {0.0029673087, -0.15029562, 0.112011366, -0.08592566, -0.06439086, 0.018573381, 0.141584, -0.04126061, -0.020660724, 0.016471887, 0.11583625, 0.033896346, -0.073034324, -0.015929505, -0.062416676, 0.04737535, 0.05836746, -0.077688426, -0.00888892, 0.038122572, -0.008232521, 0.07401214, 0.047620244, -0.028748555, 0.15451336, -0.07650893, -0.036635213, -0.045377314, 0.045644503, 0.07940132, 0.063417405, -0.040561214, 0.03334236, -0.05493255, -0.09953992, -0.0057433685, -0.049064394, 0.23125423, -0.092781164, 0.17058025, 0.18575417, -0.0064513884, -0.14627455, 0.060485005, 0.0053180973, 0.03340616, -0.02245047, -0.01775266, 0.08545037, -0.08841586, 0.044204645, -0.035743523, -0.032748558, -0.016625665, 0.023510275, -0.08591831, -0.007027172, -0.057000626, 0.07493896, 0.053046435, 0.019019455, -0.118995845, -0.0952825, 0.088149436, 0.082314216, 0.13045807, -0.020581756, -0.03336676, -0.012123384, 0.0008237035, 0.14946724, -0.09738832, -0.009185374, -0.056517072, 0.055107072, 0.056993194, 0.08683098, 0.134754, -0.018295916, 0.16522023},
   {-0.074502304, -0.15039358, 0.2084474, 0.09012726, 0.04489042, 0.010692959, 0.14403138, -0.01662047, 0.03446275, -0.06744801, 0.1531547, -0.008518013, -0.06897679, 0.0041091517, 0.11286198, 0.05662111, 0.0025933748, -0.070835434, -0.071246065, -0.076527, 0.049035482, 0.12462374, 0.084739454, -0.06028513, 0.07093234, -0.01607483, -0.17470725, -0.06281225, 0.109896906, -0.039266292, 0.02426245, -0.02215206, 0.042779844, -0.07784628, -0.004857295, -0.14466995, 0.023724932, 0.11960863, 0.079468705, 0.081613876, 0.099237, 0.14996418, -0.06283665, -0.06280753, -0.0018071595, 0.016140327, 0.056936987, -0.038054302, 0.033845954, 0.06917917, -0.087891676, 0.06632786, 0.008221461, -0.041553684, 0.0857986, -0.083035596, -0.026712667, 0.08772298, -0.021429785, -0.008928674, -0.048866875, -0.2851679, 0.047463164, -0.022904785, 0.07400466, 0.12886274, -0.049678326, 0.045740962, 0.037467234, -0.011857904, 0.08583671, -0.08172872, -0.075890906, -0.05545439, -0.009826255, 0.07752318, 0.0864171, 0.07271142, -0.08598537, 0.023228532},
   {-0.033300895, -0.108131684, 0.18157881, 0.04226952, 0.048831787, -0.009224546, 0.09085768, 0.038961064, -0.08183631, -0.10027772, -0.044594117, -0.07511116, -0.07139599, -0.024922311, -0.07799607, 0.0832688, -0.10155276, 0.029383428, -0.12665759, -0.011090119, -0.014557892, 0.04021716, -0.088264346, 0.08357591, 0.13883273, -0.04921461, -0.07624162, -0.008221313, 0.08417357, 0.107046105, 0.086906485, 0.07541816, -0.038442604, -0.058446456, 0.022092313, -0.15189566, -0.08511717, 0.118227996, -0.05239461, 0.13608648, 0.03871598, -0.014113275, 0.031834964, 0.07634706, -0.011609722, 0.021672092, -0.017880566, 0.008922124, -0.012148017, 0.019627688, -0.07721728, -0.048781343, 0.048994523, -0.118956625, -0.080896325, -0.028735992, 0.034673892, 0.074136816, 0.04314009, -0.072651185, -0.029471464, -0.16786082, 0.011376978, 0.14361914, 0.024406545, 0.1551752, 0.08083186, 0.08529795, -0.009739235, 0.021242833, 0.1510577, -0.0132425325, -0.13127714, -0.07885168, -0.090179086, -0.035480898, -0.03402836, 0.07812354, 0.030804105, 0.019545944},
   {-0.02014565, -0.23180749, 0.15384847, -0.09990878, -0.00087094627, -0.013654587, -0.09166285, 0.08648202, 0.03812694, -0.12477909, 0.0026051507, 0.07014948, -0.06497646, -0.078572534, -0.029653227, -0.019143853, 0.0041784835, -0.031633303, 0.037839256, -0.03747496, -0.008638419, 0.12883621, 0.0014883429, 0.08418063, 0.110265754, 0.06949445, -0.017947657, -0.025039064, 0.08042038, 0.033340197, -0.019798828, -0.051134717, -0.15434211, 0.043995857, -0.047520004, -0.15369363, 0.032922294, 0.3059276, -0.0198326, 0.15596543, 0.0705504, 0.035452247, -0.06856476, -0.025726024, -0.02346713, -0.030323967, 0.09118157, -0.053997427, 0.07007436, -0.09627456, -0.049848888, 0.055938397, -0.066365935, 0.0075513753, 0.07717814, -0.0010697056, 0.073226, 0.026380515, 0.007192515, 0.0018540578, 0.019655913, -0.20502277, -0.13749075, 0.16618173, 0.07192429, 0.012348403, -0.004812661, -0.04901014, -0.061743714, -0.018018603, 0.13041705, -0.09497889, -0.093685724, -0.07886982, 0.061649486, -0.06823428, 0.045751266, 0.16437836, -0.048054956, 0.105246864},
   {-0.09658051, -0.06505312, 0.1351631, -0.060873337, -0.08276368, -0.05418558, 0.0036133449, -0.06554454, 0.03848473, -0.012714244, 0.0583454, -0.047288552, -0.03287933, -0.027974866, 0.014710909, 0.098504566, -0.047958083, -0.06360379, -0.024578959, -0.0435965, -0.14295745, 0.087229624, -0.0868253, -0.07863332, 0.21914051, 0.0054520513, 0.054283243, 0.05131823, 0.110139556, 0.07475065, -0.100484684, 0.03957513, -0.1465288, -0.015333307, -0.06471937, -0.14872159, -0.07481942, 0.17680937, -0.07559515, 0.05454321, 0.12367678, -0.041132767, 0.08734371, 0.0625733, -0.03411974, -0.089071065, 0.0015010908, -0.0115139345, -0.045549832, -0.10116992, -0.047291335, 0.017971972, -0.07057617, -0.11318153, 0.033931807, 0.005188285, -0.045788337, -0.004049138, -0.0028195456, -0.09088806, -0.05914142, -0.3592962, -0.13358945, 0.1253668, 0.069747396, 0.097757064, -0.008119172, -0.046713304, 0.0032152683, -0.05946113, 0.055449385, 0.007900929, -0.15334605, 0.05516071, -0.0063371686, 0.022295326, 0.042335853, 0.054162897, -0.060647003, 0.1144249},
   {-0.013046429, -0.11332508, 0.1933611, -0.048219047, -0.08210741, -0.111654565, -0.10134419, -0.023913952, -0.08031875, -0.13665344, -0.002674157, 0.0033374692, 0.10010818, 0.047464214, 0.136027, 0.11779599, -0.110049166, -0.013259359, 0.024492692, 0.008370073, -0.03795475, 0.19032769, 0.069884695, -0.0032854548, 0.13763252, 0.045028023, -0.09238834, 0.09926665, 0.21490072, 0.04693519, 0.07718387, 0.07924301, -0.18183258, -0.09168815, 0.03003059, -0.009455128, -0.070508525, 0.3455869, -0.023493156, 0.19349222, 0.094413266, -0.0738683, 0.030705163, -0.020025678, 0.019877424, -0.08671266, 0.038983576, -0.012921336, -0.02850654, -0.020062711, 0.08806745, 0.05231241, -0.060756717, -0.22505294, 0.06723262, 0.009018334, -0.046984114, 0.034853328, 0.06253096, 0.03683603, 0.0076759234, -0.35099584, -0.014814313, 0.05693511, 0.025390841, -0.025458122, 0.013550445, -0.08492855, 0.010172829, -0.05379489, 0.09230638, -0.028617207, -0.04582547, 0.07805328, -0.047914, -0.065185145, -0.085346505, 0.10834048, -0.092067905, 0.039104886},
   {-0.04366385, -0.045928713, 0.19837679, 0.028899206, -0.037806723, -0.022712657, -0.1955327, -0.001331007, 0.03759448, -0.2758589, -0.016081585, 0.032762058, 0.07371657, -0.080368996, 0.05763026, 0.07705165, -0.101004876, -0.004763603, 0.059827678, -0.058880147, -0.14719439, 0.24762627, 0.006887451, -0.096406735, 0.0416451, 0.05835676, 0.03957502, 0.1710181, 0.10338041, -0.02527072, 0.08865039, -0.08310213, -0.28782704, -0.033364017, -0.060530048, -0.0397696, -0.02824412, 0.14955564, -0.0813921, 0.14628099, -0.11418667, -0.14043319, 0.013903943, 0.0041996557, 0.013082393, -0.035233866, -0.06379603, -0.04912967, 0.060930308, -0.069212, 0.011887893, 0.028164627, 0.028635636, -0.1124191, 0.027105834, 0.045725077, 0.018726587, -0.01358062, 0.033551164, -0.014489031, -0.0763059, -0.30270076, -0.056826264, 0.17012069, -0.079981826, 0.099248976, 0.035125665, -0.051239442, -0.022228658, -0.053935185, -0.02148937, 0.08734846, -0.073079735, 0.05771762, -0.035702523, 0.06546522, -0.046897314, 0.016029956, 0.07051465, 0.10705377},
   {0.072078004, -0.01779116, 0.31328875, -0.087405115, -0.1883381, -0.18113124, -0.15971142, 0.07064883, -0.029382275, -0.14763768, -0.020657986, 0.009384995, 0.12987225, 0.005086474, 0.17578688, -0.05887376, -0.12200125, -0.07321037, -0.05067996, -0.02704165, -0.04853513, 0.21007511, -0.07500809, -0.013251426, 0.020775681, 0.20616579, 0.062153723, 0.1289055, 0.17735013, -0.15527116, -0.039757833, -0.063472286, -0.16284414, -0.0663166, 0.059510943, 0.026664441, -0.007877483, 0.16440248, -0.007887354, -0.014776194, -0.09514992, -0.08800773, 0.1679748, -0.061894182, -0.09118058, 0.081166156, -0.09438507, 0.05322064, -0.08721761, 0.031992104, -0.09142414, 0.046950042, 0.0038252561, -0.16742581, 0.011944442, -0.037102625, 0.07342838, 0.04887752, 0.07389394, -0.012366004, 0.050508656, -0.21518488, -0.030274099, 0.017210504, 0.07550297, 0.123314925, -0.0076469346, 0.08483039, 0.026720598, -0.05652573, -0.043705393, 0.021148797, -0.12832916, -0.08248824, -0.13704471, 0.08729882, -0.009236152, -0.12115545, -0.01330652, -0.015201015},
   {-0.066441245, 0.05681863, 0.33863607, 0.020200813, -0.14053312, -0.2668778, -0.25393468, -0.06688658, 0.08701147, -0.13691045, 0.023937585, -0.08431696, 0.2054182, 0.08624945, 0.21085364, 0.009812142, -0.1385692, -0.057009228, 0.08218794, -0.030113097, 0.11295377, 0.31920063, 0.013785005, 0.054779146, -0.07014273, 0.20725258, 0.29796684, -0.0009813895, 0.28187636, -0.16763936, 0.047073763, 0.053176817, -0.32345077, -0.0657419, -0.09038131, 0.14901929, -0.03094833, 0.16176516, 0.07040372, 0.045802053, -0.22974995, -0.15902065, 0.07910364, 0.040150095, -0.053346064, 0.0024923906, 0.07122744, 0.007725634, 0.06988061, -0.059144836, 0.007267572, -0.059833083, 0.029836085, -0.25068516, -0.033924475, 0.07340668, -0.049995117, -0.017176932, -0.065717995, -0.09645636, -0.09521078, 0.15476368, -0.13632134, 0.055984057, -0.08620906, 0.00909658, -0.005562871, -0.080082506, -0.07883489, 0.097004525, -0.0027869698, -0.0024074789, -0.011132016, 0.025799347, -0.16099937, 0.018595986, 0.06457928, -0.123094566, -0.08977843, -0.046139758},
   {0.0072163087, 0.12976073, 0.2064549, -0.14343524, -0.2813691, -0.2517773, -0.40312743, 0.07002171, -0.07029414, -0.26332065, -0.049800374, 0.07898895, 0.27011046, -0.031378955, 0.29549432, -0.027640551, -0.12984343, 0.033000164, 0.081873946, -0.08751628, 0.09830541, 0.36056998, -0.08542968, -0.037828397, -0.21097213, 0.1111299, 0.35385817, 0.17714438, 0.16520683, -0.06777367, -0.09483464, -0.051566143, -0.21419403, -0.018823463, 0.07568244, 0.12695545, 0.009221263, -0.02555081, -3.283764e-05, 0.03609919, -0.28296593, -0.21296284, 0.18217467, 0.037438102, 0.0061594327, 0.04703278, 0.077222936, -0.016145092, 0.082907826, -0.088666596, -0.07720196, 0.064494744, -0.016461167, -0.25842068, 0.05464415, -0.017246494, 0.058000255, 0.034267187, -0.06730589, -0.020222314, 0.023627162, -0.066025816, -0.006258251, 0.025187163, 0.058613263, -0.11418411, -0.06618191, 0.014876849, 0.026678078, 0.049650386, -0.017742703, 0.06866876, 0.007998038, -0.093908995, -0.10073407, -0.0903982, 0.087076165, -0.1630128, 0.06498295, -0.048562065},
   {-0.09260551, 0.1169736, 0.22305548, -0.038236216, -0.229644, -0.23531188, -0.27807516, -0.095034555, 0.07397654, -0.34765112, 0.004355564, 0.0677316, 0.28658283, 0.008430362, 0.27509162, -0.04392906, -0.04996541, -0.07069908, 0.13047035, -0.032437738, 0.09041138, 0.26647943, 0.0905005, -0.035207886, -0.18694994, 0.12473649, 0.33380502, 0.13868874, 0.23710604, -0.12405666, -0.05459916, 0.028829815, -0.23893148, -0.054550905, 0.04294934, 0.09659265, 0.037086386, 0.038173392, -0.051338118, -0.0024369068, -0.20367412, -0.22718924, 0.32570347, -0.03305936, 0.056578014, -0.08047213, -0.050260935, -0.055478416, -0.0998529, 0.074830666, -0.09123682, -0.06384977, -0.064448096, -0.20881484, -0.07510147, -0.07965765, 0.082455084, 0.027986558, -0.09562942, 0.023409352, -0.05055706, -0.19144423, 0.046084583, 0.07318963, 0.085342236, -0.09272262, 0.0033703547, -0.033003345, 0.030032791, -0.000978421, -0.05060698, -0.05952948, 0.16944328, -0.04752821, 0.01762813, 0.074348696, -0.05606339, -0.18693571, 0.014542611, -0.0887997},
   {-0.08999954, -0.0015710159, -0.023307553, -0.08175938, -0.24380313, -0.009052587, -0.16885124, 0.070490696, 0.04094814, -0.2279118, 0.029699706, -0.086158745, 0.14104791, 0.05888156, 0.098582745, 0.07372532, -0.023074187, 0.017771304, 0.14317779, -0.0028915422, 0.098202504, 0.21923155, 0.026894301, -0.10066561, -0.043307852, 0.13773614, 0.20206182, 0.054139614, 0.1544044, -0.16087851, -0.03962063, -0.03253748, -0.16702543, 0.00068097323, -0.035936758, -0.043206286, 0.07888119, -0.049190406, 0.07315026, 0.08866678, -0.1278745, -0.13894218, 0.18270491, -0.057933144, -0.031580295, -0.025935568, -0.012025639, -0.092752434, -0.035588134, 0.017631728, -0.024562433, -0.007118264, -0.00030941918, -0.15464999, 0.047400415, 0.0073418887, -0.049273305, 0.023192076, -0.0020776764, 0.07405061, 0.03884586, -0.036032267, 0.065216936, 0.05490128, 0.013973042, -0.08953164, 0.034597, -0.009012931, -0.035848506, -0.08297433, 0.09640827, 0.04592452, 0.32785776, 0.085887015, 0.029679034, -0.075857215, -0.036053494, -0.058103766, -0.03602965, -0.15989399},
   {0.020630991, 0.14924651, -0.32914966, 0.038958643, -0.17005634, 0.09806228, -0.022040436, 0.044359878, 0.00013602222, -0.07239486, 0.09251127, -0.0885787, -0.011459074, -0.058918763, -0.07375884, -0.12858832, -0.18621735, 0.010155708, 0.24789247, 0.025491863, 0.032226063, 0.15108854, -0.028642155, 0.06918153, -0.21516012, 0.014299628, 0.007408819, 0.22304176, 0.055720545, -0.23807025, 0.016314026, 0.05835248, 0.014663382, -0.05605393, 0.0039368216, -0.037308473, 0.024526533, -0.20818111, -0.023794854, 0.054292534, -0.13624325, 0.11912391, 0.25636953, -0.04460301, 0.0060200654, -0.0069134235, -0.08770044, 0.052696817, 0.023075804, -0.058404762, 0.071859635, -0.0118788555, -0.049219966, 0.009519493, 0.07881457, 0.048548892, 0.016588282, -0.043177143, -0.059020914, -0.006939996, 0.030548044, -0.12376027, 0.19119951, -0.21531901, -0.092705056, 0.032421373, -0.07110232, 0.07705257, -0.046461746, 0.024093827, 0.061046876, -0.04669496, 0.46131068, 0.023362758, 0.24413201, 0.06997002, -0.027185347, -0.086439565, -0.07603381, -0.23047408},
   {-0.039305683, -0.0070686624, -0.33228227, 0.08368395, -0.115992464, 0.14631218, -0.061494846, 0.09080838, 0.051709287, -0.04056413, 0.14745937, -0.03502831, -0.18694408, 0.07851326, 0.02111261, 0.059419956, 0.00715332, 0.04869757, 0.18125308, -0.0068434933, -0.09838146, 0.045832083, 0.05809339, -0.08049447, -0.1207872, -0.036903515, -0.05319183, 0.22285295, 0.05442043, -0.29141992, -0.017809378, -0.05305744, 0.013867618, 0.020566, 0.06387237, -0.104513206, -0.066239856, -0.16393533, -0.08073223, 0.022016093, -0.042139098, 0.11134908, 0.091104776, -0.026749007, 0.009605597, -0.050668467, 0.0032747984, 0.017309591, -0.0760446, -0.029576385, 0.0860625, 0.08628781, 0.07231688, 0.057399765, 0.013791761, -0.052797142, -0.08984899, 0.017439265, -0.004485972, 0.002244757, 0.05670581, -0.06434871, 0.27265483, -0.12497702, -0.054328065, -0.017636638, 0.044749342, 0.030055802, -0.086550966, -0.18893471, 0.27331078, -0.018561171, 0.44784623, -0.07144865, 0.3036553, -0.031782724, 0.0560338, 0.11134352, 0.00025931714, -0.29867217},
   {-0.050663847, -0.036273398, -0.0810142, -0.04206737, -0.1788601, 0.04809945, -0.05799662, 0.0008123153, -0.004839838, -0.018057005, -0.005829737, 0.08308159, -0.06352275, 0.018197484, -0.014902785, 0.07044728, -0.043693602, -0.05935785, 0.21299443, 0.0076142433, -0.07694166, 0.09658231, -0.075779736, -0.036633614, -0.07523309, 0.0063167657, 0.16580273, 0.18262023, 0.14392555, -0.30493826, 0.07565307, 0.021898715, -0.010400221, -0.073028125, -0.09609714, -0.18786478, 0.03986282, -0.045978464, -0.033930436, -0.042623334, -0.09367013, 0.04639667, 0.20430198, 0.00050691207, -0.15912436, 0.08909843, -0.00938344, -0.03289462, -0.043980964, 0.053900238, 0.052407496, -0.07984556, 0.032796755, -0.11384925, 0.04382296, -0.013867625, -0.032704312, -0.009004375, 0.027650192, 0.03233731, -0.0630164, 0.020643638, 0.19165233, -0.027101472, 0.025325693, -0.018956479, -0.0003464218, -0.034694646, 0.049657606, -0.097974956, 0.08559846, 0.079762585, 0.094851054, -0.07606785, 0.16719478, 0.0904944, 0.035186563, 0.071076944, -0.052389104, -0.26723585},
   {0.030767923, 0.0026216784, -0.06537187, -0.094824314, -0.086445265, 0.056451622, -0.07151839, 0.02913994, -0.0027066504, -0.15989488, -0.010345993, -0.06660475, -0.14955996, 0.0090352595, -0.112127535, 0.04484115, -0.0065903137, 0.005417116, 0.05658833, -0.0970351, -0.22747868, 0.051663365, 0.0031847805, -0.045392036, -0.0879779, 0.07070878, 0.07479792, 0.11470663, -0.060535643, -0.12399609, 0.029209632, -0.05152112, 0.055367578, -0.096127965, -0.08829105, -0.18245873, 0.06466578, 0.032708846, -0.08784557, 0.083334096, -0.01880825, -0.06287621, 0.10556468, 0.03510397, -0.006270965, -0.077404596, 0.003244631, 0.03951978, 0.03312324, -0.079151295, -0.050121073, -0.013910824, -0.09006333, -0.024269953, 0.038154863, -0.08497712, -0.028510462, -0.07786383, -0.027231969, 0.025376797, -0.008869566, -0.0038121657, 0.064581, 0.12913775, -0.068207994, 0.056720167, -0.03705796, -0.0101155555, -0.006188102, -0.17300321, 0.17837167, -0.0954714, 0.19052574, 0.079444006, 0.18797617, -0.029441074, 0.026139064, 0.16024216, 0.07661977, -0.05909881},
   {0.032006763, 0.13072465, 0.15446398, -0.018330077, -0.08937541, 0.010454445, -0.14933524, -0.023402113, 0.033019148, 0.047124866, -0.016312936, 0.07297748, 0.19003415, 0.09374615, -0.035229716, 0.17549057, 0.07424975, -0.03092926, -0.04300579, -0.08819107, -0.08680437, 0.004134074, -0.06504193, 0.08249274, 0.0031896934, 0.19026224, 0.23186015, 0.048558325, 0.08436147, -0.13613604, 0.029394902, 0.028167915, -0.102294944, 0.07677805, -0.020029088, -0.020958703, -0.030823745, -0.019260082, -0.044121347, 0.015799742, -0.20548235, -0.2023498, 0.090859525, -0.08705413, 0.11750853, 0.0024842247, -0.03900043, 0.07844804, -0.013356142, -0.03575056, -0.03288745, 0.044577245, 0.07507934, 0.05308585, -0.012813282, 0.018996017, 0.039491024, 0.04267314, -0.0713198, -0.049734835, 0.062125064, 0.01829669, 0.019304408, 0.03831609, -0.035965476, -0.07212312, 0.060161788, 0.049605645, -0.007814467, -0.1042563, 0.04318769, -0.04650073, -0.0078719705, 0.08514192, 0.001733758, -0.026853621, 0.016528955, -0.21203537, -0.068928, -0.025434166},
   {-0.02813249, 0.08999335, 0.16362374, -0.16035126, -0.19127868, -0.044149462, -0.3392428, -0.058084987, -0.00909531, -0.10196331, -0.07565233, -0.022161886, 0.2929966, -0.015236229, 0.020425692, 0.21061939, 0.03883078, -0.038259767, -0.0019299448, 0.034265317, 0.06914561, 0.13347782, -0.071430966, -0.10103399, -0.110327885, 0.34449562, 0.22581972, 0.13328056, 0.10372616, -0.16098425, 0.029741392, -0.03386202, -0.14460215, 0.08121183, -0.0996694, 0.10700795, 0.013022838, -0.043843467, 0.050711688, 0.21046355, -0.2515364, -0.14465311, 0.12682864, 0.007938948, 0.19554743, 0.06849917, 0.0014434978, -0.07747933, -0.02447679, -0.092623904, -0.084875494, -0.04728892, 0.07627268, -0.06433871, 0.031594343, 0.038702887, 0.07052433, -0.057825584, 0.09279471, 0.05650828, 0.059529282, -0.015456553, 0.04348589, 0.07426602, -0.009983167, -0.22166078, -0.017436989, -0.07684553, 0.01468204, 0.059714418, 0.077147044, 0.052652758, 0.033819757, 0.06917907, -0.01872318, -0.008831345, 0.043532092, -0.23092957, 0.022648798, -0.055573676},
   {-0.023868276, -0.0060470826, 0.1958585, -0.12212131, -0.2271827, -0.037798796, -0.29693767, 0.08740456, 0.08342052, -0.15178029, -0.13495004, -0.025337536, 0.14852722, -0.009139873, 0.1223696, 0.045101237, 0.017070027, -0.052869588, 0.02101092, 0.013940762, -0.03768677, 0.115815334, -0.040892977, 0.05570718, -0.17583126, 0.2710775, 0.26877424, 0.13430883, 0.21611996, -0.09537356, 0.06207855, 0.068623036, -0.13072002, 0.058316898, 0.013871565, 0.14111426, 0.0657897, -0.0366542, 0.086916015, 0.19677468, -0.26719975, -0.142008, 0.17946935, -0.05945128, 0.17691569, -0.034831624, -0.02178514, -0.01540239, -0.033520233, 0.063924015, 0.016916811, -0.0990609, -0.036846284, -0.09429481, -0.07637315, 0.05211925, -0.06529835, 0.07784432, 0.0145652, 0.060665686, -0.016997688, -0.024532357, 0.016281003, -0.03342858, 0.04723672, -0.1612424, 0.048055243, -0.02579578, -0.013181329, 0.026539905, -0.028061409, -0.069813505, 0.14198774, -0.04561305, -0.056124974, -0.044242565, -0.010590898, -0.28008467, -0.056027908, -0.013050671},
   {-0.07840598, 0.11563555, 0.17820866, -0.053772207, -0.0017848079, -0.13525262, -0.34290975, -0.056823295, 0.08312361, -0.14948769, -0.20981842, -0.021155322, 0.25597692, -0.07580829, 0.17031637, 0.20644523, 0.04610251, -0.07385864, 0.06006823, 0.08119852, 0.07514355, 0.06790736, 0.07374575, -0.098666154, -0.036525577, 0.21342993, 0.205871, -0.06706525, -0.0071722125, -0.043641087, -0.0005932214, -0.05132412, -0.09923907, -0.017258003, 0.016321687, 0.097040735, -0.079695754, -0.06884987, 0.062374655, 0.045840375, -0.15874493, -0.21239719, 0.17578354, -0.013632864, 0.2132908, -0.06049125, -0.08266979, 0.043365773, -0.09710374, 0.010414786, -0.0032041818, -0.07273725, -0.029572362, -0.078531764, -0.09310626, -0.041154217, -0.051566042, -0.09495237, -0.015073627, -0.074302845, -0.007203795, -0.07938132, 0.01088749, 0.05800135, -0.030736588, -0.15625773, -0.049238108, -0.091992974, -0.07837334, -0.03830119, -0.1722546, -0.01808397, -0.044380248, 0.0117429495, -0.10294438, 0.037724473, -0.012236648, -0.2543386, -0.053724095, -0.07028903},
   {0.033811625, 0.17707072, 0.2135659, -0.053117428, -0.026621401, -0.22563691, -0.2929395, 0.07975129, 0.089079134, -0.15100427, -0.03515362, -0.06554198, 0.3034972, -0.027032003, 0.2279463, 0.053513248, -0.02170047, 0.0050714016, -0.07073184, -0.08440639, 0.016974298, 0.18564896, -0.0771847, -0.015830562, 0.0024599116, 0.21276592, 0.2124378, 0.049287803, 0.06108005, 0.014920332, -0.05390013, -0.00032732906, -0.17173618, 0.021061165, 0.0815227, 0.21345222, 0.07352945, 0.010652063, 0.049878437, -0.004740333, -0.12492546, -0.16011298, 0.058124825, 0.08855107, 0.06989826, -0.06539695, 0.09164456, 0.021135846, 0.05090417, -0.042830285, -0.07822819, -0.010029943, -0.08660367, -0.031408403, -0.015224506, -0.07298487, 0.07516513, -0.057878993, 0.048051722, -0.072890684, 0.046730675, -0.05504074, 0.004941013, 0.08438423, -0.065315455, -0.058126625, -0.077349536, 0.065734945, 0.025766358, -0.0011381272, -0.14602186, 0.03856604, -0.023239324, -0.009574703, -0.1549905, -0.029081605, 0.024405874, -0.18374836, 0.059207488, -0.012944779},
   {-0.029412765, 0.031601146, 0.24584383, -0.05400569, 0.012428753, -0.044465438, -0.12726535, 0.024027504, -0.048440587, -0.06990528, 0.06492356, -0.099286765, 0.17531718, 0.012774803, 0.13731422, 0.0972082, -0.019607028, 0.07775449, -0.044877578, 0.056333534, 0.006315989, 0.030896004, -0.037228066, -0.075573884, -0.11240244, 0.09117183, 0.09455789, -0.07225109, 0.10781104, 0.04167861, -0.043735784, 0.07650569, -0.03193195, 0.06311788, 0.048747096, 0.022488615, 0.04160122, -0.027028617, 0.0657883, 0.013077711, -0.07455662, -0.1311653, 0.12362366, 0.07811176, -0.11257332, 0.03642059, 0.08254171, -0.033029743, 0.032601003, 0.03954372, -0.0913156, -0.084288344, 0.006202115, -0.10066307, 0.00036346394, 0.06766339, -0.037272457, 0.019150158, 0.028569348, -0.089030646, -0.059309445, 0.003684171, -0.063374616, -0.052412774, -0.0041575134, -0.10109223, -0.048182655, 0.017355576, -0.06351614, 0.05776382, -0.02471388, 0.01910734, -0.037021868, 0.0677645, 0.030922608, -0.064741544, -0.09760525, -0.17958324, 0.0786821, 0.06094834},
   {0.0896106, 0.07515827, 0.13770661, 0.068845056, -0.06654228, -0.029358473, 0.00051989924, 0.009511034, 0.08429519, -0.11937484, 0.09887221, -0.09785357, 0.1630819, 0.08126163, 0.19324467, 0.011010927, 0.009273148, -0.043667145, 0.092011884, 0.05801159, 0.07098148, 0.16696732, -0.08979928, 0.026481409, 0.050509658, -0.025651654, 0.02510427, 0.070104465, 0.10135586, -0.016331047, 0.034691885, -0.07603342, -0.14210042, 0.07997611, -0.05803394, 0.087332234, -0.007542634, -0.0114325, 0.032438997, -0.05551698, -0.0797777, 0.059072435, 0.09426425, 0.07878464, 0.00576946, 0.09457307, -0.08430233, 0.042503666, 0.04001476, 0.044952925, 0.04976765, -0.0035661052, -0.09640668, 0.043397456, -0.012946118, 0.019765671, -0.047450993, -0.035131197, 0.0398976, -0.04803774, 0.016881086, 0.01677654, -0.012974001, -0.007834612, 0.020506248, 0.0760855, 0.02588091, -0.03652454, 0.020805433, 0.05893079, -0.07691908, -0.03435667, -0.068380065, 0.017812543, 0.0367373, -0.021337368, -0.028050104, -0.022839569, -0.10131319, 0.010885856},
   {0.023014594, 0.05917767, 0.19435114, 0.07870147, -0.09336725, -0.058307335, 0.06960814, 0.0373803, -0.039762985, -0.042363655, 0.014946627, -0.028878354, -0.025461884, 0.004567489, 0.10367377, -0.042676087, 0.042180475, -0.088384874, 0.060836498, -0.07474117, 0.021839624, -0.034095902, 0.051189683, -0.07580099, 0.06740567, 0.09564079, 0.0041964417, -0.07891723, 0.03002719, 0.103910126, 0.013698707, 0.019677363, -0.0043229857, 0.032877635, -0.027684199, 0.045665167, 0.052171472, 0.039147392, -0.012122702, -0.05868058, -0.07937344, -0.014554175, -0.071260236, -0.09910048, -0.05580794, -0.0748117, 0.0071623027, -0.015114694, -0.020198416, 0.023959046, -0.042113062, -0.045255575, -0.049806304, -0.04929924, -0.033374127, 0.058626436, -0.034024637, 0.043498106, -0.05354889, -0.09327173, 0.041951425, -0.07283896, -0.045566827, 0.15884867, -0.09236896, 0.009026449, -0.03875895, 0.01600641, 0.02071169, -0.0602714, 0.076696016, -0.006014302, 0.08627895, -0.021551687, -0.032161716, 0.05386787, -0.034593478, -0.053887, -0.024034398, -0.05843634},
   {-0.098946705, -0.12513441, 0.1524238, 0.012501927, 0.041840725, 0.015538845, 0.0140537415, 0.078531764, -0.03686947, 0.012465184, 0.10796557, -0.07714206, -0.09012721, 0.07201903, 0.02798901, -0.075872295, -0.013849153, 0.02384524, -0.055710252, -0.07421961, -0.11829043, -0.03118867, 0.06556284, -0.09425577, 0.15214676, -0.048898194, 0.018946158, 0.10281026, 0.027059635, 0.09717043, -0.020144429, 0.03370086, 0.05933216, -0.010496689, -0.014523796, 0.029156972, 0.06737743, 0.20285189, -0.02738016, 0.049927596, -0.03147767, 0.050020505, -0.044307474, 0.039921243, -0.0688524, -0.010746926, -0.026484877, 0.07269655, 0.039224714, -0.08214667, 0.013884641, 0.061446458, -0.092856504, -0.0457627, -0.06908727, -0.06088053, -0.09400398, -0.060520396, 0.06616447, -0.027995097, 0.09497688, -0.02603922, -0.10120216, 0.06563399, -0.07151444, -0.004180635, 0.08118971, -0.05776884, 0.0384404, -0.027924648, 0.076556556, 0.012146873, -0.08701263, -0.0054978942, 0.041139126, -0.005989231, -0.06184159, 0.032479856, -0.056483563, -0.024293864},
   {0.07068503, -0.022290183, 0.18054046, -0.06682815, 0.02320853, 0.089707464, 0.08659391, -0.0014359178, -0.009289754, 0.067085326, 0.029952623, -0.018118383, 0.063471675, -0.010325693, 0.014457114, 0.0071921865, -0.071026266, 0.08016967, 0.00019987095, 0.07391307, -0.11889104, 0.12033752, 0.08175663, -0.011543741, 0.15844415, 0.004860501, 0.0030991638, -0.009254502, 0.14147213, 0.08403741, -0.023885515, -0.027612964, 0.044665247, 0.027888592, -0.05495154, 0.0127913365, 0.016226064, 0.1500494, -0.04163839, -0.034453925, 0.013240674, 0.08738459, -0.057434995, -0.030157676, 0.05562345, 0.012284525, -0.0904335, 0.021481084, 0.052419007, 0.020129124, 0.091084875, -0.061382033, -0.063666835, -0.061080724, 0.07017393, -0.041366022, -0.03714686, 0.053203896, -0.04974325, 0.04637038, -0.0036121681, 0.09014113, 0.04510815, 0.17623188, -0.010637298, 0.112254895, 0.0054308344, -0.006975089, 0.054511823, -0.099538304, -0.06440205, -0.06722704, -0.048451215, 0.00936027, -0.00031141465, -0.05917998, -0.007163598, 0.08547477, 0.028081758, 0.043131385},
   {-0.07614235, -0.13852309, 0.17995529, 0.007941897, -0.00038106213, 0.10588863, 0.1443522, 0.064588256, -0.08675253, 0.020427221, 0.1489709, -0.053473234, -0.06813196, -0.008744977, -0.04302569, 0.019705366, 0.034776717, -0.046967212, -0.031555474, 0.06322725, -0.110782325, 0.009342889, -0.0767973, -0.060762055, 0.16466953, -0.035126105, -0.09143048, -0.042753786, 0.09199368, -0.06927761, -0.022553548, -0.031236257, -0.040594783, -0.029461097, -0.043271992, -0.016434398, -0.053792167, 0.21080767, 0.019947303, 0.014315121, 0.073349275, 0.14757846, -0.04517491, -0.019183427, -0.03554369, -0.08173912, -0.017627306, -0.037365846, 0.040965226, -0.06856733, -0.07819551, 0.08910751, 0.05617856, -0.07136442, 0.036803566, 0.03552154, -0.051403865, 0.048323233, -0.09263209, 0.05663986, 0.054643042, 0.0014655365, 0.09076823, 0.17207505, -0.092389524, 0.10610071, -0.08286797, 0.06091495, -0.06504528, -0.0967822, 0.1390445, -0.09911042, 0.008215106, -0.0067918496, 0.013942644, 0.07318672, -0.040753983, 0.14289254, -0.028259339, 0.11147498},
   {-0.04536403, -0.01589308, 0.032950956, 0.063355766, 0.0019321969, -0.05282746, 0.07797043, -0.018284177, 0.082773946, -0.06625189, 0.03678332, -0.035437234, -0.12856324, -0.089374736, 0.06475473, -0.002738351, -0.11189147, -0.05938736, -0.08689452, -0.045171797, -0.100060284, 0.029258644, 0.03645528, -0.01727242, 0.02723112, -0.051394653, -0.075458564, 0.011350412, 0.08009165, 0.035768162, -0.0016802871, 0.014868249, 0.011639676, -0.05592269, 0.06586998, -0.13669777, 0.06421451, 0.114550516, 0.0010806472, 0.14328684, 0.06652529, 0.10699236, 0.036258616, 0.006110361, -0.09966119, -0.049330156, -0.03882244, -0.018895326, -0.094370745, 0.041940797, 0.033533268, -0.06530606, 0.063602105, 0.0058987658, -0.08583856, -0.081191674, -0.044073038, 0.030906994, -0.08178208, -0.034652784, 0.028860338, 0.10698682, -0.025377022, 0.16667329, -0.025333017, -0.008552377, 0.01840672, -0.01558938, 0.0020310208, -0.035575166, 0.10198702, 0.010431907, -0.027449185, 0.06313772, -0.052661784, -0.027562909, -0.03164312, 0.15276273, -0.07986941, 0.025277358},
   {-0.028841019, -0.15069604, 0.13891177, -0.015715286, -0.033454992, 0.004887095, 0.0069090747, 0.0032556711, 0.049192846, -0.075267814, 0.04392368, 0.0061496254, 0.0015281565, -0.010606222, 0.088007554, 0.09173753, -0.11533215, -0.056148358, 0.02648408, 0.05349594, -0.1314851, 0.0057442253, 0.028623365, 0.0023792835, 0.13715728, -0.019213816, -0.0475212, 0.08449802, 0.014792261, -0.04698086, -0.098336816, -0.06265912, -0.13086939, -0.01796685, -0.033159222, 0.022609727, -0.052735314, 0.199943, 0.056738745, 0.13188437, 0.17669263, 0.06461717, -0.12737255, -0.031838555, 0.025528545, 0.06866559, 0.0731867, 0.025120314, -0.08463614, -0.03709465, 0.041531093, 0.08841732, 0.081485644, -0.0019375072, -0.07416356, 0.076188125, -0.04064982, -0.042797413, -0.074860014, -0.07820176, 0.07169365, -0.017237723, -0.010195712, 0.08827349, -0.0049955845, 0.10559556, -0.072934456, -0.06771543, -0.03489034, -0.08289692, 0.14246292, 0.030359652, 0.07453105, -0.012093937, -0.050167967, 0.051877655, -0.051696934, 0.16668937, -0.054663975, 0.017175037},
   {-0.093539916, -0.15761799, 0.072877176, -0.09614292, -0.112122044, 0.004202674, 0.13553344, 0.07498546, -0.019379769, -0.07169007, 0.11242761, 0.04019955, -0.09138671, 0.01994221, 0.058443625, -0.073962584, -0.038360633, 0.0072664544, 0.0026742497, 0.07049919, -0.067598194, -0.023466095, -0.008718684, 0.07854163, 0.25580394, 0.0014249833, -0.02577067, 0.03756543, 0.083186105, -0.025231102, -0.06986058, 0.08399705, -0.11985744, -0.067229785, -0.07046719, -0.14742856, -0.0075073414, 0.16125873, -0.028074272, 0.09756123, 0.18860653, 0.002246363, -0.024419941, 0.08064927, -0.065064594, -0.00697802, 0.08664193, 0.088705584, 0.047595832, -0.052549854, -0.041415017, -0.012786487, 0.04954296, -0.06082212, 0.02391002, -0.029707722, -0.0046708724, 0.02430746, -0.04747817, -0.08274751, 0.06281724, -0.038851675, 0.018256238, 0.11986885, -0.067716934, 0.011229285, -0.06985371, 0.011235446, 0.022897653, 0.010363615, -0.01419038, 0.037063476, 0.0110805305, 0.010390153, -0.05264842, -0.06780803, 0.023363078, 0.057261277, -0.03209978, 0.009328162},
   {0.06016944, -0.20406576, 0.17157704, -0.030447826, -0.0782168, 0.062411677, -0.03319188, -0.011151024, 0.025593262, -0.010066729, 0.10360476, -0.07503987, -0.06750274, 0.07837678, 0.05577851, 0.06530232, -0.027164968, -0.068521395, 0.009895277, 0.08108235, -0.005850644, 0.14378013, 0.07151394, -0.071834296, 0.19833611, 0.019211767, -0.16941614, -0.015807811, 0.05741279, 0.0072166687, -0.0084157195, -0.02018827, -0.0077500744, -0.06148343, -0.05977573, -0.022905456, -0.015047341, 0.1162341, 0.01723927, 0.01608543, 0.10569692, -0.029686071, -0.14282124, 0.015842305, 0.061532397, 0.053472556, -0.0920473, 0.06993197, 0.061432503, 0.04735071, -0.030240268, 0.07198736, -0.044657778, -0.042563807, -0.068946645, 0.06562446, -0.06685363, 0.014469521, 0.0476368, 0.02520575, -0.08684297, 0.011364691, -0.12638427, 0.07511765, -0.057278287, 0.110166065, -0.068826795, 0.062612936, -0.026383385, -0.03157016, 0.14032261, 0.022625979, -0.045157243, 0.06991587, 0.020418828, -0.07099751, -0.033045735, 0.19430123, 0.02174314, 0.032691028},
   {-0.050521497, -0.16581234, 0.04855233, -0.069695875, 0.05577964, -0.015295561, -0.01932973, -0.04268161, 0.0733284, -0.106154114, 0.08041514, 0.03180523, -0.03807805, -0.01918953, 0.09868599, 0.08488085, 0.0335946, -0.031885944, -0.024906604, -0.09302682, -0.14814533, 0.08546138, -0.08873041, 0.0010747423, 0.2381958, 0.02861284, -0.17325856, -0.02651506, -0.034249745, -0.067941636, 0.062909044, -0.081736065, 0.04835927, 0.077938735, -0.014959668, -0.10293587, -0.050057825, 0.12951015, 0.08961904, 0.18829992, 0.19373234, -0.034993626, -0.107478485, 0.08860515, -0.07694195, -0.021461748, -0.036503844, -0.03143949, 0.009005742, -0.06894065, -0.093048535, -0.032956418, -0.03703808, -0.130335, -0.028644271, 0.08281872, -0.016692882, -0.07804274, 0.059947677, 0.047504205, -0.032558016, -0.05067015, -0.04698019, 0.033384, 0.019913822, 0.05387922, 0.054309536, 0.07567673, -0.0014396906, 0.022546003, 0.05031627, 0.083246514, -0.10294468, -0.08362278, -0.025286198, 0.063501455, -0.019047905, 0.1973089, 0.020213107, 0.1709822},
   {0.0753013, -0.0786648, 0.06995429, -0.011567892, -0.025139757, 0.03927908, -0.031472303, -0.0058067404, 0.053480323, -0.066801675, -0.031146348, 0.044655055, -0.08206473, -0.08011711, -0.0072047315, 0.10155774, -0.098185636, -0.0070397407, 0.050110806, 0.01852687, -0.08375917, 0.055515155, -0.014418289, -0.056750767, 0.08957612, -0.014668231, -0.027857445, -0.015968172, -0.020418148, 0.05884827, 0.051184278, -0.04534849, 0.06305684, 0.0874659, -0.038807597, -0.1422546, -0.061149124, 0.19868028, -0.03808916, 0.16428284, 0.19977206, 0.06666266, -0.109089024, 0.07016937, 0.049572293, -0.02265019, 0.014878839, 0.02918908, -0.03568076, -0.033708505, -0.071686454, -0.05166966, 0.009269223, -0.0371196, -0.08549378, -0.06483684, -0.09196864, 0.07616548, -0.09380076, -0.10095735, -0.056353047, -0.053276636, 0.02086106, -0.005221852, 0.09361824, 0.13015902, 0.076856025, 0.075080864, 0.019715086, 0.00474929, 0.12396811, 0.03685792, -0.009090899, 0.032689326, -0.057549417, -0.03710024, -0.04816221, 0.19002746, -0.014085627, 0.15193294},
   {0.04637275, -0.09578856, 0.17978717, 0.052059818, -0.029498018, -0.021511834, 0.022822443, -0.043659464, -0.020357251, 0.06425874, 0.09656523, -0.021026552, -0.12231177, -0.010159858, -0.012483811, 0.08609278, 0.020785522, 0.05123142, 0.0049553234, 0.07242653, -0.12753592, 0.018718254, -6.4231455e-05, -0.021592105, 0.2056421, -0.08288552, -0.16946687, 0.12886238, 0.1146186, 0.1047311, 0.058400873, 0.06356673, -0.064252935, -0.09116393, 0.003330849, -0.07698606, 0.019706082, 0.16958775, 0.07339214, 0.082284726, 0.16263077, -0.023300756, -0.12602949, -0.048302174, -0.10645949, 0.051214628, -0.0722294, 0.05601462, 0.00627903, -0.015358133, 0.06446459, -0.05187961, -0.098241985, -0.13233672, 0.011528405, -0.055504184, -0.017258931, -0.05094735, 0.037802823, -0.044072356, 0.0072453395, -0.1467103, -0.1087573, -0.012612719, 0.08195812, 0.07603965, -0.09462033, -0.07664613, 0.077591114, -0.10683282, -0.001222959, 0.00773542, -0.09093634, 0.02134492, 0.06817475, 0.06812506, -0.0808134, 0.023097737, 0.016520428, 0.049423095},
   {-0.012311784, 0.019005481, 0.18512383, 0.051647373, -0.082114875, -0.028267754, 0.13619265, -0.060813244, 0.010890458, 0.06804694, 0.03538901, -0.04358596, -0.07916895, -0.038151983, 0.05888188, 0.0020806722, -0.007462267, 0.07336006, -0.006104892, -0.0665391, 0.042399876, 0.07557034, 0.03509713, -0.056522664, 0.100118995, 0.07552386, 0.020410292, 0.10984018, 0.017279126, 0.13032714, -0.040697753, 0.024750553, 0.058532085, -0.009321336, 0.022613272, 0.039653838, 0.009392799, 0.21313986, -0.014910212, 0.11485097, 0.055302534, -0.042682312, 0.0030811476, 0.07051355, -0.00049519376, 0.056031726, 0.079307936, -0.040614106, -0.08498963, 0.079101816, -0.028060079, 0.036604706, 0.0135959145, -0.09320118, 0.08633733, -0.08380101, 0.060656704, -0.04518103, 0.07265312, -0.0032344365, -0.06249644, -0.17040159, -0.07481832, -0.020715881, 0.06712598, 0.106240004, -0.08178836, 0.023634853, 0.0115652755, -0.046016056, 0.09577096, -0.06880451, -0.08235062, -0.079285234, 0.06582044, 0.06291693, 0.07104479, -0.008045346, -0.037693623, 0.09520638},
   {-0.06537342, -0.1290501, 0.23961759, 0.06510179, -0.06755182, 0.078955814, 0.08224127, 0.083339475, 0.061530977, -0.03907852, 0.019342985, 0.045675922, 0.0828113, -0.077411935, -0.0020532005, 0.064470716, -0.08038847, 0.07632095, -0.12646444, 0.079026654, -0.058509856, 0.06160433, 0.011713736, 0.03290555, 0.13758726, 0.07486494, -0.006258672, 0.07629597, -0.04105808, 0.11656178, 0.015791165, -0.06384392, -0.02993893, -0.021577833, 0.054859843, -0.045914844, 0.08324396, 0.16003768, -0.055951227, -0.014885176, 0.12062347, 0.022824856, -0.005294064, 0.06733399, 0.051733673, 0.0033798218, 0.05391442, -0.047471177, 0.055495426, 0.018709324, 0.06892472, -0.04346514, 0.025848133, 0.032102544, -0.032790713, 0.019305937, -5.544147e-05, -0.038084805, 0.041279353, -0.0998701, -0.021957502, -0.27351063, 0.022549123, 0.016099883, 0.011890858, 0.07942936, 0.051328212, -0.07196143, -0.076756716, -0.13362098, 0.091127194, -0.008650998, -0.044345997, 0.005030392, 0.03260917, 0.011094876, -0.012696362, 0.10055625, 0.047598977, 0.18522245},
   {0.07987077, -0.107199855, 0.21359168, 0.055077713, -0.028929174, -0.085424334, -0.09199833, -0.07660049, 0.017244069, 0.02871646, -0.019194137, 0.086249575, 0.11351985, 0.03217461, -0.0018225788, 0.05625371, -0.057234246, 0.005976118, 0.03788374, 0.02690571, -0.08897098, -0.024239466, -0.090624005, 0.024257129, 0.017831553, -0.050497137, 0.026450915, 0.07528073, 0.0032815502, -0.0305683, 0.0356756, 0.06547254, -0.04564328, -0.028145166, 0.030797452, -0.0017203278, 0.05531534, 0.018945456, -0.015285173, -0.014878862, -0.011742665, -0.10121976, -0.040977996, 0.041241016, 0.0849647, -0.03996904, -0.05274897, -0.1001028, -0.05483975, -0.0815653, 0.08885988, -0.009421673, 0.052887827, -0.06876368, -0.0038191061, 0.025421446, -0.09036097, -0.064759806, -0.054592837, -0.07010195, -0.038235117, -0.32072145, -0.12830395, 0.006532275, -0.04742967, 0.05126139, 0.02003002, 0.08040673, 0.054529242, 0.059479218, -0.047905203, -0.049616706, -0.16991913, -0.009472946, -0.117990196, 0.07525649, -0.08514414, -0.05085855, -0.048855837, 0.07689577},
   {-0.08748276, 0.021395398, 0.17382304, -0.0095932195, -0.056135226, -0.019602587, 0.006002357, -0.069352105, -0.058542006, -0.039731756, 0.09382518, 0.047943473, 0.095373824, -0.07289398, 0.09831469, -0.07525133, -0.047856383, -0.0858913, 0.03631182, 0.05849013, 0.09188922, 0.17275786, -0.009122454, -0.017419018, -0.005963001, 0.11232485, 0.105149455, 0.023543576, 0.13242987, 0.06266534, -0.022736698, -0.046442594, -0.07157621, -0.097721174, 0.059204813, -0.013647979, 0.08237393, 0.063376404, -0.08394417, 0.12517756, -0.018970933, 0.031824704, 0.09684401, -0.024237474, -0.009815244, 0.033743374, 0.060921423, -0.04082222, -0.096844144, -0.075701535, -0.010235675, -0.05164112, -0.0034160407, 0.02066025, 0.0647748, -0.014606332, 0.082347065, -0.044059403, -0.04911331, 0.039464176, 0.074590094, -0.42849815, -0.088377506, 0.055078786, 0.048125573, 0.012186371, 0.07088473, -0.07990591, -0.04659381, 0.05993966, -0.008279633, 0.0696451, -0.17980747, -0.08560787, 0.048508085, 0.045711912, 0.068480656, -0.070773825, 0.08011713, 0.07452015},
   {0.06519089, 0.05116534, 0.22755902, 0.047304593, -0.03155419, -0.09252768, -0.11605491, -0.024771618, 0.044431824, -0.1496294, -0.027603025, 0.056419216, 0.2313224, 0.045911185, 0.027149132, 0.013649491, -0.09002999, 0.04644973, 0.122780666, -0.07264906, 0.14463595, 0.06967919, 4.836172e-05, -0.02432753, -0.0076444913, 0.077568695, 0.19278093, -0.038647745, 0.16941516, 0.0073314076, -0.022560356, 0.0564914, -0.13906822, -0.045675177, -0.0031101257, 0.0068895007, -0.042577907, -0.008509529, -0.08169822, 0.009385402, -0.18618688, 0.0013281379, 0.002895903, 0.08612552, 0.018189345, -0.044780705, -0.087305605, 0.05294848, -0.09590735, 0.0020708295, 0.040356167, -0.0207667, -0.025046637, 0.024151614, 0.08515353, -0.030045416, 0.048953466, -0.072735876, 0.057535358, 0.048711106, 0.06861126, -0.12366594, -0.08122444, 0.08126707, -0.092869796, -0.0429393, -0.071136385, -0.0043492503, 0.080239736, 0.09506374, -0.12119218, -0.045832068, 0.005316326, -0.021923713, -0.039182886, -0.012257092, -0.01029797, -0.026128119, 0.010836185, -0.04477419},
   {0.026229104, 0.21097794, 0.30760932, 0.006882146, -0.10022894, -0.17559981, -0.2901229, -0.07333918, -0.059527226, -0.03312857, -0.12048051, 0.024630938, 0.23436761, 0.04561282, 0.18647656, -0.070478916, 0.0014460786, 0.031505026, 0.031925905, 0.04995636, 0.16033573, 0.13484837, 0.021536037, -0.09982185, 0.016078949, 0.19181189, 0.32563648, 0.030536298, 0.06370131, -0.11426699, -0.054218065, -0.0193857, -0.16083606, -0.0963723, 0.042626783, 0.18157874, -0.0016943228, -0.011649577, -0.063764885, 0.043045122, -0.23938778, -0.100868806, 0.13149455, 0.044430804, 0.04955698, -0.0010140315, 0.014395557, 0.07251972, -0.033915635, 0.03829981, 0.025892496, -0.05720149, 0.02751316, -0.05274969, -0.004794498, 0.025470147, -0.07208444, -0.057850238, 0.07021683, -0.04098387, 0.06903837, 0.20662248, -0.091864854, 0.099581406, 0.029127412, -0.06698676, 0.027767988, -0.062165283, 0.03283962, 0.13478929, -0.16486138, -0.0973118, -0.044140864, 0.08319788, -0.1678167, -0.041477676, -0.07847894, -0.22421785, 0.026272843, 0.034774296},
   {0.033703543, 0.20764, 0.27279234, -0.15368716, -0.14227699, -0.24522904, -0.34288743, 0.014511211, -0.0013130263, -0.15125959, -0.07458861, 0.0055246586, 0.2930954, -0.06976077, 0.06566107, 0.1328794, 0.08363482, -0.0064029843, 0.030105624, 0.017255073, 0.11001817, 0.2052391, -0.014432974, -0.031613685, -0.051316753, 0.08559688, 0.29537994, -0.10094298, 0.15500313, -0.06464593, 0.03210671, 0.011055952, -0.22664934, 0.036169577, -0.01769766, 0.14310317, -0.0033081847, -0.06760924, 0.037432898, 0.07787665, -0.15961853, -0.22666831, 0.22838482, -0.023076814, -0.08260968, -0.07591976, -0.035230424, 0.045190006, -0.047682498, -0.0046806303, -0.015985116, 0.008511448, 0.089250445, 0.05691628, 0.088807516, -0.024843117, -0.02762476, 0.012169484, -0.081088044, -0.07412159, 0.044359647, 0.47673368, -0.07197681, 0.1173516, 0.031112827, -0.11108388, 0.0018610032, -0.006284851, -0.004471652, 0.0070795915, -0.17990309, 0.038063698, 0.07490311, 0.05422334, -0.039392788, -0.09130005, -0.06623891, -0.2721081, -0.0047254474, -0.11612356},
   {-0.082344465, 0.09973144, 0.10679525, -0.15668489, -0.08151419, -0.16674164, -0.24125893, -0.08379456, -0.090407185, -0.13835704, -0.073349535, 0.08233649, 0.26594824, -0.089647, 0.16319822, 0.11715545, 0.06613786, -0.042143866, 0.033571023, -0.032137163, 0.06395718, 0.099973515, 0.06953802, -0.0028469588, -0.12820518, 0.29171872, 0.20485258, 0.112004556, 0.18034968, -0.14165026, -0.0550692, -0.05313434, -0.0714224, -0.06792706, 0.06642828, -0.02623516, 0.06695472, -0.05488149, -0.030713728, 0.07149615, -0.30609572, -0.25907785, 0.29233176, -0.021571742, 0.03946017, 0.07891647, 0.08411618, -0.03188372, 0.07348167, 0.0040787826, -0.041961204, -0.062322043, -0.025964715, 0.031203747, 0.077808134, -0.07462389, 0.014204871, 0.028064061, 0.07631738, 0.07011639, 0.0034097135, 0.30532694, 0.038121536, 0.044973254, -0.073267356, -0.13000417, 0.0560086, -0.007596001, -0.038780052, 0.022125533, 0.0013656198, 0.0060591903, 0.15627037, 0.015840173, 0.10750498, -0.076781884, 0.06770664, -0.13196608, 0.0078671705, -0.17275783},
   {0.05706275, 0.12611839, 0.19940427, -0.044840038, -0.19147547, -0.027834356, -0.33858365, -0.08629294, 0.07298009, -0.15097648, -0.058707654, -0.08296339, 0.17226788, 0.068459325, 0.091165826, 0.11756727, 0.11396113, 0.012234636, 0.018657496, -0.038033597, 0.09103314, 0.120154426, -0.08374004, 0.070240006, -0.17928597, 0.32516435, 0.29737175, 0.11755044, 0.07109193, -0.11579108, 0.013125984, 0.06677473, -0.114100225, -0.020442002, -0.048496153, 0.02520736, -0.011450876, -0.0031622406, -0.059410825, 0.13171835, -0.18926628, -0.1411158, 0.12838341, 0.059293665, 0.097178265, -0.012153141, -0.08878734, 0.017452382, -0.08769223, 0.022265231, 0.048138045, 0.051385686, -0.0027998402, 0.038205232, -0.01627666, -0.07478937, 0.07449219, 0.055502098, 0.014768615, -0.099864386, -0.068613425, 0.20099773, -0.07621177, 0.08060955, 0.029807426, -0.29312736, 0.06321625, 0.02981167, 0.019476056, 0.03854343, -0.044922933, -0.09638519, 0.19220106, 0.0883013, -0.058972254, 0.06976671, 0.05200935, -0.21771683, 0.016666159, -0.044053447},
   {-0.016026868, -0.018037347, 0.058431637, -0.16412157, -0.1376953, -0.009381561, -0.2261684, -0.011593847, 0.08936794, 0.033200853, -0.019459339, 0.01720613, 0.04918048, 0.013079479, 0.07863034, 0.1985616, 0.06345264, -0.08759254, 0.07506367, -0.017782962, 0.004700959, 0.10144433, 0.038921587, -0.08707791, -0.023332482, 0.19161946, 0.2770458, 0.01527692, 0.07622451, -0.110027336, 0.03445345, -0.07908242, -0.015950898, -0.08461243, -0.011165917, 0.02855595, 0.039931033, -0.050808992, -0.038957562, 0.020550052, -0.23919582, -0.11863116, 0.077397585, -0.03337627, -0.06351689, 0.033185996, 0.019089617, 0.011061555, 0.05832853, 7.7007666e-05, -0.07830621, -0.0146398805, 0.045244195, 0.036510475, -0.024128107, -0.08020306, 0.072422, 0.0008216796, 0.026017673, -0.06158523, -0.06902157, 0.34798798, -0.11172884, 0.16730884, 0.019641548, -0.15887696, 0.07256832, 0.0635662, 0.05022257, -0.100262955, -0.030010374, 0.017072916, 0.1839722, -0.096437484, -0.043266956, 0.062084116, -0.008107129, -0.08883098, 0.044148155, -0.06932231},
   {-0.0051370016, -0.09848822, -0.10109438, -0.058372155, -0.19447827, 0.12413522, 0.007436111, 0.0692797, -0.03959865, 0.039585173, -0.054671716, -0.013131648, -0.23670347, -0.033164993, -0.11883491, 0.12786244, 0.10660826, -0.010323137, -0.058766626, 0.026180962, -0.13467285, 0.107764885, -0.05759044, -0.00948656, -0.05122917, 0.10933397, 0.041353483, 0.22292607, -0.08540964, -0.16598247, 0.05147701, -0.0708066, -0.04603662, -0.028761704, 0.059364203, -0.122519694, -0.046660524, 0.015504036, -0.010689942, 0.19111685, -0.05214786, -0.04476695, 0.12731381, -0.029562386, -0.039821565, 0.049814753, -0.019977413, -0.009971624, 0.032599937, -0.062009577, 0.007993735, 0.006540725, -0.06996956, -0.03847735, 0.0017284165, -0.09949312, -0.033480667, -0.015849875, -0.056658108, 0.015494236, -0.077652104, 0.10990854, 0.081555724, 0.026070932, 0.00897447, 0.07535584, -0.015414042, 0.013694587, 0.07411259, -0.16721891, 0.19152133, -0.0024972097, 0.39953932, -0.052427653, 0.06756319, -0.07808383, -0.08272215, 0.053948652, 0.0023749114, -0.210002},
   {0.050837778, -0.073648006, -0.26168534, 0.09672242, -0.14645341, 0.08249223, -0.10683766, 0.034968052, 0.056727704, -0.050596043, 0.105652235, 0.016761862, -0.073465824, -0.038239155, 0.020101843, 0.106318, -0.020538954, -0.035876118, 0.07197359, -0.025830701, -0.1459268, 0.15653148, -0.052666247, 0.050012413, -0.030181374, 0.07144799, 0.12231677, 0.08808585, -0.012850017, -0.20515081, -0.013979503, -0.009651874, 0.049805507, 0.06250776, -0.03370765, -0.12955333, -0.09518668, 0.00026724854, 0.014736013, 0.1189677, -0.047804687, -0.079207025, 0.1633456, -0.03361627, -0.04572091, -0.056123435, 0.037392028, -0.08675535, 0.057940207, -0.056262165, -0.06129263, 0.088025786, -0.025202785, 0.038144454, 0.03649496, 0.02938748, -0.023738967, -0.09877262, 0.034437723, -0.014164853, -0.01022055, 0.2536971, 0.17072453, 0.0146798305, -0.015469827, -0.07188616, 0.003361718, 0.05270437, 0.07249542, -0.017587742, 0.23276463, -0.08086078, 0.31174794, -0.03206385, 0.07789644, -0.0010665655, -0.020134937, 0.06862036, 0.078499496, -0.27237764},
   {0.0696975, -0.15092853, -0.071908146, -0.07524472, 0.10949073, 0.14060204, 0.01886507, -3.88386e-05, -0.07712951, 0.004809054, -0.14154936, -0.029854106, -0.1246231, -0.08188995, -0.15219426, 0.16139889, 0.18182616, -0.010144122, -0.17772758, 0.041849352, -0.1979911, -0.1583908, -0.039720386, -0.08138742, 0.15751255, 0.038155075, -0.032768145, -0.050831053, -0.06914552, 0.13413586, 0.036059074, -0.08033663, 0.059762225, 0.076782554, 0.05741794, -0.092678465, 0.02914662, 0.108923845, 0.0113433115, 0.17711987, 0.1400716, -0.18423516, -0.064813174, -0.07678072, 0.27823448, -0.076034844, -0.08508994, -0.0045184167, 0.061019823, -0.031107841, 0.011233076, -0.04335058, 0.0830227, -0.030124864, -0.088242486, -0.090177976, 0.021287363, 0.08088455, -0.036667306, -0.020078659, 0.0149559975, 0.06885477, -0.0394816, 0.25176427, -0.043886155, 0.025054133, 0.023946669, 0.017661689, -0.017141365, -0.16826628, 0.17788595, 0.040975124, -0.08117266, 0.045752868, -0.06934033, 0.05288642, -0.021234052, 0.11839094, -0.029707266, 0.17706934},
   {0.053339083, -0.15864937, 0.1648591, -0.19830406, -0.0022084615, 0.091989405, 0.060050137, -0.028888136, 0.04623912, 0.015500541, -0.1793762, -0.007939513, 0.1084258, -0.061189614, -0.14345418, 0.23047127, 0.20458779, -0.011309005, -0.21675806, -0.04067208, -0.12237221, -0.03759484, -0.048636053, -0.09192561, 0.20651717, 0.21506506, 0.058509655, 0.0020270173, -0.22677517, 0.038215704, 0.011766246, -0.055557214, 0.061430357, -0.0071783597, -0.091998205, 0.07639271, -0.031373687, 0.034654245, -0.07153199, 0.07027262, 0.094168834, -0.24065337, -0.17667854, -0.07064119, 0.24561772, -0.037894715, 0.009608217, 0.02736156, 0.0043098116, -0.06789357, -0.011865817, 0.017218394, 0.04488963, 0.06979521, 0.086475044, -0.041685164, 0.04940491, 0.048685133, 0.045193322, 0.049729303, 0.053277306, 0.0925144, -0.17109968, 0.24527691, -0.051903445, -0.119164936, -0.054695312, -0.098719545, -0.0734792, -0.038172033, 0.133225, 0.05775478, -0.14346308, -0.010689475, 0.011676827, 0.053448312, 0.014331105, 0.017242253, -0.09779481, 0.11518149},
   {-0.028482048, -0.18279582, 0.01602793, -0.28679752, 0.061974544, 0.1497947, 0.014895127, 0.04555349, 0.01891493, 0.09157963, -0.22649354, -0.02163153, 0.1716493, -0.022279888, -0.23442456, 0.18023016, 0.31464627, -0.07759711, -0.19014718, 0.023406947, -0.0744179, -0.25083527, -0.07795147, 0.047293648, 0.18931378, 0.114794046, 0.04096766, -0.102295406, -0.3361515, 0.29833198, 0.0450291, -0.09710736, 0.04718008, -0.03944215, 0.08979101, 0.094027475, -0.038884733, 0.04204369, 0.03942804, 0.20152864, 0.08720897, -0.17988645, -0.20503266, 0.061515126, 0.36550358, 0.050411902, 0.08864833, -0.055453677, -0.0037599222, -0.09637729, -0.0489579, 0.07069413, 0.0544984, 0.17697163, 0.0073112077, 0.009398247, -0.07929635, 0.070047006, -0.07681803, -0.01570662, 0.015962094, 0.11605879, -0.28432858, 0.31220654, 0.047382765, -0.296301, 0.042156458, 0.039438866, -0.043534372, -0.09392892, -0.0023885728, -0.04625425, -0.08328778, 0.059519432, -0.05869965, -0.045498975, 0.0621807, -0.035579458, 0.00962536, 0.13377032},
   {-0.048532307, 0.013285956, 0.041368682, -0.12721033, 0.072747394, 0.053099405, -0.1728623, -0.050159905, -0.04059282, 0.1003856, -0.34514123, -0.04832327, 0.13485403, 0.08888207, -0.17192942, 0.19344206, 0.30463287, -0.025068335, -0.20040233, -0.06703233, -0.12870099, -0.07730033, -0.01796402, 0.019702118, 0.059661794, 0.20322461, 0.16859546, -0.09803644, -0.2762257, 0.1453053, 0.08587235, -0.02384444, 0.14048217, -0.08143402, 0.023870612, -0.006064379, -0.088295534, -0.09414033, -0.039096054, 0.2150469, -0.052533522, -0.20452294, 0.051056284, -0.00027412627, 0.45901668, 0.03729526, -0.00902842, 0.059137315, 0.07278772, 0.081372395, 0.08766181, 0.043170612, 0.0030370918, 0.001932536, -0.014085882, -0.0988206, -0.0038230852, 0.07743798, 0.055148102, 0.07198358, -0.071619466, -0.014771291, -0.077758916, 0.1571439, -0.0012711138, -0.19037914, 0.0058989343, 0.035511695, -0.08491257, -0.08653565, 0.07519164, -0.07287845, -0.03466309, -0.036459967, 0.14588334, 0.020108089, -0.033036593, -0.074477054, 0.08476739, 0.1620648},
   {-0.07120909, 0.11144255, -0.08209992, -0.15339758, -0.03468853, 0.00091206306, -0.14992332, 0.04614007, 0.06695103, 0.0020365927, -0.31008828, -0.06416512, 0.117300056, -0.08510449, -0.0112087615, 0.14051284, 0.09879055, 0.028823517, 0.017624488, -0.008818037, 0.010351988, -0.039251048, -0.02161584, -0.009819499, -0.076154076, 0.24856767, 0.27235168, -0.11211278, -0.108684175, -0.11380257, -0.025616543, 0.015073012, -0.01113792, -0.007558509, 0.02061949, 0.101288915, 0.024838822, -0.15514572, 0.00666922, 0.10591497, -0.29658368, -0.30678478, 0.14089693, -0.022024794, 0.15145805, 0.047991388, 0.084446006, -0.055823993, -0.0685378, 0.017594634, 0.041039802, 0.054820552, -0.041903738, 0.12282351, -0.08160014, 0.04722689, 0.089311, -0.03278243, -0.0024925694, 0.088266864, 0.00076615065, 0.08164477, 0.0076449714, 0.0037636922, -0.011563197, -0.21622293, 0.007372606, -0.081105344, 0.075461246, -0.04210676, 0.046793636, -0.028765991, 0.07777019, -0.034606215, 0.13211839, -0.030340612, 0.031867117, -0.15946618, -0.03452787, -0.061852094},
   {0.06839676, 0.25739288, 0.019184245, -0.07550477, -0.14084736, -0.036310267, -0.18813278, -0.09809676, -0.055936806, -0.1047664, -0.1503047, -0.032121226, 0.32287142, 0.0705894, 0.019192481, 0.19690517, 0.114374496, -0.02430366, -0.06422743, 0.04673498, 0.01320086, 0.025224332, 0.05418197, -0.0839654, -0.12625392, 0.10703295, 0.27164447, -0.13282467, -0.049582556, -0.08379112, -0.04852676, -0.09180801, -0.113275856, 0.017045036, 0.08214591, 0.24942413, -0.046066582, -0.20537056, 0.032490104, 0.1094985, -0.28474054, -0.16773956, 0.06263374, 0.0012305825, 0.19044435, 0.0932292, 0.08774283, -0.09629674, 0.00048727202, 0.05609926, -0.06043908, 0.065315805, -0.06348021, 0.020533895, -0.0037129752, -0.052765027, -0.032310303, 0.016517224, 0.06220936, -0.036006566, 0.04734131, -0.034118295, -0.06894164, 0.06480372, 0.087894715, -0.16319254, -0.08269875, -0.05993442, -0.07651018, 0.16072784, -0.20254955, -0.06875623, -0.03422412, 0.05692413, -0.0063045723, -0.016981363, -0.061090685, -0.25388518, -0.054779213, -0.103019886},
   {0.06403451, 0.2899566, 0.18839614, -0.00560847, -0.13306895, -0.074942075, -0.20631267, 0.08111015, 0.042376265, -0.05818061, -0.22748756, 0.0884445, 0.29027167, -0.06797607, 0.18424524, 0.06593514, 0.11157264, 0.056653775, 0.024046753, 0.01766566, 0.0418936, 0.06476406, -0.022031836, -0.035689414, -0.1606063, 0.2028128, 0.3531674, -0.11691342, 0.106588304, 0.051860485, -0.0037236745, -0.062286094, -0.11137885, 0.06462519, 0.08542422, 0.19278896, -0.046836935, -0.2138101, -0.030010361, 0.10962162, -0.24609625, -0.15774581, 0.15251587, 0.007171717, 0.1354307, -0.011752881, 0.0021960586, 0.015581293, -0.09258409, -0.07970709, 0.09328575, -0.08897625, 0.0114811305, -0.005289535, -0.035331592, -0.042431895, 0.02452545, 0.02560493, -0.03001175, -0.042868536, 0.055353545, 0.09830581, -0.014191454, 0.0052849473, -0.023402043, -0.23036492, -0.017778907, -0.0867495, -0.06683965, 0.050276898, -0.078108475, 0.0034345067, -0.12884644, 0.07545616, -0.050377626, -0.025748752, 0.01611334, -0.31389624, 0.0167988, -0.16139196},
   {0.041941322, 0.19978553, 0.052494325, 0.041331325, 0.040526044, -0.18400048, -0.18053915, 0.04362109, 0.0386035, 0.025073193, -0.08814074, 0.06557881, 0.11733724, -0.09510555, 0.011537915, -0.022721967, 0.105240285, -0.07439605, -0.039308585, 0.032012176, 0.15751198, 0.07140472, -0.08892107, -0.010303396, -0.17478693, 0.1810025, 0.236908, -0.06700311, 0.1368098, -0.09982981, 0.053876914, -0.10112388, -0.052763805, 0.04649778, 0.0200093, 0.13995114, 0.07632628, -0.035995718, 0.011893743, 0.037068512, -0.12073304, -0.18122262, 0.041407615, -0.085252106, 0.013360156, 0.047026865, 0.040659495, -0.060005147, -0.0033816798, -0.046875633, -0.08329633, 0.072860956, 0.07176833, 0.06456102, 0.050113335, 0.0581335, 0.07534209, -0.030818893, 0.09529141, 0.05601296, -0.07581364, -0.0058770296, 0.08185769, -0.042038593, 0.09100471, -0.12132243, -0.040455922, -0.101880856, -0.08554374, 0.07721426, -0.06389216, 0.04550471, -0.08349352, 0.050723996, -0.025573723, -0.03704873, 0.06322277, -0.12565725, -0.054198865, -0.011319537},
   {0.042144787, 0.06326436, 0.05242985, -0.119526446, 0.06879105, -0.008444923, -0.04849854, 0.049345072, -0.06514457, 0.011907986, -0.12940717, 0.0144845545, 0.045758083, -0.00060800463, 0.13278113, 0.051595822, -0.036085423, -0.060632687, 0.09473455, 0.023975128, 0.13623741, 0.104003154, 0.07873755, -0.011842797, 0.041888595, 0.054579332, 0.077877305, 0.0052729943, 0.12545614, 0.078129105, 0.08321911, 0.07373887, 0.08352581, -0.07547406, 0.07480695, 0.19278206, 0.007964934, 0.027866097, 0.057946727, 0.009369059, -0.1609675, -0.122831434, 0.14283407, 0.019437296, -0.078292586, -0.06649174, -0.019419596, -0.091036886, -0.04194426, 0.02700347, -0.084872894, -0.08514003, -0.035407122, -0.022196647, -0.098609366, 0.0021260534, 0.056560706, 0.032000374, 0.01755131, 0.043135807, -0.094473995, -0.032145653, -0.086723335, 0.085595794, 0.013102964, -0.18530992, 0.013649507, -0.06851738, 0.032615267, 0.021905705, 0.013820182, -0.07111301, -0.016622894, 0.061143145, 0.018779464, 0.07466949, 0.05867841, -0.031990647, 0.03759867, 0.026005067},
   {0.035271436, 0.100981295, 0.031132998, -0.03785477, -0.030919906, -0.10824487, 0.013088335, -0.01202123, -0.026919996, 0.080626085, -0.11703827, 0.00046622157, 0.001139029, -0.080195524, -0.035392027, -0.016767392, 0.12403859, 0.090715684, 0.008638628, 0.083353356, 0.123021334, -0.07890744, -0.061393894, 0.036430407, 0.07297161, 0.07689688, 0.0649731, -0.0012676994, -0.04048165, 0.02251784, 0.015309089, 0.035675272, 0.08668313, 0.0039157965, 0.056346316, 0.1424433, 0.019370142, -0.01496535, 0.020784054, 0.06923064, -0.072000846, -0.08718558, 0.03778425, 0.050320856, 0.09259658, 0.071339555, 0.036960103, 0.044860534, 0.04160404, 0.03341739, 0.057361893, -0.0076459036, 0.026954977, 0.063304715, -0.072876036, -0.054174036, -0.035266798, -0.056903627, 0.06308111, -0.07158072, -0.051544502, -0.015704948, 0.06526797, 0.010547653, -0.07773, -0.060743492, 3.693204e-05, 0.07870397, 0.0640453, -0.024808142, 0.03713469, -0.03710067, 0.004123297, -0.031052463, -0.06448143, 0.03357973, -0.027991025, 0.010652513, 0.08904195, 0.030547004},
   {0.057662174, 0.0020483045, 0.050377782, -0.016158063, 0.09045406, -0.0286019, -0.015990099, 0.03398611, 0.043005295, 0.06542339, 0.014511299, -0.014470704, 0.04687904, -0.08359127, -0.0838083, -0.027675955, 0.0038352113, -0.04034761, -0.027954878, 0.0005129678, 0.043469828, 0.033201437, -0.008093379, -0.0001571011, 0.022971965, -0.002706111, 0.123178415, -0.059268996, -0.08475601, 0.11680447, -0.0812542, 0.055358853, -0.05033428, 0.044594806, -0.049394988, 0.15606369, 0.07158618, -0.07052282, -0.078325756, 0.024620648, -0.06727811, 0.019784182, -0.04650418, -0.062186547, 0.05941327, 0.07387138, 0.03484147, -0.017585512, -0.053290833, -0.09635311, 0.0804496, -0.0560774, -0.042162478, 0.04343154, 0.01904977, 0.030866683, 0.014738914, 0.03722671, -0.08962683, -0.0051862705, -0.02755005, 0.043528613, 0.025758188, 0.081840314, -0.09027788, -0.053382915, 0.040914837, -0.004511919, -0.088987514, -0.04838948, -0.024347046, 0.04606567, -0.030423691, -0.004893483, -0.02115433, 0.07685622, -0.032446522, -0.03495988, -0.086107366, 0.10128992},
   {-0.082076296, 0.028536873, 0.15009029, 0.004919106, 0.040495545, 0.09696096, -0.037614983, 0.08081379, -0.003991966, 0.031763904, 0.085811175, -0.09051167, -0.036997877, -0.090119086, -0.0073119085, 0.0036372787, -0.055037826, -0.0032095686, -0.02000737, 0.0694972, -0.045190223, 0.05711877, 0.094419815, 0.07247863, 0.0905256, 0.013837869, -0.0549868, 0.0015129908, -0.058674946, -0.019546665, -0.015589257, 0.057882495, 0.08563464, -0.046599843, -0.064765304, 0.06521707, -0.027936714, 0.021914441, 0.0893801, 0.044010274, -0.06217895, -0.06555367, -0.09629049, -0.0033870044, -0.06556403, -0.0017769486, 0.066684164, 0.082720414, 0.012455015, 0.009403147, 0.018820032, -0.044849776, -0.08120199, -0.017297843, -0.05251793, -0.04433783, 0.03202182, 0.0015276483, -0.039234187, 0.023246175, 0.088433124, 0.005764215, -0.061026145, 0.078801095, -0.019596405, 0.024706796, 0.038358647, 0.06922229, 0.028634831, 0.12274783, 0.06653199, 0.08491953, -0.13964275, 0.022975098, -0.10272765, 0.053226613, 0.019298045, 0.078664765, 0.05879997, 0.036795016},
   {-0.097035706, 0.09870149, 0.14049481, -0.048304744, -0.05003868, 0.05695379, 0.08055964, 0.052891906, 0.046310738, -0.042315435, 0.124151774, 0.07283437, -0.0698189, -0.06311807, -0.004964993, -0.10934209, -0.0377877, -0.026871115, -0.009694317, 0.02644466, 0.06764473, -0.009326568, 0.08089756, -0.05780993, -0.05261301, -0.06761406, 0.0107608475, -0.086888544, 0.10881204, -0.06316978, -0.027792249, 0.039497085, 0.0318812, 0.078419626, -0.08092686, 0.10271456, -0.017449977, 0.058047403, -0.08011068, -0.012366575, -0.059143648, -0.01168444, -0.031854887, -0.069436684, -0.1443827, -0.09367581, 0.024379998, -0.045088246, -0.024467684, 0.030759068, -0.06516549, -0.072096, -0.042170126, 0.069932215, -0.086376406, -0.09027509, 0.045609802, 0.014562491, -0.005736746, 0.028260864, 0.044627495, 0.11036734, -0.018492471, -0.008551378, -0.09339699, 0.019233888, -0.04985257, -0.10095834, -0.081935346, 0.10592765, -0.025558384, 0.011025458, -0.05200803, -0.004532188, 0.0043180087, -0.070521526, 0.05705262, 0.08554413, 0.056018226, -0.08725433},
   {-0.05090306, 0.02660624, 0.058567308, -0.06460619, -0.056516476, -0.052452914, -0.025036681, 0.07052089, 0.08579632, 0.061691184, 0.06574488, 0.084915824, -0.042444684, 0.08785903, 0.058889456, -0.114542775, -0.08884545, -0.07254657, -0.017261945, -0.06382105, 0.11662026, -0.016381707, 0.02268131, 0.020346763, -0.09503467, -0.057012238, 0.058605433, 0.028896311, 0.052777834, -0.02332743, 0.0378627, -0.06363968, 0.08919262, -0.061107643, 0.021512972, 0.07523622, -0.088422604, -0.07788978, -0.00025654343, -0.12919106, 0.084155835, -0.020199977, -0.052592035, -0.07538118, -0.004076758, -0.056900695, -0.09042185, -0.06244185, 0.011330713, -0.0764754, -0.06070579, 0.058826953, 0.075022124, -0.018288933, -0.09908387, -0.0034104094, 0.0155491475, 0.05834757, 0.052438326, 0.0805935, -0.04652231, -0.013307717, 0.013636344, 0.030121282, -0.08070049, -0.06136173, -0.010571022, -0.009942796, 0.08284994, 0.04956215, -0.09816299, -0.01872974, -0.09833467, -0.045380816, -0.013682485, 0.06699098, 0.029194318, -0.08908005, -0.09230822, -0.06758791},
   {-0.040573742, 0.034784943, -0.005452113, 0.08981935, 0.098293774, -0.025001256, -0.028938089, 0.012748417, -0.0235404, 0.008377051, -0.06402631, 0.08088603, 0.010120471, 0.077137105, -0.022439156, -0.012948385, -0.06643571, -0.021977931, 0.053556897, -0.03878466, 0.028747488, -0.048652954, 0.07876014, -0.05010153, 0.064976744, -0.09413238, 0.04115798, 0.0017041999, 0.07833053, 0.009377594, 0.051193945, 0.036651403, 0.11851215, 0.027276242, 0.06956645, 0.015026467, 0.07078148, 0.050813057, 0.0146176135, 0.056607045, 0.046763357, 0.06951991, -0.018237563, 0.035964068, 0.07291583, -0.028918691, 0.0053871796, 0.082960576, 0.0015925319, -0.05130618, 0.04085154, -0.04174406, -0.038786575, 0.14330044, -0.052525196, 0.07046784, 0.0754874, 0.07427367, -0.05606128, -0.07085954, 0.01643002, 0.08247107, 0.016153984, -0.07060288, -0.023044787, 0.07268573, 0.0027523302, -0.0849632, -0.049843624, 0.0807555, -0.059474535, 0.07188633, -0.12358489, 0.03677813, 0.08305907, -0.053309113, -0.06263333, -0.10059238, -0.07662548, 0.10152228},
   {-0.026723798, -0.084499635, -0.05556836, 0.010324171, -0.0040483265, 0.025692854, 0.040446278, -0.026992798, -0.09808033, -0.022748834, 0.05334266, 0.046260778, -0.022886392, -4.0970743e-05, -0.012011384, 0.09007992, -0.096027315, -0.008863136, 0.047624014, -0.03019266, 0.025301825, -0.043491833, 0.036550723, 0.032186, 0.0684246, -0.017784592, 0.086314104, -0.044082865, -0.087901495, 0.12354869, -0.05662455, -0.01730648, 0.054331217, -0.040758427, 0.014719674, 0.03644251, 0.08524446, -0.036736358, -0.025442315, 0.061942462, 0.099000625, -0.04427768, -0.026127975, -0.10011169, 0.06032124, 0.014289349, 0.014961176, -0.06604304, 0.04841434, -0.048275292, -0.063274786, -0.09624768, -0.04740858, 0.090741694, -0.06195507, 0.022612026, -0.08826465, 0.056349646, 0.021800965, -0.06676343, -0.084328, 0.0565773, -0.07029964, -0.02066835, 0.03227433, -0.09069419, -0.002891847, 0.07123723, 0.022368133, 0.02372206, 0.046609715, -0.012625838, 0.010268429, 0.08977212, 0.00016661003, -0.042609747, 0.057704676, 0.04428095, -0.047503136, -0.0024443502},
   {-0.038384326, -0.05973947, -0.05011935, -0.093415715, 0.061079524, -0.05003204, 0.11007698, -0.014472046, -0.0146870995, 0.06480698, -0.00026206093, -0.0062770103, 0.030661015, -0.07976483, -0.091751814, 0.03104526, 0.009212239, 0.06874768, -0.018332448, -0.015682375, 0.06652278, 0.0683078, -0.07636988, 0.041963596, -0.036075305, -0.0029601762, 0.07514941, 0.06756004, 0.061025508, 0.11880778, -0.0017941305, -0.025281029, 0.062383052, 0.07566634, -0.06911152, 0.002981668, -0.06537321, -0.022697167, -0.048947252, -0.027156893, 0.0473865, 0.08833412, 0.0016228248, 0.024994055, 0.038570113, 0.032141663, 0.03660109, -0.010703492, 0.062600665, 0.0061161835, 0.012771152, 0.05383709, -0.03972495, 0.07782442, -0.04348728, 0.07391882, 0.036204446, -0.0035773886, -0.031768017, -0.059918188, 0.002633214, -0.038082182, -0.106616795, -0.091766015, 0.07124538, -0.056534115, -0.06744323, 0.05243871, -0.045710344, -0.03900302, -0.052084696, 0.017687472, -0.06431663, -0.094965, 0.04213838, -0.07190126, 0.008499343, 0.0026532784, 0.059174914, -0.0547248},
   {-0.03197616, -0.06937678, 0.025131822, 0.030791799, -0.046510413, 0.00416406, 0.05704874, -0.02037446, -0.06741156, -0.0063944203, -0.088828936, -0.0014220097, -0.04655765, -0.03269437, 0.005791609, -0.01375933, 0.053930912, -0.068705335, 0.06282885, 0.015504937, -0.045302413, -0.08863622, -0.0299635, 0.036012825, 0.0065334863, -0.081876725, 0.08487884, -0.048075315, -0.016378583, 0.042688116, -0.041730408, 0.082903735, 0.0630519, 0.078866534, -0.09437528, 0.077145055, -0.039478555, 0.025361523, -0.019069279, -0.006148936, -0.011229159, 0.027353961, 0.04693483, -0.041788228, -0.019734254, 0.061923735, -0.05374371, -0.099487744, 0.084777385, 0.05905543, -0.042248093, 0.0624059, -0.06895561, -0.005902969, -0.021064054, 0.05787583, 0.07320874, -0.007969808, 0.047796525, 0.04114132, -0.029031351, 0.060672153, 0.03513022, -0.12552764, -0.04290186, 0.05372567, 0.004097775, 0.041140124, -0.039331734, -0.06632989, -0.008408711, -0.054617513, -0.014816803, 0.051975593, 0.039172113, -0.005979359, 0.0482986, 0.072806776, 0.011039847, 0.034180645},
   {0.033556588, 0.09592156, 0.11150132, 0.08181409, -0.029747533, 0.0002803879, 0.1178523, 0.026404677, -0.049534325, 0.09959137, -0.050922696, 0.085935995, -0.063241765, -0.078633755, 0.04526282, 0.056034654, -0.08073891, 0.04257176, 0.028589822, -0.096754536, 0.040558018, 0.071564876, 0.066234924, -0.019875247, -0.047493953, 0.026349718, -0.0450764, -0.09967145, 0.07397348, -0.0025578816, -0.10064528, -0.0016607944, 0.0456408, 0.040602714, -0.058812004, 0.07741245, 0.09057765, 0.03531026, 0.046771627, -0.053999297, 0.078606755, 0.03169431, -0.09918664, -0.07406106, 0.077510156, 0.086139105, -0.0498641, 0.029605975, 0.014245937, 0.02166531, -0.0853478, -0.027805489, 0.061716754, 0.034449417, 0.041411355, 0.06105074, 0.047690954, 0.008519263, 0.08579213, -0.032769393, 0.07310637, -0.16031213, 0.0025480455, -0.09474834, -0.021520734, 0.0117511265, 0.016490454, -0.027045054, -0.053830765, 0.066471785, -0.103691794, 0.074614264, -0.047483236, -0.095304206, 0.0900333, 0.064358704, 0.038302194, -0.03205542, 0.01490179, -0.016488386},
   {0.015864376, 0.06040194, 0.16389483, -0.0042969934, -0.0455778, 0.015131112, -0.020840285, -0.030180141, 0.00094181235, 0.09932625, 0.053359184, 0.010146935, -0.02986641, 0.037328623, -0.08622021, 0.036997948, -0.045537807, -0.08969719, 0.0822556, -0.0077729267, 0.10139116, -0.07831236, -0.06227526, 0.06451921, 0.013554105, 0.036645174, 0.073898435, -0.06805913, -0.053721216, 0.0745287, 0.041328963, -0.08141025, -0.06916108, 0.05222395, -0.062223405, 0.017442107, -0.055972725, 0.0059851096, 0.07712599, -0.013981025, 0.11683256, 0.08789162, 0.057095937, 0.050735243, 0.05988675, -0.053812318, -0.05428994, -0.033946905, -0.06059089, 0.03358926, -0.014638916, -0.06735686, 0.046053756, 0.11860657, -0.09252035, 0.075694434, 0.0007396687, -0.06498446, 0.036055423, -0.055554062, -0.0333698, -0.19863093, -0.0030965712, -0.044362724, 0.028630845, 0.121596396, 0.054264583, 0.028672883, -0.008478701, 0.0724164, 0.027800584, -0.08551528, -0.08495406, 0.027965527, -0.09280634, 0.07915593, -0.077897996, -0.002079753, -0.0038700404, -0.0009732575},
   {-0.09352188, 0.0036116147, 0.084534496, -0.045303278, 0.06462914, 0.03768128, -0.0056509413, -0.07521585, 0.03552725, -0.05100282, -0.06094058, -0.018692426, -0.0933059, 0.011494905, 0.06124134, -0.07376333, 0.011788333, -0.043514285, -0.084938705, 0.024760816, -0.0035853954, 0.04559803, -0.05739608, -0.023399716, 0.06603744, -0.081038706, -0.007939576, -0.103745714, 0.09420848, 0.014652811, 0.04955285, -0.09555619, 0.01698176, -0.022149026, -0.07623041, 0.07504741, -0.049750373, 0.055603746, -0.03871901, -0.059216835, 0.035649497, 0.050354272, 0.040309813, 0.07952923, -0.08193221, -0.010723896, -0.022858366, -0.045839977, -0.035689216, 0.016062627, -0.058097135, -0.081197426, -0.018365435, -0.0472232, -0.010446832, 0.083880454, 0.014329168, -0.08709671, 0.050392292, 0.03435313, 0.0028532445, -0.047062576, 0.05841411, 0.040945105, -0.08997943, 0.006843481, 0.02427149, 0.05156475, 0.09220258, -0.026212221, 0.05892535, 0.03485019, -0.04502616, -0.029577365, 0.032268852, 0.065438785, 0.01561866, 0.09640633, 0.05069344, 0.041650377},
   {-0.010821279, 0.074645065, 0.12520884, -0.10733331, -0.06208937, 0.014102994, -0.0038716681, -0.037471917, 0.07358452, -0.0035535211, -0.00030874793, -0.035386954, 0.0032236709, -0.031486504, -0.1036985, 0.11019487, 0.1288954, 0.0782289, -0.11205013, -0.0012018298, 0.021983637, -0.0872552, 0.045381136, -0.07383025, 0.066014044, -0.0013765658, 0.013798529, -0.04102023, -0.033637114, 0.08852915, 0.03816473, -0.027894605, -0.0043024058, 0.021301992, -0.07015033, 0.06257697, 0.043651897, -0.09050124, -0.08810918, 0.049569763, 0.05420907, -0.060574662, 0.051910885, 0.01146954, -0.08990643, 0.03096836, -0.01876358, -0.07184544, -0.0207419, -0.015015119, 0.042910777, 0.07389163, 0.05436439, 0.1352671, 0.082661234, 0.06371221, 0.028593047, 0.08099158, 0.07078164, 0.08088167, 0.020438574, -0.12829447, -0.039931282, -0.016914623, -0.028621562, -0.12853508, -0.031399705, -0.06480247, -0.010694481, -0.0015141879, -0.080153175, -0.02871197, -0.13689387, 0.046254836, -0.0858936, 0.024787188, 0.023362445, -0.122689456, 0.06836279, 0.09321475},
   {0.058306824, 0.1306162, 0.09982369, -0.07256722, -0.05066104, -0.018805267, -0.08490805, 0.065570675, -0.028521016, -0.05574745, -0.0066004675, -0.0036795014, 0.16522282, -0.050993368, 0.06428012, 0.12547341, 0.08436363, -0.089795925, -0.0072573605, 0.022892823, -0.06334475, -0.06679079, -0.0079889, 0.039215565, -0.036548626, -0.009001369, 0.03188328, -0.038552802, 0.046704814, 0.064925574, -0.03956757, 0.042385396, -0.06851625, 0.04418324, 0.063853055, -0.015387976, 0.05421834, 0.0030820372, 0.08461624, 0.09558066, 0.008231966, -0.088943504, 0.03972413, -0.07462326, 0.051374804, 0.007343866, -0.031217016, -0.09698201, 0.058669664, 0.02027762, -0.061110377, -0.03273546, 0.07193754, 0.059660014, 0.041552853, 0.053429086, -0.055500183, -0.009288814, -0.007698342, 0.052137174, 0.025160111, -0.07830587, 0.0037200795, -0.04722129, -0.09174413, -0.13788533, 0.04292026, 0.079548776, 0.01229652, 0.071806535, -0.06262971, 0.090039305, -0.011659292, -0.023263378, 0.08281538, 0.017025918, -0.0026191263, -0.009149173, 0.068720326, 0.068955556},
   {-0.0482604, 0.10908018, 0.04396389, -0.0757582, -0.020579655, -0.0038391626, -0.1617266, 0.016197959, 0.0366015, 0.09935843, -0.074874386, -0.021014063, 0.11053475, -0.02252496, -0.04640886, 0.12165614, -0.031515144, -0.08550757, -0.061990254, 0.0043768813, 0.038578566, -0.05185341, -0.0326334, 0.008753205, -0.09515348, 0.14317532, 0.06884661, -0.11721833, 0.013232565, 0.114115655, -0.063781485, -0.088665895, -0.056854203, -0.031581644, 0.045746323, -0.009105143, -0.0033666359, -0.10369761, -0.029887686, 0.0020368318, -0.034809947, -0.005577232, 0.08735748, -0.09195059, -0.025050743, -0.04774522, 0.0912456, -0.07752529, -0.08476218, -0.094597675, 0.0036008358, -0.0752764, 0.07792345, 0.08661965, 0.056102492, -0.045877546, -0.07866468, 0.034109678, -0.05041455, 0.052282758, -0.09500251, -0.34747657, -0.040915675, -0.026602691, -0.0846719, -0.18028952, -0.08278874, -0.0813335, -0.09184662, 0.07679418, -0.102546886, 0.030634085, -0.05075962, 0.03228102, 0.01568701, 0.022585474, -0.0032175244, -0.051423125, -0.029186456, 0.042415913},
   {0.0031686136, 0.22599171, 0.1995018, -0.11301894, -0.12063793, -0.17351003, -0.22581981, -0.08752194, 0.054348692, 0.048724458, 0.0017449936, -0.0066103474, 0.25158525, 0.008042119, 0.007111637, -0.055917066, 0.09995337, 0.012802303, 0.10739739, -0.052765027, 0.11390369, 0.01235536, 0.009474605, -0.04723091, -0.16403794, 0.0077009867, 0.14840338, -0.09368298, 0.049811676, -0.09359237, -0.012756212, 0.047949865, 0.040776394, -0.07391198, -0.059467852, 0.13874598, 0.041285753, -0.10048742, -0.048958655, 0.06999325, -0.26542145, -0.17704587, 0.045126077, -0.0693954, -0.043506864, -0.021878496, 0.092954315, -0.03687179, -0.022156088, -0.07425144, -0.02865547, 0.05008083, -0.093941264, 0.023969654, 0.009677264, 0.024636572, -0.04191846, 0.07996419, -0.08406095, -0.08953941, -0.06953919, -0.032654736, 0.016425805, -0.04474325, 0.08565485, -0.12525012, -0.02301979, -0.0994345, 0.069739975, 0.058127683, -0.069434695, -0.051336825, 0.026766699, 0.012739609, 0.03186882, 0.0935524, -0.0750599, -0.106696725, -0.07952939, -0.023217412},
   {0.0724824, 0.20969637, 0.093878485, -0.075819984, -0.101287395, -0.1228701, -0.31027582, -0.09791664, 0.017569833, 0.0059552947, -0.15062864, -0.087335825, 0.25561437, -0.011129081, 0.11840897, 0.036687795, -0.004762432, 0.01215595, 0.075754665, -0.08826194, 0.10006186, -0.0024565065, -0.072947815, -0.042327534, -0.20910333, 0.19871895, 0.31255084, -0.05483063, 0.08138671, -0.049847953, 0.08536363, -0.039678227, -0.115770526, -0.08659132, -0.03510196, 0.12327346, -0.08705856, -0.19070539, -0.012264919, -0.08922646, -0.19173267, -0.1545429, 0.27233487, 0.05511148, 0.048409134, 0.009125285, 0.09182715, -0.043162297, -0.029925974, 0.047212496, 0.01688359, -0.029505588, -0.042574897, 0.11450626, 0.0074824276, -0.07223811, -0.05393591, 0.08481227, 0.06072042, -0.06605575, -0.05876789, 0.26620162, -0.031581603, -0.09033556, -0.09368198, -0.20794457, -0.08885675, -0.09717229, 0.06115108, 0.1513249, -0.061621774, 0.023753345, 0.06076017, -0.00015821926, 0.030732378, 0.067347415, -0.05842321, -0.22245313, 0.055136018, -0.1658004},
   {-0.06475636, 0.12169508, 0.14324026, -0.026263852, -0.105585866, -0.09127585, -0.26526073, -0.0036224662, -0.085597746, 0.03586871, -0.052637324, 0.073144585, 0.18353947, -0.085312754, 0.03532335, 0.067275666, 0.009632831, 0.017275639, 0.03199431, -0.026556158, 0.19580157, 0.13774483, 0.013940625, -0.04509169, -0.17248, 0.19745427, 0.3562669, 0.047206596, -0.018017132, -0.007966818, -0.040594276, -0.013305975, -0.034522276, -0.052987408, 0.004600813, 0.13224189, 0.020893533, -0.15968852, 0.025068196, 0.05401572, -0.2230655, -0.069759585, 0.09822317, -0.036838554, 0.019651866, -0.054304056, 0.069905244, -0.030094774, -0.055456925, 0.051215388, 0.037871204, 0.0244779, 0.009253065, 0.059762884, -0.037477057, 0.007878058, -0.05055719, -0.026390197, -0.040239487, 0.038490005, 0.053222857, 0.3682123, 0.009285617, -0.07910319, -0.07824196, -0.22939375, 0.037885018, 0.064018466, -0.005261749, 0.14742298, -0.16311094, -0.08828586, 0.1513421, -0.046821345, 0.06587058, 0.04613381, -0.05938193, -0.2834796, -0.0779676, -0.07791815},
   {0.049748175, 0.18664397, 0.019699894, -0.13712387, -0.14418718, -0.10872077, -0.21072923, 0.08837206, -0.06205257, -0.030752202, -0.2879384, -0.03657255, 0.1090752, -0.02046147, -0.05582809, 0.21563758, 0.06340245, -0.027514823, 0.049765594, -0.04921438, -0.044011056, 0.03130529, -0.052166115, 0.053810913, -0.13825531, 0.23583493, 0.23292774, -0.0630502, -0.029990613, 0.023621215, 0.008315434, -0.03396855, -0.01740251, -0.06506782, -0.039490137, 0.11292471, 0.034244902, -0.09734581, 0.052366506, 0.09499121, -0.23008843, -0.2143433, 0.08326547, 0.025048366, -0.03853694, 0.0014957115, 0.035305627, -0.091992766, 0.051880702, -0.007918131, 0.03391596, -0.065100454, -0.030052215, 0.06884733, 0.052826915, -0.043144267, -0.05076418, 0.014253391, -0.07681392, 0.061517213, -0.08751112, 0.38924065, -0.04483102, 0.13176028, 0.05784688, -0.34266523, -0.081361555, -0.06532079, 0.071219735, -0.0505662, -0.058220863, 0.056937892, 0.2038001, 0.01841106, 0.10772712, -0.046211477, 0.000491998, -0.13536565, -0.091674894, -0.21735625},
   {-0.05458394, -0.03459461, -0.042911094, -0.2723849, 0.002864567, 0.039375372, -0.07618931, -0.099587716, 0.07898067, 0.15101495, -0.340107, 0.011596731, 0.030595971, -0.06634561, -0.140725, 0.19650689, 0.2158488, 0.080481164, -0.13175417, -0.076059066, -0.008751505, -0.061882026, -0.054521926, -0.097857706, 0.04179646, 0.21607, 0.10154951, -0.08754735, -0.17312236, 0.0887884, -0.09370177, -0.0075650415, 0.041444536, 0.06779189, 0.06413402, 0.018179355, -0.09988602, -0.20000374, -0.08868077, 0.15686786, -0.016320312, -0.30120343, -0.002963248, -0.03539312, 0.032540824, -0.044763673, -0.037910607, 0.06824293, -0.057606146, -0.0944256, 0.028306969, 0.023834437, -0.096633986, 0.12090415, 0.03453802, -0.04727145, -0.014346498, -0.048967846, -0.03777603, -0.01312009, 0.012370028, 0.41092235, -0.2138617, 0.19131608, -0.036346193, -0.22808926, -0.087350786, -0.032125205, -0.021238886, -0.037984, -0.0700161, -0.016515097, 0.1483268, -0.093332425, 0.11963351, -0.09109157, -0.097872965, -0.084255986, 0.073256426, -0.015178438},
   {-0.09108879, -0.119429044, -0.026357105, -0.19146965, 0.19504611, 0.09773204, -0.08346025, -0.033692904, -0.06274851, 0.23203781, -0.40135497, -0.016051836, 0.16571096, -0.05698987, -0.1811204, 0.17386582, 0.18849145, -0.012334213, -0.35895842, -0.011803426, -0.001350028, -0.2644108, 0.09253202, -0.040437188, 0.2282822, 0.19800307, 0.055031165, -0.14459759, -0.25332153, 0.27140632, 0.001772025, -0.08790428, 0.086728126, -0.07991507, 0.03866612, 0.020078612, 0.08831315, -0.11940486, -0.08378607, 0.13543212, 0.032990396, -0.30794835, -0.1945141, 0.010821517, 0.012170766, -0.055672877, -0.023774989, -0.075949445, 0.07758664, -0.09239203, 0.029531457, 0.026546622, -0.096398704, 0.041620973, -0.08624224, 0.016627753, 0.052317206, 0.054973397, -0.05943296, -0.02244565, 0.060121633, 0.37874624, -0.23600951, 0.26914498, -0.07892284, -0.32886437, -0.039937288, 0.030139621, 0.03383518, -0.14630644, 0.023303183, 0.084329285, 0.083607264, -0.018476047, 0.01300002, -0.035502333, 0.01903966, -0.06129551, -0.006682602, 0.1906336},
   {0.08145383, -0.12954427, 0.10927734, -0.2683365, -0.04168222, 0.0958899, 0.019299721, 0.06690017, -0.0758001, 0.13671298, -0.21123914, -0.006770156, 0.102932096, 0.06576223, -0.10656027, 0.26252705, 0.14074714, -0.034131117, -0.17101555, 0.059745442, -0.09096136, -0.09347721, 0.04221008, 0.07636235, 0.17440312, 0.17966835, -0.067082286, -0.11304491, -0.15901043, 0.21389258, 0.03438193, -0.10127983, 0.07296211, 0.025304124, 0.07207118, 0.08351822, 0.087971784, 0.09875669, 0.027127804, 0.14243948, 0.023064073, -0.19216645, -0.0792139, -0.08291494, 0.09849747, -0.063755885, -0.0733223, 0.063804254, -0.06848701, -0.077237144, -0.062118, -0.083419435, -0.09138856, 0.0067154863, -0.07289749, -0.07426787, 0.030320788, 0.011102201, 0.021083042, -0.010004446, -0.080849856, 0.2401929, -0.26183355, 0.153357, -0.08315336, -0.21176289, 0.012574215, 0.07765383, -0.044539876, -0.022226961, 0.04944158, 0.08221134, 0.122244164, 0.019601425, -0.062773444, 0.012244441, 0.0028229798, 0.07879262, 0.0459198, 0.19992039},
   {-0.05527825, -0.23287192, 0.104677364, -0.11862728, 0.01214375, 0.08391395, 0.07115051, -0.037861373, 0.0023921898, 0.16617621, -0.10927688, -0.016356895, -0.002771585, -0.062172905, -0.2196994, 0.06464224, 0.23087734, -0.032249466, -0.14572564, 0.08708223, -0.15411614, -0.16536234, 0.037601776, -0.06297181, 0.19471525, 0.011848543, -0.12588255, 0.031051874, -0.1031921, 0.088916324, 0.033419482, 0.046954446, 0.12435906, 0.06909704, 0.032799706, -0.11555911, 0.003753951, 0.13269046, 0.008740073, 0.21066053, 0.21055573, -0.18762632, -0.062319335, 0.0048259934, 0.06168757, -0.09378318, -0.03438173, 0.022274414, 0.03443131, -0.09089819, 0.023563094, 0.056676716, -0.055356435, 0.05112449, -0.06150764, 0.060642846, -0.02839601, 0.048943184, 0.028791822, 0.043987904, 0.07654215, 0.3389703, -0.23420183, 0.20147803, -0.07704285, -0.04335553, 0.033833656, -0.068622306, 0.08582925, -0.14575689, 0.11075717, -0.09221169, 0.09154221, -0.010850625, -0.06280164, -0.020390645, 0.07870779, 0.04067192, 0.07170808, 0.095244385},
   {-0.090515405, -0.107957214, 0.1347602, -0.14723204, 0.13430256, -0.001375155, 0.10324709, 0.07751459, 0.039492287, 0.16202055, -0.32615766, 0.014750251, 0.13001424, -0.011564523, -0.26843724, 0.1859733, 0.25730982, 0.018136695, -0.33948484, -0.033856418, -0.03121322, -0.24103978, -0.060818475, -0.0057168812, 0.22542924, 0.12169237, 0.024497103, -0.14684527, -0.27410164, 0.34879866, -0.07603408, -0.004385998, 0.1155275, -0.0009657628, -0.10056922, 0.026863502, 0.02238147, -0.012935553, -0.055723116, 0.054048482, 0.21504577, -0.2828699, -0.31006518, -0.031756222, 0.4469825, -0.06626263, 0.09448556, -0.025615713, -0.028086232, -0.037377335, 0.061015002, 0.0020537574, 0.091674805, 0.19924745, -0.035325494, 0.03678099, 0.041337505, -0.004610723, -0.040662933, -0.08620666, -0.04389327, 0.16084059, -0.22195567, 0.2649823, -0.076776184, -0.2404618, -0.0009627842, -0.050676513, 0.07341448, -0.10705705, -0.027535688, 0.020121636, -0.39149493, -0.074713215, -0.053407196, 0.048419915, -0.040045056, 0.045801796, -0.041481707, 0.39512178},
   {-0.07803457, -0.15256871, 0.21677125, -0.29127482, 0.33002353, -0.092759825, 0.08163003, -0.06793519, 0.03185392, 0.22507147, -0.30320624, -0.092424154, 0.1941533, 0.00579489, -0.22745231, 0.19281729, 0.33356544, -0.058624305, -0.27449933, 0.061247166, 0.012304529, -0.2680642, 0.09502732, -0.081401005, 0.26292092, 0.01751467, -0.07428351, -0.32676706, -0.32716572, 0.3656223, -0.037613124, 0.032771353, 0.10066014, -0.08299563, -0.0631507, 0.11000986, 0.089358725, -0.05055076, -0.008586618, 0.017551746, 0.14054252, -0.09908899, -0.18390232, 0.004113027, 0.35820648, -0.0477374, -0.04648603, -0.091384955, 0.010062685, -0.049777783, 0.067825906, 0.014321793, -0.0127963815, 0.12146903, 0.08635816, -0.0066665723, -0.056318864, -0.031989895, -0.083975814, 0.04644505, -0.04702424, -0.01700888, -0.243792, 0.36720392, 0.028240845, -0.24456714, -0.007870842, -0.052112848, 0.04294785, 0.06490266, -0.08753017, 0.00447402, -0.45324883, 0.016810521, -0.07826514, 0.078994505, -0.044390615, -0.05545173, 0.018395696, 0.4026816},
   {0.07859334, -0.09538417, 0.066369906, -0.22991475, 0.17107071, -0.048807494, 0.1393767, -0.010038196, -0.038605828, 0.18888655, -0.23552126, -0.018279279, 0.07747751, -0.059294306, -0.24567236, 0.22336651, 0.24797256, 0.025807716, -0.35616308, -0.07681484, 0.028025178, -0.32767463, 0.048303314, 0.014285512, 0.24621913, -0.0117308535, 0.038901925, -0.18237457, -0.20789014, 0.41367602, -0.025071163, 0.019796444, 0.14085951, -0.07335787, -0.0140957795, 0.10880486, -0.09052359, -0.04712882, 0.08634082, 0.0076576783, 0.27220538, -0.077511005, -0.33286172, -0.06535783, 0.37709224, 0.01575847, 0.05323083, -0.019552309, 0.04052259, 0.016305817, 0.03866794, 0.0035029806, 0.06594428, 0.08769405, -0.08694294, 0.06200275, -0.10161609, -0.08326895, -0.04178349, 0.012383268, -0.06881777, 0.029314216, -0.22119987, 0.12945269, -0.021363817, -0.14124884, 0.012852375, 0.053053085, -0.08133152, 0.07709661, -0.010150642, -0.073582076, -0.2887393, 0.054377384, -0.07696054, -0.019365244, -0.037232976, -0.04875934, -0.038475335, 0.3044533},
   {-0.060690045, -0.24967803, -0.15573776, -0.22761337, -0.0055881627, 0.09838307, 0.13183555, -0.0024563384, 0.09135414, 0.22112466, -0.17729679, 0.08869103, -0.04890648, 0.044742055, -0.19854558, 0.1664542, 0.3052515, 0.01186917, -0.242943, -0.032912187, -0.21129073, -0.22467524, -0.026916876, -0.027249007, 0.15925983, 0.099560395, 0.03003563, -0.10818009, -0.21218565, 0.21221009, 0.06357261, 0.02896341, 0.11077507, -0.066586114, -0.047783226, -0.022033608, -0.035018098, -0.02529498, -0.05027493, 0.23812309, 0.05525214, -0.12088683, -0.05524217, 0.021191316, 0.29783523, -0.008983433, 0.0012780726, -0.02547409, 0.011567368, -0.041810226, 0.08704052, -0.010009655, 0.029487414, 0.08994655, 0.082820304, 0.05433142, -0.051010936, -0.034117173, -0.08799483, -0.09414504, -0.048562016, 0.03592364, -0.21663524, 0.12363455, -0.07803239, -0.19627064, -0.06049544, -0.07804562, 0.049738757, -0.17505033, 0.045127995, -0.0891988, -0.09149685, 0.018258959, 0.06856035, -0.050766878, 0.06938375, 0.045092534, 0.00413475, 0.26111734},
   {0.045808718, 0.009944643, -0.06545819, -0.14793456, -0.07667703, 0.0142233195, -0.20850165, 0.031000558, 0.08244531, 0.05729778, -0.18353896, -0.04033545, 0.037320126, 0.025044687, -0.12115562, 0.18242528, 0.12206197, -0.07008825, -0.10626444, -0.08671518, -0.11552785, 0.0010146699, -0.04794453, -0.09717089, -0.09763457, 0.10177336, 0.21294677, -0.0029354694, -0.053563178, -0.040778924, -0.043000672, -0.036885213, 0.06047295, 0.06687397, -0.0029690606, 0.08079244, 0.06627127, -0.14349884, 0.0877958, 0.041010477, -0.13907087, -0.09119308, 0.006186236, 0.013620973, 0.25800747, 0.08485889, -0.009661965, -0.025038306, -0.019053433, 0.0019713067, -0.064198025, 0.022735406, -0.025347862, 0.04418911, -0.046412215, 0.06552408, 0.07219852, 0.056892868, -0.071030706, -0.009284252, 0.0758177, 0.043436643, 0.0035392009, -0.017881287, 0.030077867, -0.1371828, -0.09776067, -0.0057273596, -0.041722953, -0.14788722, 0.022179352, -0.055798993, -0.05066775, 0.026368136, 0.19538996, -0.039681576, -0.08937016, -0.20982099, -0.028153062, -0.00907498},
   {-0.0061783995, 0.22495428, 0.04789187, -0.14692244, -0.1210343, -0.0972962, -0.25326222, -0.06420016, -0.0008878971, -0.03375447, -0.06608222, -0.091887, 0.11990789, 0.04030641, 0.0515533, 0.032539055, 0.10059544, -0.06810178, -0.014839089, 0.05233723, 0.09477607, 0.16417082, 0.05889181, 0.05544716, -0.07917649, 0.22891241, 0.223535, -0.11020546, -0.0012828419, -0.06056827, -0.057831604, -0.0584405, -0.02131437, -0.049161885, -0.092350446, 0.16185153, 0.019413956, -0.063284285, -0.038375676, 0.102371864, -0.34792253, -0.26916766, 0.08433268, 0.08893107, 0.03072341, 0.06467036, -0.012423292, -0.054867674, -0.016030159, -0.06320923, 0.06854842, -0.01110561, -0.0035551812, 0.010611777, 0.0741523, -0.10152973, 0.077620775, 0.0085157165, 0.024938777, 0.04928101, 0.069457285, 0.015497456, 0.03589608, 0.048603885, -0.03888013, -0.20259295, -0.06648421, 0.026822729, -0.05639238, -0.020099578, -0.1235332, 0.06566453, -0.035123948, -0.0671194, 0.10442377, -0.077184014, 0.0030449643, -0.3190434, 0.06040098, -0.020944778},
   {0.0020537786, 0.1434129, 0.068134144, -0.19720589, 0.019315366, -0.07441299, -0.31977612, 0.06130416, 0.07546455, 0.06698317, -0.24282944, -0.004822079, 0.28959128, -0.086974874, 0.09736846, 0.13744445, 0.013583536, -0.02033034, -0.034051035, -0.046031363, 0.116851725, 0.14020652, 0.0703556, 0.048311975, -0.21617647, 0.21787597, 0.37203312, 0.020881917, 0.082132846, -0.09843598, -0.010314533, -0.06426239, -0.05094755, 0.086429134, 0.04397344, 0.15311155, 0.07612683, -0.18054429, -0.07223809, 0.052023724, -0.37296936, -0.27927426, 0.2683391, -0.04515721, 0.029222919, 0.020914167, -0.02231872, 0.0078115948, -0.013733757, 0.075713255, 0.012629673, 0.05198481, -0.072178006, 0.054954313, -0.08059452, 0.07871534, -0.017397102, -0.0959485, 0.09278595, 0.053639904, -0.02004242, 0.080080494, 0.009438437, -0.059507493, -0.052964102, -0.32769585, 0.08079212, -0.023676354, 0.015177578, 0.1295341, -0.06549011, -0.07600523, 0.002102338, -0.060730543, -0.055371717, -0.07726384, -0.08062988, -0.34205377, -0.08569039, -0.014771046},
   {-0.05698534, 0.17998545, 0.026144473, -0.084771775, 0.05543821, -0.073035166, -0.28060842, 0.0413871, -0.06606684, -0.07617204, -0.16612983, 0.03974583, 0.19721463, -0.02016931, 0.08906558, 0.021466792, 0.12985913, -0.07414236, 0.097165175, 0.03570361, 0.16878332, 0.12091933, -0.088370666, 0.00771227, -0.2573519, 0.22938167, 0.34918073, -0.04386937, 0.016086848, -0.058658123, 0.01409038, 0.079557955, -0.008177828, -0.025368491, -0.071634516, 0.15969054, 0.076616034, -0.20660998, 0.06996862, -0.05324099, -0.19489333, -0.15743363, 0.23085162, 0.008915866, -0.06325223, 0.07045636, 0.08953097, 0.0045366497, 0.054823436, 0.06662029, 0.05716195, -0.008734462, 0.028753871, 0.17346875, 0.038693298, -0.053642627, 0.02349669, -0.09701523, -0.059740167, -0.03384631, 0.06423872, -0.023386596, 0.033189256, 0.043823835, -0.022999533, -0.16573586, -0.01099843, 0.023098879, -0.0891741, 0.11507408, -0.20520289, -0.020794652, -0.08727089, 0.039229147, -0.011985096, 0.017513849, -0.09251549, -0.26739362, -0.07816001, -0.027473189},
   {-0.08495245, 0.07515723, -0.09898443, -0.034118343, -0.06540628, -0.0054974817, -0.081457004, 0.009032732, 0.0640249, 0.122975565, -0.1383007, -0.0255486, 0.122614935, -0.06882108, -0.09265873, -0.0062553585, 0.05104534, -0.06305385, -0.026951045, 0.034930237, 0.15000522, -0.08997084, -0.053340532, -0.06638641, -0.07184244, 0.1863656, 0.20217972, -0.041984644, 0.064088814, 0.04098972, 0.06101707, 0.061203133, 0.018155124, 0.047024768, -0.0959666, 0.14166713, -0.08974586, -0.1202735, 0.014641569, 0.018099401, -0.17034228, -0.19891353, 0.09436378, 0.03764316, 0.043553207, -0.05564688, -0.090093166, 0.039760605, -0.030055577, -0.008786647, 0.00023770332, -0.030438045, -0.083818994, 0.07615602, -0.035011012, 0.006570383, -0.0061235796, 0.082215235, 0.009984694, 0.084361404, -0.013045229, 0.13317253, 0.071588725, -0.058464658, 0.08814778, -0.23635298, 0.05064542, -0.03787012, -0.079417445, -0.010970802, -0.15771876, -0.061266728, -0.065792404, 0.074550845, 0.12049661, -0.009857826, -0.005968061, -0.21623817, 0.052373253, -0.15437908},
   {0.08987979, 0.11267931, -0.15946455, -0.1584508, -0.023918942, -0.040408168, -0.0030942382, 0.08649982, -0.0182992, 0.052927844, -0.13423093, -0.028597198, 0.12950736, 0.026138224, -0.14030376, 0.013935645, 0.17725779, 0.075748004, 0.0321941, 0.048788417, 0.052158646, 0.030946624, -0.0920491, 0.037218153, -0.084659345, 0.08064129, 0.16451202, -0.14579669, -0.13057059, -0.022000678, -0.08614157, -0.023833573, 0.15757279, 0.023172632, 0.007083943, 0.17178456, 0.06938582, -0.14732437, 0.037100747, -0.028981771, -0.11168524, -0.011403673, 0.13831225, 0.034021825, 0.067359105, 0.06220106, -0.053048126, 0.029072437, -0.023396777, 0.02192748, -0.07568924, -0.07480989, 0.07161113, 0.15459834, -0.062013865, -0.058154844, -0.007151045, -0.03223432, -0.0929771, 0.04369215, -0.011718906, 0.080181986, 0.0067686867, -0.08245072, -0.068589576, -0.22351176, 0.048134513, 0.019930415, 0.08139498, 0.035272654, -0.020527147, -0.037431758, -0.058936995, 0.06728834, 0.124725275, -0.08821311, -0.0182701, -0.078283235, 0.032209694, -0.11452252},
   {-0.05302873, 0.08879451, -0.14295548, 0.0074896845, 0.16064148, -0.0032886395, 0.06860957, -0.09231829, 0.004761218, 0.19153225, -0.22292389, -0.047979638, -0.03154101, -0.091843225, -0.038160548, 0.024663463, 0.14354128, 0.057035588, -0.051696863, -0.036511976, 0.1296279, -0.20061633, 0.05237546, 0.025972288, -0.0035089997, -0.00209681, 0.03442007, -0.08054927, -0.1603054, 0.18340543, 0.0827252, -0.004241495, 0.12419599, -0.044865094, -0.09621177, 0.14736979, 0.025563901, -0.18603836, -0.10173272, -0.02112698, -0.028160889, -0.14598358, 0.014984996, 0.0062863426, -0.019488076, 0.07054833, 0.008409545, -0.0031241786, -0.0755259, -0.08380257, 0.036244817, -0.069899045, 0.077232644, 0.16539219, 0.089717954, -0.0896511, -0.041043323, 0.03393389, -0.02104763, -0.025896072, -0.03526285, 0.12334342, 0.0149763385, 0.036070503, -0.07920443, -0.09252599, -0.029927552, -0.021379156, -0.023065582, 0.060835652, -0.11620492, 0.025887707, -0.039964076, -0.085846394, 0.1048064, -0.09551712, -0.05129713, -0.115696415, 0.018971445, 0.064955294},
   {-0.09950867, 0.11006921, -0.04581115, 0.015568727, 0.05859142, -0.047074825, 0.044862237, 0.080248065, 0.04122705, 0.1545934, -0.08677427, -0.09225701, -0.018944208, -0.033349276, -0.055644345, 0.03546436, 0.017606901, 0.032105587, -0.087292686, 0.019691736, 0.07410456, -0.15657145, 0.025086664, 0.05604485, -0.053361677, 0.0045759226, 0.07573075, -0.011973134, 0.022446876, -0.010674016, 0.009916801, 0.016416803, 0.20043355, -0.076320454, 0.004896139, 0.042124007, -0.0605309, -0.17044055, 0.0015246917, -0.021097336, -0.11383043, -0.0658133, -0.0961276, -0.06078344, -0.044963986, -0.07529094, -0.09252613, 0.042553835, -0.08714806, 0.0043805237, -0.010230042, 0.0066673853, -0.08783777, 0.1464853, -0.08449556, 0.08461833, 0.08217236, 0.02255561, -0.06459171, -0.09756316, -0.075346276, 0.10442834, 0.05511111, -0.044943474, -0.033256404, -0.0240631, 0.019308249, -0.063860476, -0.041884318, 0.09736993, -0.00429241, 0.022466352, -0.058721185, -0.05109399, 0.14021714, -0.085787326, -0.090958975, -0.1189946, -0.02561312, 0.002505463},
   {0.01515171, 0.22087932, -0.00893896, -0.01939238, 0.054977097, 0.016216444, -0.012137748, 0.050778512, 0.06366395, 0.047554024, -0.0077391705, -0.09069651, 0.073733486, -0.078626394, -0.04320395, -0.0059364107, 0.0107527785, 0.054436855, 0.0851378, -0.06296312, 0.10157057, -0.09209177, 0.07316456, -0.031699497, -0.020252047, -0.007400668, 0.13653931, -0.17143127, 0.003343332, 0.09458108, -0.08607482, 0.06644116, 0.14438532, -0.0006799925, -0.0170312, 0.06694593, 0.018927868, -0.12155476, 0.07872019, -0.0621409, -0.060937393, 0.041136514, -0.03223569, -0.06607464, -0.09911425, -0.0850108, 0.09369833, -0.033339296, 0.08945893, -0.09896502, -0.0118101835, -0.056104153, -0.048303664, 0.06742003, 0.005788879, 0.013850576, -0.060087226, -0.100490764, 0.054543488, -0.02590964, -0.014952622, 0.0032063695, 0.10205167, 0.0076854913, -0.054001458, -0.08662513, 0.032950383, -0.083562024, 0.07206749, 0.13277799, -0.15148054, -0.022731563, -0.15463565, -0.0014950486, 0.0018645353, -0.049921833, -0.04187326, -0.10270891, 0.02817131, -0.02204729},
   {-0.041148774, 0.046956595, -0.023299191, 0.038511325, 0.079949595, -0.057249267, 0.002975663, -0.031341672, 0.016129948, 0.002622592, 0.031612653, -0.069960274, -0.018327847, -0.040250316, 0.059415888, 0.0029575576, -0.034683164, -0.09171435, -0.0046506426, -0.01622356, 0.02721929, -0.11692728, 0.050251402, 0.079035245, -0.07260523, -0.07997054, 0.10584234, -0.14622976, -0.043035176, 0.09692634, -0.07710845, 0.06213666, 0.059536334, -0.07926387, -0.07073873, 0.117072, 0.028850954, -0.101812854, 0.08892504, -0.14078857, -0.029258275, -0.009956432, -0.05509911, 0.04008081, 0.008831315, -0.04153908, 0.030422084, 0.008209196, 0.03142276, 0.032035608, 0.034903906, -0.074623644, 0.03289321, 0.101916306, -0.034151748, 0.076854765, 0.039688613, -0.09070504, -0.057233687, -0.037193984, 0.0300849, -0.014809098, 0.08166712, -0.078475274, 0.062385373, -0.038797554, 0.033353493, -0.06495481, -0.026518896, 0.1252096, -0.112436734, 0.073895656, -0.13264413, 0.023105271, 0.10883793, -0.088010356, 0.0031986705, -0.10984669, 0.07647256, 0.037053},
   {-0.09409753, 0.12434006, -0.103753366, 0.07307081, 0.07476251, -0.020555345, -0.05966396, -0.09601051, -0.033643432, 0.13828681, -0.10511468, -0.03494629, 0.07240862, 0.0066419244, -0.12534304, 0.033153366, 0.07655321, -0.036088217, -0.014403602, -0.036935322, -0.016937962, -0.07291993, -0.06011377, 0.005375414, 0.032199014, -0.0542953, 0.14362893, 0.03608699, 0.0033099796, 0.107694045, -0.026509756, -0.049590554, 0.028582595, 0.076936, 0.003571621, 0.07379433, -0.07912196, -0.017336283, 0.0671915, -0.0023059354, -0.024287762, 0.05553171, 0.016789008, -0.017043224, 0.07899294, -0.087869264, -0.08722756, -0.09399399, 0.06331758, 0.009245778, -0.090385914, 0.04531018, 0.08501876, 0.02769913, -0.0059880745, 0.05664271, 0.043791562, 0.013921506, -0.041139804, -0.075625226, -0.0076957643, 0.15396287, 0.0631393, -0.08698757, 0.08900169, -0.14321537, 0.06412581, -0.004584399, 0.0057791844, -0.05558088, -0.007352424, 0.028666591, -0.03749743, -0.06940369, -0.040082928, 0.0056511536, -0.08395497, -0.07600671, -0.021847194, -0.09521265},
   {-0.058969878, -0.046402775, -0.102942556, -0.017241606, 0.0214412, 0.097573005, -0.037002582, 0.084044844, -0.089980215, 0.12036846, -0.04449527, -0.06947953, -0.014069364, -0.07274075, -0.05382568, 0.007171825, -0.05418447, -0.018256515, -0.06899673, -0.068597384, 0.03474832, -0.045143303, 0.024841413, -0.09398936, 0.013437686, 0.10362536, -0.042489376, -0.11080946, -0.050693277, 0.008520804, -0.04098625, 0.03388564, -0.03299441, 0.012305228, 0.006841712, -0.031595964, -0.06332673, -0.022988742, 0.07462395, 0.0015154819, -0.037507962, -0.07452577, 0.06993395, -0.082647614, 0.06860264, 0.035285152, 0.03687685, -0.08055727, -0.014372702, 0.025463589, -0.068352714, 0.007802117, -0.00029867445, 0.0591706, -0.005743224, 0.03899186, -0.002529104, -0.073518634, 0.01072748, -0.042900246, -0.09493479, 0.101808324, -0.058859587, 0.068989895, 0.042213283, -0.07470442, 0.011594321, -0.0953037, -0.03911015, 0.10433254, 0.0091877105, 0.06716918, 0.033193186, -0.01774201, -0.05717863, 0.000738658, 0.024351258, 0.05065148, -0.09255941, 0.041628383},
   {0.08615159, 0.05869862, -0.041058417, -0.06779091, 0.09048821, 0.064488746, -0.0554596, -0.04591704, -0.029177228, 0.018144244, 0.011342394, -0.027186368, -0.030905422, -0.008395545, 0.00041793144, 0.11597277, 0.009727619, 0.09168544, -0.058731962, 0.07778221, 0.053808395, 0.04156684, -0.023447394, 0.025498534, 0.04607129, -0.06817255, 0.051869974, -0.040651552, -0.0138295535, 0.11203583, 0.06896267, -0.063561335, 0.029227594, -0.031293023, 0.06368653, -0.007922781, 0.061487693, -0.08424116, -0.05527249, 0.0073822252, 0.046024535, -0.045947433, -0.069681816, -0.0176035, 0.025939828, -0.06263327, 0.038014032, -0.07732967, -0.061290875, -0.0073641315, 0.08630536, -0.04004686, 0.006531007, 0.08188455, 0.06995151, -0.060066633, -0.055860214, 0.07001856, 0.017771713, -0.09170341, 0.0576498, 0.05542915, -0.0250593, -0.043511484, 0.0260076, -0.13780634, -0.0034425636, 0.0229379, -0.030250229, 0.059839264, -0.017945673, -0.088635266, 0.03141296, -0.05815341, -0.04453107, 0.07013468, 0.03706086, -0.057621, -0.09048181, 0.029312883},
   {-0.020532131, 0.06832976, -0.08208922, 0.05966497, -0.05956032, 2.544908e-05, -0.023527708, 0.08435389, -0.06804074, 0.1252676, -0.030713754, -0.044737972, -0.003567805, 0.051642008, -0.11548038, -0.010777846, -0.015356951, -0.09061192, 0.0037372627, 0.06769475, 0.005688056, -0.0755489, -0.061980166, 0.07062547, -0.038634285, 0.09170558, 0.08596952, -0.014817779, -0.07676987, 0.07879108, -0.02172764, -0.036468193, -0.0043264483, -0.02589291, 0.03741899, 0.062011, -0.037621137, 0.00979015, 0.019725023, -0.10315961, -0.026883656, -0.05785005, -0.07836591, 0.011831418, 0.039201003, 0.017477982, -0.0140416995, -0.07934634, -0.008474311, 0.05842384, 0.0333186, 0.02919288, 0.081874266, 0.059205797, 0.089734875, -0.09048842, -0.09549801, -0.0820083, 0.022409081, -0.016506512, -0.004878886, 0.004731824, -0.0030196582, 0.0109534925, -0.06871505, -0.03467799, 0.0565832, -0.057752896, 0.0099185705, 0.025281683, -0.0007350133, -0.021470642, -0.11285709, -0.095563754, 0.07540866, 0.01497595, -0.061488654, -0.02551038, 0.08632738, 0.01563784},
   {0.020639136, 0.04220979, -0.05458976, 0.010761802, 0.11939482, 0.047758497, -0.05103431, 0.002848978, 0.013036176, -0.0029292088, -0.093919866, 0.08759062, -0.057775494, 0.08917604, -0.09702489, -0.017872475, 0.10231607, -0.024307199, 0.039854497, -0.08460611, 0.13635346, 0.03209947, 0.062115766, 0.06216345, 0.04505821, -0.06427265, 0.05206904, -0.07545514, 0.025199015, 0.04410944, -0.09552867, -0.07899727, 0.029019516, -0.04933122, 0.018365897, 0.08382561, 0.055727452, -0.13779141, 0.049775153, -0.14463788, 0.055357564, 0.014833806, 0.07122696, 0.0039338907, -0.0021561007, -0.0061393753, 0.005188212, -0.07562228, -0.057177346, -0.005407212, -0.06953339, -0.014578847, 0.08896163, 0.10069798, -0.09963851, -0.052686047, -0.01644841, 0.0458354, -0.012342073, -0.090989105, 0.026867852, -0.051137343, 0.044670135, -0.047831066, 0.09439344, -0.08888681, 0.008108057, -0.008722558, -0.08746317, -0.022629809, -0.11634878, -0.07575311, -0.13542204, 0.013714636, -0.044326477, -0.04818951, 0.08382925, -0.066621155, 0.051990114, -0.035896853},
   {0.04323647, 0.16950431, -0.00044876826, 0.012967405, 0.13245064, 0.05050901, 0.018602422, -0.044142228, -0.08624735, 0.10186098, -0.0635728, -0.07260062, 0.03421778, -0.051008757, -0.00504843, 0.07879468, 0.0077336896, 0.051914655, -0.027451558, 0.06686814, 0.12960324, -0.1413117, 0.066800274, -0.096701816, -0.14461862, 0.054492924, 0.069530286, 0.009497925, -0.064661175, 0.038100123, 0.007218302, -0.0035552443, 0.14103055, 0.043539565, -0.014737815, 0.058036666, 0.0074639246, -0.0125327185, 0.04177115, 0.019397203, -0.01066035, -0.039726797, 0.055167012, 0.026392404, 0.017307473, 0.0954008, 0.046579592, -0.070929356, -0.036218077, -0.0017622157, 0.017937317, 0.05459971, -0.077452034, 0.04179626, 0.050991423, 0.011607026, 0.072637945, -0.025919007, -0.040067516, 0.055840153, -0.001943171, -0.098652914, 0.033977326, -0.04440044, 0.02275236, -0.09729119, -0.04135882, -0.049466375, 0.060982354, -0.013716389, 0.013904237, -0.0951653, -0.13817075, 0.05201923, 0.05814813, -0.050735936, 0.063665904, -0.12691876, 0.024733609, -0.02162013},
   {0.07667633, 0.16079432, 0.05666521, -0.060187258, 0.05538546, 0.04368153, 0.12383938, -0.025197234, -0.061119165, 0.12898742, -0.025826436, -0.02893572, 0.023860164, -0.09512028, -0.16893838, 0.036396623, 0.04852702, -0.07027114, -0.006911763, -0.0821715, 0.14472313, -0.058521446, 0.045624606, 0.05319468, -0.094370194, 0.060866833, 0.15426667, -0.15050621, -0.11110985, 0.13140705, -0.03603823, 0.061901856, 0.21019486, -0.029271971, -0.042846557, 0.0937207, 0.013153588, -0.11228524, -0.060976718, 0.00079958217, -0.03663147, 0.05089523, -0.106846474, -0.012939691, 0.08598666, 0.065533675, 0.06917422, 0.065512076, 0.083879426, -0.054534122, -0.0025782362, 0.05646793, -0.09878438, 0.06015481, -0.015367157, -0.08221111, 0.014977744, -0.0013376402, 0.030574016, -0.032392252, 0.034855954, -0.073734835, -0.055873446, 0.00821242, 0.012489438, -0.1699481, -0.089811, 0.019756166, 0.059528135, 0.109812014, -0.08758541, 0.08947425, -0.15326895, 0.011647179, -0.0054742857, 0.0008627847, 0.0011491069, -0.09096123, -0.10039344, 0.015144001},
   {0.07143352, 0.07749512, -0.035243466, -0.046894934, 0.046956103, 0.032183334, -0.025934935, -0.071632564, -0.049838554, 0.19970529, -0.04907597, 0.0737063, -0.003656462, 0.07489648, -0.14863516, 0.08175988, 0.08759478, -0.0035974905, -0.091667615, -0.025351254, 0.068556346, -0.078083016, -0.08470042, 0.040548302, -0.04485259, -0.036026962, 0.07638763, -0.12231349, -0.031742934, 0.0034744001, -0.09219729, 0.08042285, 0.13996822, 0.01666363, 0.018367432, 0.1155518, -0.0616236, -0.12520456, -0.02688223, 0.034017183, -0.03163235, -0.029239513, 0.0046200473, 0.019320505, -0.021274842, -0.009380519, -0.059921004, 0.07256665, 0.040290926, -0.09188924, -0.03757816, -0.03858343, -0.036568396, 0.14147523, 0.009010066, -0.0036382482, -0.078343354, 0.017662348, 0.041431047, -0.024729501, 0.015778154, -0.0050371, 0.019276146, -0.028897118, -0.034767758, -0.24859104, 0.05826713, 0.06895961, -0.08711592, 0.072096825, -0.036850166, -0.04412779, -0.08375228, -0.082712874, -0.024602724, -0.0129845515, 0.06105394, -0.13528909, -0.055527925, -0.045735706},
   {0.017505726, -0.003665854, 0.02551331, -0.12624802, 0.08558432, 0.09295329, -0.0782685, -0.082516976, 0.057167467, 0.01951184, -0.22853169, -0.06951527, 0.005240246, -0.022320658, -0.100409165, 0.17696917, 0.1519014, 0.008317061, 0.06538534, 0.020702045, 0.013798289, -0.06747651, 0.023011088, -0.048701663, 0.021528658, 0.13936928, 0.11324725, -0.06826673, -0.089255214, 0.1070112, 0.016511096, -0.032119963, 0.031107645, 0.0676574, -0.0011151213, -0.0032051194, 0.045665734, -0.19895788, -0.018722497, -0.07056383, -0.08168143, -0.023155868, 0.0890809, -0.08443191, 0.07292233, 0.079381265, 0.023321718, -0.046490695, -0.022609506, -0.10002585, -0.02684731, 0.062028438, -0.043919332, 0.049944583, -0.05636927, -0.016625488, -0.07574842, -0.02523293, 0.04446397, 0.01887545, 0.037434123, -0.027712848, -0.084808834, -0.0062597645, 0.07259158, -0.11338921, 0.055574153, -0.07497224, 0.01056999, 0.041597318, -0.06140478, 0.050188493, -0.11225623, -0.04948747, 0.01617345, 0.021473333, -0.048358843, -0.22980435, 0.038656402, -0.059061095},
   {0.01653104, 0.05897199, -0.029349973, 0.0034368653, 0.056575064, 0.003989272, -0.06634215, -0.04777616, -0.069745734, 0.039086703, -0.22946635, -0.006266356, 0.14100257, -0.03719977, -0.055478483, 0.034676973, 0.19106738, 0.060878582, 0.036392115, 0.061371196, 0.032487422, -0.010445786, 0.07579558, -0.00095007225, -0.17081892, 0.1443605, 0.19364925, -0.010293458, -0.06688463, 0.09791524, -0.0078040757, -0.10092879, 0.12326771, -0.016004067, 0.049034633, 0.018793967, 0.014298003, -0.19949968, 0.014692224, 0.023566782, -0.17380647, -0.043543354, 0.10826064, -0.09927349, 0.012658949, -0.037120376, -0.091638215, 0.06288355, 0.008087718, 0.015062574, -0.04190021, -0.04463041, -0.024663435, 0.1215235, -0.054118346, 0.08202446, -0.053271245, 0.07724239, 0.04389047, 0.08243439, -0.025706641, -0.110101186, -0.0110622635, -0.080926776, -0.043543562, -0.119022995, -0.089646794, -0.07400745, -0.040412344, 0.021937346, -0.03225482, 0.009984239, 0.025042906, -0.06832851, 0.1225039, 0.0009052679, 0.0010729876, -0.18732204, 0.03876055, -0.015651485},
   {0.037696656, 0.30539715, 0.020432519, -0.073813185, 0.01603831, -0.117975816, -0.16103584, -0.013307034, -0.019373002, -0.04531569, -0.1406606, 0.0010622687, 0.24757993, 0.08356466, -0.00068111456, 0.07324576, 0.14630103, 0.060596026, 0.11539113, -0.048714474, 0.07357444, 0.06436812, 0.06225445, -0.046486765, -0.2003542, 0.07919522, 0.21330717, 0.019775078, 0.090434305, -0.11953871, -0.06386686, 0.07901412, -0.0066615, 0.08092168, -0.068246484, 0.18967329, 0.08682777, -0.14826484, -0.012441127, -0.070042275, -0.34113583, -0.06860981, 0.19229358, 0.07048142, 0.10768457, -0.09045114, 0.04197774, -0.054500815, -0.060149767, -0.07756423, 0.016615331, -0.0071676252, 0.08101321, 0.13336536, 0.07028835, -0.0816567, -0.047946513, -0.028138632, -0.032889597, 0.08765942, 0.01971732, -0.07717384, 0.015359174, 0.012911446, 0.009247087, -0.16138238, -0.023778232, -0.045287512, -0.06617184, 0.01823494, -0.095062874, -0.026586007, -0.08650878, -0.018394057, 0.055997673, 0.020209834, -0.054310642, -0.19102561, -0.039468747, -0.094506234},
   {-0.0001707843, 0.3145599, 0.14631628, -0.01910818, -0.08068556, -0.17768903, -0.24949722, 0.0057730046, -0.039015036, -0.01946926, -0.1129509, 0.042151574, 0.29512194, 0.07348495, 0.05568398, 0.048617244, 0.091517866, 0.048671983, -0.011399236, -0.08716396, 0.16890115, 0.046809196, 0.00202097, -0.08486606, -0.26462826, 0.22961113, 0.2946148, 0.039382078, 0.0061181574, 0.019174049, 0.06257808, -0.057277262, 0.057245143, -0.054509122, 0.08739541, 0.10924187, 0.067288585, -0.09995559, -0.023008091, -0.07337726, -0.21970099, -0.10689128, 0.25566286, -0.088855684, 0.08385437, 0.018476255, 0.024901561, 0.08711737, -0.10081483, 0.057687324, 0.07941104, -0.088000834, 0.005555253, 0.12940803, -0.011412948, -0.08699703, -0.076178215, 0.08399288, -0.08583464, 0.03556129, -0.019669548, 0.30673775, -0.068944536, 0.054524362, -0.009254456, -0.30884606, -0.09402473, -0.022462877, 0.07022961, 0.070528485, -0.090086736, -0.019608062, 0.009446794, -0.015966011, 0.027198767, 0.058170803, -0.05400203, -0.3868446, 0.0028709539, -0.22266425},
   {0.010588053, 0.289202, 0.04443009, -0.087697096, -0.15752342, -0.1807639, -0.32134923, 0.05258415, -0.026712712, -0.0026556042, -0.07838856, -0.06924392, 0.16929889, 0.033839233, -5.8676593e-05, 0.07966218, -0.0057736207, 0.093634985, 0.0022463496, 0.02379374, 0.14168258, 0.10186422, -0.021056317, 0.038970046, -0.16650312, 0.19859271, 0.2715383, -0.021592516, 0.017140321, -0.15461738, -0.07476823, 0.02069326, -0.014394957, 0.060982123, -0.06410321, 0.17896284, 0.010857635, -0.11771402, -0.03460107, 0.040034834, -0.17904112, -0.12893964, 0.17562209, 0.040299684, 0.09295074, -0.05224704, 0.0707443, -0.040980928, 0.05810287, 0.0796621, 0.024281427, -0.06855491, -0.017125111, 0.082405515, 0.04427708, -0.10089007, 0.03342635, -0.092475854, -0.011062115, -0.0026644634, 0.03525833, 0.37933838, -0.04390775, -0.09123875, -0.08196449, -0.108227484, 0.024822008, -0.0026125978, -0.048762877, 0.09994117, -0.071842134, -0.0665839, 0.08065044, -0.045022123, -0.029300079, -0.02998311, -0.03621887, -0.27166164, 0.0511956, -0.19414464},
   {0.05659228, 0.07176093, -0.09033448, -0.019846722, -0.12110139, 0.08981699, -0.12722169, -0.052343242, -0.08239929, 0.017984703, -0.10399339, 0.0368977, 0.106494136, -0.055930853, -0.082572065, 0.16111034, 0.09895906, 0.04625068, -0.010559548, 0.0049176756, -0.04686505, 0.08726014, -0.0536839, -0.012804251, -0.053517327, 0.07480431, 0.11609263, 0.022600897, -0.15284654, -0.083283275, -0.029340304, 0.06401506, 0.08989962, -0.058224272, -0.006335575, 0.06565798, 0.07581435, -0.12223975, 0.02161682, 0.10575868, -0.07692278, -0.14940396, 0.015224117, 0.02398008, 0.0046681454, 0.06877411, 0.0025966838, 0.042670704, 0.07175143, 0.013255939, -0.016293079, 0.014555301, 0.057513922, 0.091629125, -0.09035151, 0.04594426, 0.027843509, 0.030060727, -0.027802646, 0.062184885, -0.029610902, 0.2949245, 0.028476099, 0.1146048, 0.09386561, -0.10052279, -0.07946696, 0.034701034, -0.075513095, -0.036336917, 0.039089706, -0.09493859, 0.15124303, 0.038101953, 0.075600065, -0.07504991, 0.03804617, -0.15075904, -0.045818444, -0.056160923},
   {0.046567384, -0.15417208, -0.006874666, -0.18006037, 0.050879113, 0.179373, 0.16900131, 0.039117675, 0.02444925, 0.15222384, -0.1784462, -0.005686839, -0.1464402, 0.028081529, -0.14379533, 0.256694, 0.24400452, 0.017559722, -0.2779879, 0.0469424, -0.060675547, -0.19111001, 0.093186356, -0.034115747, 0.21901904, 0.15659136, -0.0054028505, -0.04746036, -0.14640169, 0.1628332, -0.022797244, 0.07341885, 0.21848306, 0.004135834, 0.0773652, -0.059560087, 0.019401267, -0.06790839, -0.007943589, 0.21511447, 0.22700898, -0.1489925, -0.20618421, 0.017822811, 0.15055813, 0.029912926, -0.08361886, -0.009357366, 0.0011227555, 0.07025753, -0.031114772, 0.084361635, 0.087637745, 0.017424112, -0.09252779, 0.00070346147, 0.07233515, 0.027251147, -0.036765855, -0.03867198, -0.058077253, 0.4439381, -0.09814963, 0.098580495, -0.020528257, -0.082279116, -0.025558641, 0.023444623, -0.020418331, -0.06285076, 0.16082323, 0.08459716, 0.21010318, 0.08696258, 0.12833738, 0.012321688, -0.041489817, 0.07397243, 0.041514933, -0.01624392},
   {-0.048727434, -0.21497084, 0.0973239, -0.16471252, 0.32423753, -0.057409026, 0.19323054, 0.034491193, -0.05048141, 0.31022018, -0.22696106, -0.002243969, 0.013981929, -0.08648038, -0.1109257, 0.09880056, 0.30376345, 0.012204014, -0.38780683, -0.060009733, 0.083810925, -0.23803547, -0.03772213, -0.040050328, 0.13362385, -0.008950815, -0.03266861, -0.3077707, -0.34762084, 0.27402467, 0.030840695, -0.01164513, 0.1475783, 0.042350948, 0.024850523, 0.1368599, -0.08606672, -0.028470285, 0.070707515, 0.09298139, 0.15722635, -0.19053799, -0.2367222, -0.062000412, 0.1107026, -0.023359478, 0.0025425255, 0.058488652, -0.04007036, 0.041659664, 0.03193531, 0.061112102, 0.0634423, 0.11654872, 0.06210463, -0.038894866, 0.012263616, -0.03634747, 0.08517488, -0.04409683, 0.046341576, 0.40031183, -0.22573614, 0.19818145, 0.08420307, -0.13359393, -0.02329711, -0.024535341, -0.006337978, 0.032661956, 0.0021376968, 0.053741544, 0.025085675, -0.05868393, -0.20631035, -0.024824701, 0.018184923, -0.08086654, 0.05445884, 0.28197122},
   {-0.09879103, -0.18589985, 0.19097677, -0.3097921, 0.28873655, -0.08885951, 0.033198558, 0.06814023, 0.010650697, 0.17246866, -0.33852258, 0.03410842, 0.09373712, 0.05882574, -0.0789885, 0.24586867, 0.26180935, -0.009566061, -0.3400495, -0.062521346, -0.016801609, -0.28981343, -0.08194992, -0.057733282, 0.16642062, 0.17071368, 0.097892754, -0.27007547, -0.22786933, 0.45076793, -0.098504126, 0.05475721, 0.05829414, -0.048165593, -0.0852483, 0.22146955, 0.04195823, 0.09272204, 0.008378634, 0.19044606, 0.21605775, -0.22799914, -0.20720026, 0.03620962, 0.1044235, -0.038169973, 0.043397106, -0.046702493, -0.005155453, -0.03880565, -0.008313499, -0.060515657, 0.03362166, 0.105110444, 0.06987474, 0.04806239, -0.0191171, -0.06911553, -0.016299896, 0.027071912, -0.007631324, -0.006072266, -0.27346477, 0.2718055, -0.04240173, -0.21773845, -0.09659215, -0.076745085, 0.06742688, 0.123960786, -0.21417136, -0.00949406, -0.062508844, 0.034545194, -0.099848785, -0.032064386, 0.0061537167, -0.13384698, -0.045182146, 0.39027593},
   {0.05944089, -0.15022181, 0.21881275, -0.17037167, 0.2434684, 0.07575209, 0.08866656, -0.09675206, -0.0012161761, 0.19856705, -0.25221786, 0.08749144, 0.13726038, 0.02341383, -0.19571841, 0.2181998, 0.36008486, -0.06510411, -0.40362555, 0.02644546, 0.015257685, -0.32420924, -0.040841673, 0.009524007, 0.23832183, 0.032409903, -0.06612158, -0.20631635, -0.33900866, 0.32134908, -0.09740395, 0.07738437, 0.12209027, 0.051732857, -0.069603704, 0.14358191, 0.022646477, 0.023093676, -0.016092485, 0.17507766, 0.15898806, -0.27267456, -0.23114075, -0.0022036529, 0.06686542, -0.07812939, 0.08842122, 0.073868886, -0.009564138, 0.062828824, 0.002147697, -0.009316564, -0.06634271, 0.044171818, -0.013873245, 0.03883108, -0.06467526, -0.07717993, 0.06839179, -0.09004833, -0.0055111498, 0.05597182, -0.39550954, 0.35180178, -0.070522204, -0.19644646, 0.07246098, 0.0034966054, 0.007529676, 0.0020698602, -0.13213623, 0.007173339, -0.07451664, -0.07896049, -0.06239008, -0.02265662, -0.09591651, -0.012817756, -0.0075920904, 0.2796264},
   {0.06633755, -0.0479676, 0.047429122, -0.10035591, 0.292365, 0.055342976, 0.20724565, -0.033036575, -0.025645455, 0.15120356, -0.1554551, -0.030432228, -0.0019124494, -0.0066303834, -0.15625602, 0.056133877, 0.11858903, -0.008696474, -0.23623586, -0.04881066, 0.06760741, -0.24328205, -0.07624427, 0.020220201, 0.23590475, -0.028097203, -0.2073056, -0.12317102, -0.24980839, 0.16116212, -0.08543313, -0.06736845, 0.039141506, 0.009321542, 0.047345713, 0.07296768, -0.020053191, 0.09729787, 0.009483968, 0.033873204, 0.27990136, 0.059899937, -0.14674488, -0.030213539, 0.17955999, -0.031654418, 0.042829715, 0.010034482, 0.058064062, 0.07389545, -0.050104745, -0.03816583, 0.08054094, 0.116210245, -0.017774476, 0.050847583, 0.027961535, 0.090315945, -0.059507318, -0.034091678, 0.076154746, 0.003275709, -0.089750014, 0.24528623, 0.020511337, 0.058425333, -0.07572177, -0.07243491, 0.05968047, -0.042283185, -0.11287729, -0.04467061, -0.37960592, -0.05448468, -0.094216816, 0.08982467, -0.07399905, 0.14784847, -0.073340245, 0.16760784},
   {-0.04729737, -0.08746861, 0.044329144, -0.056569807, 0.14972137, -0.068042316, 0.07058624, -0.019470802, 0.08250885, 0.09518559, -0.029335802, 0.058342118, 0.05931737, -0.059697002, -0.14143674, -0.034281604, 0.14064538, 0.022407576, -0.14351325, 0.05703317, -0.0015432315, -0.19349745, 0.028694779, -0.0474213, 0.14838693, 0.048859216, -0.11755009, -0.105759695, -0.10035936, 0.2634802, 0.083726905, 0.06515294, -0.041112956, -0.0010028379, -0.03629265, 0.13528411, -0.092005484, 0.042203944, -0.08631504, 0.07378654, 0.27349448, 0.06414562, -0.16142605, -0.02712948, 0.08786117, -0.0027351826, 0.020389915, -0.09212429, 0.03577626, -0.03180332, -0.008402929, -0.02223209, -0.091227196, 0.054914698, 0.06714763, 0.04216081, -0.026429906, 0.038363237, 0.0769692, -0.002405294, -0.009689368, 0.09037641, -0.26124963, 0.2782783, 0.050377674, -0.041992426, -0.008148416, -0.017565047, -0.09530388, 0.09608628, -0.17350715, -0.022248711, -0.24744679, 0.032758925, -0.07498902, 0.07694966, -0.08871183, 0.09853552, 0.074110284, 0.18870147},
   {0.011180317, -0.07654594, 0.028882576, -0.019839907, 0.14354673, 0.0036359904, 0.22386433, 0.0072362, 0.037251327, 0.12678047, -0.023657808, 0.025042867, 0.038162448, -0.07652033, -0.122406386, -0.030848363, 0.12853774, 0.032775678, -0.17103365, -0.009266192, -0.04351081, -0.2216372, 0.0778138, -0.058936074, 0.09773888, 0.003934881, -0.1437501, -0.17736502, -0.23819052, 0.11705448, 0.008154246, -0.03410865, 0.022270033, 0.007642751, -0.07395018, 0.07410561, -0.097018994, 0.16051099, -0.10144666, 0.016556798, 0.11375708, 0.036990423, -0.17085122, 0.062202226, 0.04661597, -0.064505845, 0.057622857, 0.026984163, -0.014423367, -0.009160658, 0.045564823, -0.031425223, 0.04542446, 0.07027918, 0.008609186, 0.01612037, 0.0849995, -0.015822794, 0.091815, -0.0014974964, -0.035717692, 0.14897157, -0.1175214, 0.17091517, -0.045154627, -0.09794214, -0.056998692, 0.042958457, 0.016073495, -0.08131536, 0.06811778, 0.009559543, -0.22828299, 0.07669754, -0.048244286, 0.026694082, 0.048468444, 0.15845795, -0.0145890815, 0.22735211},
   {0.0849991, -0.22514033, -0.027747361, -0.19549723, 0.15204448, 0.15912381, 0.23002021, 0.03720907, 0.014368374, 0.15818883, -0.058195595, 0.021103276, -0.0652494, 0.042179592, -0.271666, 0.13329929, 0.14525366, 0.03313739, -0.24177434, -0.012324359, -0.14620452, -0.24205452, -0.059777904, -0.093222275, 0.25865778, -0.048736844, -0.16249345, -0.123023, -0.30366057, 0.1622613, -0.008313542, 0.016487053, 0.12372515, 0.047399193, -0.0164396, -0.12453209, 0.04317821, 0.13044544, 0.017119646, 0.10322873, 0.32201782, -0.14068179, -0.30825973, -0.023382008, 0.3712699, -0.031466506, 0.009616971, -0.045898378, -0.011003474, -0.08439749, -0.0033600777, -0.048936058, -0.091172695, 0.03510688, 0.04505974, -0.059846092, -0.073848315, -0.034721415, 0.03281652, 0.034900755, 0.07861217, 0.10904872, -0.25404105, 0.08118067, -0.0568931, -0.028717922, 0.07734793, -0.052349072, -0.092718504, -0.16625756, 0.13766879, -0.011026077, -0.067851685, -0.06429242, -0.063157745, -0.088158295, 0.08153149, 0.24282403, -0.09169951, 0.22625065},
   {0.013488754, -0.027744701, 0.010724933, -0.13453057, -0.088099755, -0.07713209, -0.025684003, -0.028015366, 0.039421078, 0.017805932, 0.029754158, 0.07160321, 0.08011491, 0.01028882, -0.060632963, 0.043600198, 0.11616225, -0.08608468, 0.031162998, 0.016105885, -0.14246728, 0.07595534, -0.0331297, 0.0023585707, -0.010074818, 0.07901073, 0.070099935, -0.025189042, 0.017960433, 0.054332644, 0.08329206, -0.020080024, 0.01511958, -0.08700014, -0.011228635, 0.0023641943, -0.015447662, 0.0076405434, 0.036392644, 0.029135182, -0.03885227, -0.09855435, -0.018344935, 0.0012686008, -0.041305784, 0.082933776, -0.01559975, 0.045088902, -0.06373533, -0.0295651, -0.040161822, 0.08184406, -0.09142484, -0.058547642, -0.08568545, -0.045073453, -0.02411813, 0.06449625, 0.053960092, 0.05563878, 0.09198696, 0.12715812, 0.010389853, -0.01542748, -0.046501674, -0.123358436, 0.043660745, 0.08751374, 0.02882792, 0.013929107, 0.053709548, 0.041813876, -0.06062817, 0.046811037, -0.0013368699, -0.046776842, 0.06466542, -0.026286764, 0.048828304, 0.07699535},
   {-0.071865715, 0.1260849, 0.0056444546, -0.07744495, -0.013977516, -0.048238635, -0.26057178, -0.06549088, 0.042757787, 0.013303378, -0.06733257, -0.06501381, 0.121782035, 0.0070929825, 0.12637979, 0.18446991, 0.119578995, 0.013663039, 0.016950037, -0.00947578, 0.07945239, 0.008254754, 0.058522515, -0.09806332, -0.13687162, 0.24894899, 0.16949204, -0.033631653, 0.09789898, -0.114555135, 0.053498022, 0.058342595, -0.117198, -0.061213925, -0.09554636, 0.04284176, -0.013233677, 0.031490706, -0.074309394, 0.14542943, -0.2865781, -0.23449442, 0.18576528, -0.079926826, -0.03308938, -0.024539933, 0.03984625, 0.06349818, 0.023878586, -0.05342303, -0.06432252, 0.0833024, 0.006257669, -0.108941466, 0.08409883, -0.07491745, -0.08350529, 0.039772756, -0.0001193434, 0.08252955, -0.030425668, -0.012916617, -0.096182935, -0.03129065, 0.04118272, -0.13354313, -0.0077143363, -0.054216634, 0.04341968, -0.021319203, 0.042455073, 0.033169948, 0.07989653, -0.053834293, 0.04919333, 0.03207784, 0.038408067, -0.2368717, -0.040652957, 0.040383764},
   {0.0334092, 0.10165347, -0.046611823, -0.019293996, -0.10715873, -0.030421492, -0.27936915, 0.0035450493, -0.0052932925, -0.058596484, -0.14836113, 0.020169847, 0.23468599, -0.00534942, 0.12821244, 0.006520973, -0.015744444, 0.05482886, 0.056865256, 0.012686901, 0.13015597, 0.1628238, 0.053040124, 0.032925364, -0.13029313, 0.26347214, 0.27674562, -0.073013335, -0.044272922, -0.12288812, -0.089791484, -0.048736893, -0.09487266, 0.07164162, 0.0463487, 0.16222206, 0.036108837, -0.07631797, -0.05644608, -0.015018111, -0.2944403, -0.12845837, 0.24442428, -0.06054022, 0.049068347, 0.00078403205, 0.04949891, 0.031716257, -0.022897482, 0.022435213, 0.024882115, -0.050692208, 0.07427403, 0.02627901, -0.08317973, 0.07253029, 0.07172947, 0.06915285, 0.04492923, 0.07696033, -0.06442476, 0.12070695, -0.039215162, -0.1167072, -0.027488895, -0.2063348, -0.06611428, -0.0524064, -0.06194546, 0.13015261, -0.012745418, 0.091206774, 0.0066130594, 0.041017372, 0.06335791, -0.009537645, 0.01907805, -0.1882316, -0.016666358, -0.10451717},
   {0.034001153, 0.107216194, -0.08542606, -0.13912867, -0.014578133, 0.014514061, -0.25703704, -0.07335067, 0.060056742, 0.0024097823, -0.18268487, -0.005800857, 0.15819857, 0.094843306, -0.079501055, 0.15291215, 0.0033213259, 0.035355516, 0.14062503, 0.057357725, 0.010569198, -0.0067030904, 0.0034493431, -0.093451746, -0.071913995, 0.1299418, 0.2467977, -0.050108027, -0.06664859, -0.169177, 0.053048406, -0.018579308, 0.057261363, 0.029843442, 0.077553324, -0.02198344, 0.07419204, -0.097676, 0.04836432, 0.038699426, -0.25303045, -0.09545162, 0.19609532, -0.07999595, -0.03227901, 0.015921459, -0.067337066, 0.039671436, 0.020645918, -0.052609876, 0.006091401, -0.03605266, 0.07324527, 0.06928747, 0.0051618954, 0.08380792, 0.078194514, -0.05325576, 0.023599274, -0.082328446, 0.06402188, -0.022561852, 0.10783828, -0.06682217, 0.0073091835, -0.23333402, -0.08857237, 0.005894919, -0.05494861, 0.083475694, -0.034971338, -0.07725937, 0.15776013, 0.07557578, 0.13847795, 0.023327395, 0.019998675, -0.12179315, -0.045298595, -0.1462739},
   {-0.08232596, 0.09211048, -0.15637982, 0.011545446, -0.12453503, 0.12086625, -0.07490048, -0.06523923, -0.043085523, 0.035004877, -0.08748237, 0.004661395, 0.06613489, 0.052791886, -0.09410445, 0.0903093, 0.10016039, -0.055923194, 0.041878954, 0.0676903, -0.0026249215, -0.0662215, -0.012105033, -0.043184895, -0.052387174, 0.18865527, 0.1658439, -0.06951432, 0.020954464, -0.10507975, -0.05692464, 0.029853033, -0.004742006, -0.03743929, -0.07816105, 0.10954588, -0.04476603, -0.16281502, 0.085418016, 0.048006725, -0.18350652, -0.03192971, 0.18694599, -0.06829606, -0.043722555, -0.0065453127, 0.0051989034, -0.08287214, -0.08000704, 0.056659944, -0.06554514, -0.07173468, 0.040817138, 0.1632251, -0.03445567, -0.07046759, 0.041976284, -0.08185524, 0.070805974, -0.015361598, 0.048115425, -0.014342113, 0.03253149, 0.076173596, 0.05254831, -0.19248672, -0.0972886, 0.03283435, -0.09339145, -0.049116112, -0.017232524, -0.08760731, 0.004177584, -0.050309148, 0.17437506, 0.059662662, 0.0886724, -0.22755001, -0.057241477, -0.09959276},
   {-0.0135650225, 0.14612737, -0.153153, -0.06412953, 0.09895594, 0.1548815, -0.08537163, -0.06768551, -0.07363801, 0.16913731, -0.17550835, -0.038818054, 0.039962422, 0.086227484, -0.06597505, 0.120480746, 0.08101987, 0.01970414, 0.019062066, -0.08112454, -0.06544835, -0.041538358, 9.084493e-05, -0.032763798, -0.13492186, 0.13554645, 0.09026995, -0.093770914, -0.18546768, 0.003184739, -0.083881974, -0.017107002, 0.22307855, -0.037915386, -0.09696725, 0.011549233, -0.010216918, -0.23101111, 0.08137434, 0.021241711, -0.010259337, -0.014345525, 0.10249868, 0.071109176, -0.045443706, 0.047684826, 0.09548216, -0.04919035, 0.043559484, -0.03284047, 0.088263996, 0.08817419, 0.00054602633, 0.10821252, -0.09097894, -0.032222703, 0.0005652724, -0.060656793, 0.07400259, 0.06473086, 0.06352431, 0.100228, 0.09108952, -0.03574114, 0.036530294, -0.07917453, -0.09421692, -0.043311864, -0.054887865, -0.01959014, 0.012420315, -0.081047095, -0.0591158, -0.051037315, 0.07914474, 0.003695786, -0.09770762, -0.058126725, 0.088376954, -0.132135},
   {0.048972443, 0.13526797, -0.20240022, -0.012228232, 0.02601021, 0.050604142, 0.047177643, -0.017618826, 0.055934794, 0.23866063, -0.21065749, 0.08493539, 0.033244945, 0.067586176, -0.17905737, 0.076963425, 0.21440186, -0.007040702, -0.029348461, -0.055693176, 0.033789508, -0.13285324, -0.0708967, -0.09890488, -0.08553506, 0.017113863, 0.14352395, -0.05239019, -0.192509, 0.121195145, -0.006907333, -0.081705324, 0.2697492, 0.038620144, 0.0048484523, 0.10912205, 0.06250534, -0.22215176, -0.07163867, -0.061554484, -0.054846004, -0.01174817, -0.10200964, -0.08052042, 0.08737533, 0.051276974, 0.076561235, 0.05234354, -0.08069039, 0.041979555, 0.020460442, -0.0022117868, -0.060753, 0.23031758, -0.080608435, 0.011659693, 0.07392619, -0.073859975, 0.042792417, 0.062946774, -0.008781254, -0.0033776308, 0.059546907, -0.030872311, -0.058835015, -0.18635696, 0.006433267, -0.09862944, 0.012094431, 0.070341304, -0.03114148, -0.048489086, -0.11284834, 0.05015239, 0.1484584, -0.04677935, -0.032471947, -0.17355801, -0.09059122, 0.05005237},
   {0.009486648, 0.114152454, -0.065564565, -0.07991684, 0.07824502, 0.12682025, 0.0018344221, 0.01318274, -0.0927557, 0.2354429, -0.083855785, 0.018536335, 0.0635531, -0.023268476, -0.08888766, 0.008007529, 0.21845457, 0.08859251, -0.10974842, 0.029576432, 0.13773611, -0.22405455, -0.062679514, 0.07023863, -0.15759388, 0.07602455, 0.06040441, -0.15197656, -0.07992028, 0.07742256, -0.07920748, 0.013757449, 0.16873182, 0.089500256, 0.04453961, 0.123937465, 0.06999434, -0.2328599, 0.07149288, -0.12968306, 0.01667235, -0.08753125, 0.005548071, 0.07088363, -0.06826986, -0.006043859, 0.024268255, 0.0041274596, 0.035986084, 0.056253392, -0.019472703, 0.02540284, -0.0510785, 0.17689645, 0.05292576, 0.053572204, -0.08731612, 0.08515967, -0.09111036, -0.026559865, 0.068872444, 0.008070987, -0.078187875, 0.028673247, -0.0404652, -0.23529796, -0.0008851642, 0.0851865, -0.027419537, 0.09671739, -0.01709505, -0.0034162838, -0.09675502, -0.05054441, 0.11337942, 0.04823657, -0.051951207, -0.21193025, 0.044551987, 0.016410386},
   {-0.008912739, 0.13286483, -0.09509824, -0.056716256, 0.108455874, 0.08107975, 0.10409802, -0.07934758, 0.036424417, 0.16867158, 0.012062871, -0.03541476, -0.049724165, -0.05420911, -0.016854761, -0.033271912, 0.12801778, -0.010919236, 0.02725961, -0.030280773, 0.038589958, -0.0987278, -0.054225482, -0.019545697, -0.09436245, 0.054152742, 0.16517477, 0.007101729, -0.13685974, 0.07388078, -0.08663624, 0.08023661, 0.20879927, 0.049731556, 0.015398174, 0.08987284, -0.07266906, -0.10194255, -0.06955914, -0.07296525, -0.043664344, 0.08970528, 0.04976832, 0.016504224, 0.038577393, 0.018655472, 0.040026, -0.00671993, -0.07690657, 0.012816047, -0.054492783, 0.0045263395, -0.038254097, 0.19713534, -0.086313896, 0.0074108685, -0.039264534, 0.014929742, 0.062281527, 0.04600184, -0.0775858, 0.12617977, 0.0090407645, -0.026489869, 0.07006989, -0.09979502, -0.0005620195, -0.019030908, 0.074593164, 0.08522777, -0.1475456, -0.018869068, -0.09025561, 0.0025568008, 0.14618537, 0.0030511841, -0.06075536, -0.100149825, 0.013949663, -0.03224477},
   {-0.05213921, 0.1267648, 0.0033435118, -0.009677668, -0.00620668, -0.004722908, -0.018319216, -0.07819879, 0.065470256, -0.0027637223, -0.1488856, -0.101453856, -0.09516519, -0.09072816, -0.16459742, -0.008720935, 0.009617596, -0.023059316, -0.051542785, -0.017383909, 0.10364286, -0.061505437, -0.08216179, 0.0771056, -0.097220495, -0.018003155, 0.06217162, -0.0018422514, 0.022665078, 0.08783588, -0.049859025, -0.044763274, 0.15234442, 0.0771357, -0.028935859, -0.010848295, 0.077920474, -0.19223852, 0.049424518, -0.091549836, 0.050815158, 0.013548841, 0.06303354, 0.026719658, -0.075163625, 0.0625928, -0.004841082, 0.05566379, -0.087158516, 0.06060443, 0.043479882, -0.038829207, 0.04664529, 0.16578458, 0.04325365, -0.09369432, -0.038098153, -0.0882358, 0.025838546, -0.0028728694, 0.07157136, 0.087974355, 0.03346712, -0.0021949315, -5.287677e-05, -0.12171694, -0.07222271, 0.052807707, -0.04936992, 0.0648806, 0.028868705, -0.0015655773, 0.060189262, -0.021383684, 0.11625798, 0.07890002, 0.014993242, -0.074229464, -0.040712688, -0.044149585},
   {-0.074374765, 0.08609258, -0.054230858, -0.027232688, -0.023971604, 0.01952177, 0.10813897, 0.045552865, 0.03178428, 0.11325178, 0.009275406, -0.049281824, -0.01579122, -0.0766615, -0.15151773, -0.0272027, 0.09179442, -0.054645713, 0.0065605557, -0.078482956, 0.0036028905, -0.023184458, 0.048651583, 0.027200727, -0.08546947, -0.018361537, 0.11593749, 0.06495558, -0.022077842, -0.09626253, 0.026078753, 0.07974904, 0.023375664, 0.0692337, 0.068750225, 0.08826049, -0.09671735, -0.1589488, -0.07720567, -0.02365594, -0.017231645, 0.034644585, 0.056332503, -0.006889779, -0.034659684, 0.007828176, -0.057778392, 0.040290724, 0.008615248, -0.09597052, 0.0011330098, -0.09754617, 0.006936813, 0.1341589, -0.010859367, 0.00096070784, -0.06863562, 0.007322033, -0.09515898, -0.06868599, -0.07368088, 0.1503567, 0.08023226, 0.0074152295, 0.03456954, -0.025404824, -0.008114271, -0.09121517, -0.07852654, -0.023723582, 0.10173003, -0.020742448, 0.09388866, -0.030992873, 0.08072709, 0.00079098344, 0.04970842, -0.014016723, 0.062960744, -0.06642897},
   {-0.07457664, -0.015030328, -0.03850979, -0.029408718, -0.013659231, 0.121307485, -0.0026948955, 0.010430181, -0.00043980524, 0.027916636, -0.11047248, -0.04150949, 0.0007540735, -0.08135361, -0.07846987, 0.022068413, 0.050309893, -0.024707861, -0.05678841, 0.004034661, 0.011320617, -0.11120811, -0.07737333, 0.010559335, 0.013036493, 0.12227367, -0.05181439, 0.051852092, -0.12177018, 0.04312545, 0.063806936, -0.09742119, 0.14176841, 0.001754602, -0.027582213, 0.026311928, 0.07946586, -0.01327735, 0.05130147, -0.05586904, -0.055516697, -0.036735862, 0.089005, 0.02611307, 0.04250286, 0.018867001, -0.06074455, -0.04395606, -0.08430459, 0.057327256, 0.05709497, 0.06554045, 0.07903068, 0.09859817, 0.08149646, -0.033303864, -0.06662221, -0.05417075, -0.07176888, 0.044585373, -0.074504696, 0.17362612, 0.0002757365, -0.036839385, 0.039892353, -0.14759439, 0.024964593, 0.06430778, -0.04085328, 0.084850304, 0.07263375, -0.10021409, -0.03290092, -0.071739644, 0.033767976, -0.070586555, -0.008148304, -0.081354134, 0.020869816, -0.013181228},
   {0.06255622, 0.040661052, 0.016341493, -0.12148297, 0.09645339, 0.13667957, 0.026921771, 0.0035821316, 0.033771776, 0.032452635, -0.04481461, -0.10006977, -0.08077968, 0.07593859, 0.0055447174, 0.09299073, 0.021207687, 0.046576418, 0.018316649, -0.061205853, -0.0337963, 0.011366055, 0.0127387345, -0.09171917, -0.05245345, 0.031099845, 0.08173485, -0.09854214, -0.03646191, -0.04526401, 0.0476684, -0.008891182, 0.02209834, -0.09131772, 0.08494013, -0.010916927, -0.03863485, -0.1119435, -0.04198308, -0.0046598143, 0.06875418, -0.0127684735, 0.078418605, 0.02761142, 0.07863295, -0.052509487, 0.052256666, -0.0038051016, 0.08402644, 0.0039694747, 0.06298243, -0.05611668, 0.039269965, 0.1135457, 0.05998555, 0.04048767, -0.06365466, 0.01216754, -0.037849475, -0.099790476, -0.0054666847, 0.043594662, -0.058771428, -0.0042828396, -0.016260698, -0.007350031, 0.074500635, 0.056884956, -0.06385906, 0.025295403, 0.03587265, 0.088892244, -0.0020855342, 0.031245697, 0.15139996, 0.03181889, 0.050881278, 0.064522244, -0.084389016, -0.009904385},
   {-0.01747473, -0.06383938, -0.01992272, 0.00599323, 0.06728437, 0.05328335, -0.062462743, 0.037120257, 0.01575911, 0.08824517, -0.1453566, -0.017825918, 0.051993378, 0.048509963, -0.15060805, 0.06224505, 0.14577064, -0.06539478, 0.041136622, 0.0012502567, -0.06909486, -0.07111962, 0.08870948, -0.016662292, 0.01445578, 0.009582704, 0.05252355, 0.028522884, -0.075616844, 0.060166474, -0.0061406377, -0.088163175, 0.050870277, 0.044060383, 0.023277901, -0.01249733, -0.0985488, -0.0330919, 0.08815228, -0.017779531, -0.053432558, -0.07923809, 0.0594801, -0.06324987, 0.04591335, 0.061250396, 0.03734868, 0.083163485, 0.05809722, -0.013559007, 0.04403364, 0.059744485, 0.05711095, -0.0023817949, -0.06205794, -0.064686105, -0.024650156, 0.008408691, 0.03571526, 0.03454896, 0.0042010397, 0.06345859, 0.07577361, 0.014377299, 0.073560394, -0.025846416, 0.07161761, -0.054555386, 0.0023407117, -0.0010512758, 0.0521346, -0.032672536, -0.024306739, 0.00025659506, 0.11828756, 0.014398955, -0.08348583, -0.07825653, -0.0554984, 0.053937335},
   {0.07791026, -0.05314649, -0.046753395, -0.04926178, 0.0850141, 0.11096314, 0.031740222, -0.0030967975, 0.07078228, 0.17817678, -0.105975434, -0.08964553, 0.028335026, 0.021638118, -0.12999788, 0.06685615, 0.080504574, -0.0015000924, 0.014576938, 0.08790848, 0.03938282, -0.12188389, 0.053839378, -0.059251495, -0.089345895, 0.057237543, 0.07552493, -0.11103132, -0.041901045, 0.031919986, -0.017578922, -0.073551685, 0.089986645, 0.023624362, 0.06693366, -0.062820755, -0.014650559, -0.15108053, -0.036769126, -0.08530065, -0.09244012, 0.06452634, 0.040666673, 0.029037246, -0.029189255, 0.033575542, 0.055331953, 0.050551336, -0.011114168, -0.019601164, -0.0562384, 0.07447728, -0.0026962084, 0.025180338, -0.00577421, -0.092186935, -0.0061339787, 0.03183314, -0.095507205, -0.026153717, 0.019492313, 0.043697264, 0.0038673093, -0.095890135, 0.05747945, -0.021951154, -0.049035028, 0.017299464, 0.08284628, 0.008816169, 0.010879467, 0.022741906, 0.018308654, -0.060643908, 0.090065494, 0.035527073, 0.071254455, 0.008907714, -0.06709541, 0.06300432},
   {-0.038013317, 0.13934322, 0.026184767, 0.06132972, 0.11318725, 0.13874426, 0.025622511, 0.046943735, 0.021437664, 0.10327882, -0.013193965, -0.05556794, -0.013182312, -0.06450372, -0.122326896, 0.1159882, 0.16509058, 0.081957765, -0.09130746, -0.08519926, 0.09121351, -0.13113762, 0.082418285, -0.08191067, -0.14141831, 0.09688516, 0.011943073, -0.0068611917, -0.10464028, 0.0035143993, -0.066994295, 0.044777963, 0.14088377, 0.013291083, -0.029516628, 0.09123075, -0.06427786, -0.09282257, -0.075642966, -0.0019469182, 0.0498952, -0.04478069, 0.0012521218, -0.025721202, 0.013263755, 0.059311755, -0.0897249, -0.0032854336, 0.011358719, 0.0116148945, -0.00816787, -0.056801762, 0.0114303, 0.19749174, 0.009148833, -0.08590269, -0.022033084, 0.06276519, 0.058296986, 0.06463683, 0.08712249, -0.030275336, 0.005088621, -0.030536834, 0.0823404, -0.110260144, -0.021861367, -0.06889587, 0.07942038, 0.07384345, -0.05830568, 0.06619119, -0.06805386, 0.007539521, 0.03346805, -0.08588403, -0.045503132, -0.07566987, -0.07274136, 0.075231604},
   {0.085435756, 0.046568945, -0.024869472, -0.108735524, 0.0031147331, 0.058194928, 0.007552294, -0.086957715, 0.048678067, 0.21042068, -0.24959634, -0.050660033, 0.058812466, 0.08002422, -0.19575588, 0.094941184, 0.20528756, -0.010118678, -0.083934434, 0.052384738, 0.074719824, -0.10894896, 0.07522049, -0.011021488, -0.03919067, -0.017419392, 0.037961848, -0.19782366, -0.20660257, 0.096051924, -0.0127207525, -0.025530094, 0.08864521, -0.015912937, 0.08531966, 0.094556734, -0.03816499, -0.14120181, 0.07789236, 0.025891714, 0.035610862, -0.09691912, -0.03183846, -0.0027245628, 0.18640068, -0.03398854, 0.07421788, 0.06903462, 0.060526814, 0.025844717, -0.015203759, 0.04304839, 0.019060468, 0.14602442, 0.071839415, 0.022812271, 0.047058478, -0.009860952, -0.0052796677, -0.059843753, -0.042720087, -0.025346793, 0.0034117897, -0.05190011, -0.009038657, -0.19221209, 0.034145683, 0.075488545, 0.088937424, -0.016440788, -0.0059956424, -0.075514436, -0.09780961, 0.007096904, 0.15553959, 0.019098416, -0.018997384, -0.11368401, -0.060509488, -0.018476903},
   {-0.021249952, 0.18383722, -0.22334515, -0.07768576, 0.040231008, 0.14847203, 0.15460628, 0.030304266, -0.024373578, 0.21407521, -0.17740567, 0.016547684, 0.0846186, 0.05471856, -0.16716918, 0.020381996, 0.16529216, 0.016930267, -0.039297335, -0.086485155, 0.05112885, -0.22846705, 0.0011353567, 0.044600345, -0.1651887, -0.04393667, 0.10054743, -0.09523443, -0.2431129, 0.112242304, 0.02436273, 0.033615693, 0.26406968, 0.045492873, -0.029199839, 0.12028085, -0.04488212, -0.30195606, 0.06243735, -0.05860065, -0.12059294, -0.09592814, -0.13339202, -0.038162697, 0.22759517, 0.025478713, 0.029229678, -0.056446947, 0.081449926, -0.070525385, 0.016912438, 0.015453933, -0.05850302, 0.259637, -0.06724503, 0.0016836749, -0.09172283, -0.023458112, -3.9950013e-05, -0.07366951, -0.05237776, -0.16001295, 0.053183872, -0.034505364, 0.014492646, -0.18883821, 0.07775956, 0.07329611, -0.08956029, 0.14011197, 0.004080818, -0.0039182575, -0.08978228, 0.035078745, 0.17908593, 0.0869715, 0.023392795, -0.023755126, 0.08703513, -0.06634699},
   {0.03101, 0.0885671, -0.1095814, -0.15693475, 0.019063659, 0.04382881, 0.0068850196, -0.050328784, -0.00979863, 0.18609117, -0.085921, -0.03335475, 0.10338315, 0.03301441, -0.12648983, 0.15304819, 0.19948177, 0.09497175, -0.00627642, 0.041728403, -0.017215393, -0.10789691, -0.0071352795, 0.053796727, -0.17022261, 0.14569609, 0.13137567, -0.059162624, -0.036626, 0.016344303, -0.07069189, 0.04457305, 0.18072087, 0.0863004, 0.047824055, 0.10139975, 0.08077177, -0.26459885, 0.01210784, 0.0055277026, -0.07228423, -0.13504595, 0.008528632, 0.04110373, 0.16796573, -0.01730761, 0.07751026, 0.018016698, -0.036137477, 0.039214417, 0.07951299, -0.07314403, 0.002563472, 0.16297165, 0.06941808, 0.00849364, -0.0979263, 0.02367576, 0.022886112, -0.061113063, -0.0045403987, -0.16973023, 0.019290335, -0.042205773, 0.08414913, -0.14034036, 0.054714635, 0.008839546, -0.08165786, 0.07421568, -0.044408668, 0.056496, -0.06172976, -0.049678683, 0.019242221, -0.07893944, 0.08137029, -0.03370665, -0.031225165, -0.010457774},
   {-0.05738106, 0.118099086, -0.08031732, 0.018363182, -0.019854408, -0.0073021743, -0.18453814, -0.066102184, -0.09230124, -0.050183434, -0.08930924, -0.04286917, 0.06968643, 0.057152353, -0.052070208, 0.06218145, 0.13852713, -0.07380134, 0.035461936, 0.038266286, -0.008322261, -0.022263264, -0.035502218, 0.007300471, -0.07432665, 0.18576662, 0.1507513, 0.045284506, 0.043650497, -0.08936249, 0.08274825, -0.070385315, 0.15153322, -0.06691099, -0.09108769, -0.025542313, 0.022096297, -0.23446633, -0.031929158, 0.09673331, -0.17092879, -0.042003207, 0.20969391, -0.09404692, 0.028913047, -0.093187675, -0.060465664, -0.07437357, -0.022978075, -0.029243235, 0.058078296, -0.054920904, -0.031244403, -0.01677975, -0.07055141, 0.015503142, -0.013318229, 0.010558055, -0.07374947, 0.08502316, -0.04174662, -0.10639501, 0.04895193, 0.077095605, -0.07306494, -0.11944724, 0.0850509, 0.084486715, 0.023801915, 0.055333644, 0.010531902, -0.063834175, -0.08474728, -0.065090306, 0.060072124, -0.07812472, -0.041528117, -0.06526524, 0.025298214, -0.17654176},
   {0.05297964, 0.056308124, 0.033060126, -0.017098092, -0.044940494, -0.027424721, -0.2111479, 0.033030156, -0.036151316, 0.072512746, -0.20157929, 0.037241355, 0.2147042, -0.010354355, 0.016918806, 0.13339221, 0.07633554, 0.07584787, 0.109968975, -0.08705081, 0.12215089, -0.02729716, 0.0515868, 0.05972286, -0.058894496, 0.23150587, 0.34281152, -0.030246101, 0.07194942, -0.049847793, -0.09985763, 0.08891603, 0.04646187, -0.09296176, 0.022541352, 0.1055392, -0.028147897, -0.10308292, -0.046736933, -0.0061029946, -0.3025166, -0.14507268, 0.09351379, -0.04627593, 0.0073315375, 0.005267285, 0.06989191, -0.05528048, -0.037256423, -0.09072924, 0.04332725, -0.017162686, 0.050404035, 0.0866218, 0.036907714, -0.05959438, 0.033409204, -0.016741112, 0.013501599, -0.06622125, -0.059877478, -0.07380476, 0.028681234, -0.09312762, 0.064501144, -0.21668805, 0.011446527, 0.04079093, -0.046909478, 0.07226481, 0.057486236, 0.018207751, 0.10769909, 0.07506026, 0.03386185, 0.030107327, -0.08749828, -0.17853136, -0.026714945, -0.098799005},
   {-0.023006493, 0.15405197, -0.06505122, 0.0004765807, -0.15259951, -0.16366644, -0.293762, 0.0038963063, 0.08731835, -0.115942605, -0.15980907, -0.06524418, 0.13428102, -0.09536935, -0.02722098, 0.039394297, -0.012977809, -0.01011911, 0.1623262, 0.071476296, 0.1777133, 0.0029555976, 0.02927959, 0.06090866, -0.20967212, 0.1990225, 0.23249978, 0.050114974, 0.045348737, -0.13301256, 0.066249214, 0.03641427, -0.04238073, 0.0036975124, -0.01912201, 0.014686998, 0.013445775, -0.20137411, 0.08118642, -0.040804904, -0.28524756, -0.13115881, 0.24459688, -0.06788977, 0.13165005, -0.07105761, 0.031415336, -0.081604466, -0.08346607, 0.018152487, 0.082310595, -0.10059068, 0.047971923, 0.03479294, 0.031038169, 0.046176113, -0.07064662, -0.0017823909, -0.0003691092, -0.04168852, -0.019806452, 0.28414172, -0.012538817, -0.075521775, 0.019448102, -0.24664986, -0.06472191, -0.09529302, 0.044998758, 0.10226404, -0.07983212, -0.018666167, 0.12236867, -0.011306855, 0.030495295, 0.09000323, 0.062146436, -0.16160613, -0.04925899, -0.18524131},
   {-0.09565127, 0.15464513, 0.10704891, 0.039604396, -0.095445655, -0.14949907, -0.28554997, 0.053475894, -0.0508502, -0.0036558118, -0.13992423, 0.027653197, 0.19374871, -0.07326108, 0.1409459, 0.095281295, 0.022005964, -0.043787356, 0.08412813, -0.058293242, 0.04081153, 0.14813942, 0.04783816, -0.08593474, -0.037288427, 0.09018689, 0.15776983, 0.046293393, -0.04153432, -0.08733013, 0.033028044, -0.04430235, -0.06561408, -0.03952863, 0.05001101, 0.06350357, 0.0035079727, -0.15253143, -0.0739095, 0.11211293, -0.23050593, -0.06795362, 0.22860613, 0.0104705095, -0.012843128, 0.07779754, 0.031545423, -0.09096931, 0.068655334, 0.021694815, 0.090659596, 0.055588532, 0.023148568, -0.026998643, 0.061337985, -0.017654613, 0.052140012, 0.01210499, -0.07607639, 0.05636014, 0.049967952, 0.30718043, 0.021165447, -0.09809903, -0.06512992, -0.11828208, -0.042885073, -0.08843365, -0.05939463, 0.057524994, -0.011342618, -0.08224254, 0.14623971, -0.061470922, -0.06135726, -0.0417875, -0.0762162, -0.22407082, -0.02286364, -0.11145267},
   {-0.07950776, 0.07639725, -0.050935213, 0.06549049, -0.0033474937, 0.048484378, -0.014037738, -0.008612375, -0.07334265, 0.0075254734, 0.021987243, -0.08397275, -0.018056804, -0.03538511, -0.08981215, 0.07949953, -0.07263689, 0.042967476, 0.055316716, -0.042567145, 0.001960607, 0.008235294, 0.03557279, -0.08865294, -0.063405566, 0.09816555, 0.02269024, 0.023144457, 0.061129257, 0.059426844, 0.055919133, -0.03150713, -0.012003154, -0.011198456, -0.058775388, -0.057591006, -0.057949312, 0.087792255, -0.051220834, 0.018818729, -0.04424156, -0.1170085, 0.0076485653, -0.045455944, -0.0013129435, 0.09388795, -0.0931596, 0.0758574, -0.027306942, 0.0007420726, 0.06068807, 0.039518807, 0.02521591, -0.08919749, 0.025160156, 0.03035457, 0.028444441, -0.097495705, -0.08427155, 0.0719348, -0.07007101, 0.3487999, 0.014414801, -0.00069454795, 0.06484317, -0.023284523, -0.035202645, -0.10144522, -0.041390438, -0.10079261, 0.08152933, -0.08078077, 0.12609464, -0.041677788, -0.07410149, 0.017360076, -0.04984612, 0.027243296, -0.01692619, -0.103318036},
   {0.020040229, -0.1460869, 0.009802925, -0.01188258, 0.17894925, 0.029661091, 0.13083652, 0.06228595, -0.062018156, 0.11689695, -0.17648733, -0.028513726, -0.19702403, -0.053468473, -0.18700677, 0.060533542, 0.073718905, -0.037508182, -0.16959068, 0.05390124, -0.07985869, -0.19409901, 0.07803946, -0.0835839, 0.21448106, -0.100817285, -0.24056886, -0.13632084, -0.11958145, 0.08350842, -0.083191834, -0.082363844, -0.004416082, -0.024362814, 0.057923485, -0.08335619, 0.019014895, 0.069026515, -0.09124416, 0.054906968, 0.19930023, 0.072300464, -0.15462904, -0.05418441, 0.1519173, -0.028251998, -0.06412499, -0.04039996, 0.038751666, 0.029564075, 0.09123287, -0.074351, -0.041670986, 0.10897424, -0.02058201, -0.0685901, 0.08244406, 0.044883627, -0.07331334, 0.08185336, 0.004106939, 0.46770433, -0.071559966, 0.16363496, 0.014642432, -0.09276907, -0.0022904214, -0.095913306, -0.043589417, -0.058390625, 0.17394634, 0.0021001599, 0.14400059, -0.03579, -0.029424107, -0.015073724, -0.06787742, 0.25534213, 0.06700961, 0.07292028},
   {0.068883754, -0.1252799, 0.04425682, -0.06714683, 0.15469922, -0.027217057, 0.15859574, 0.032004282, 0.060353268, 0.2021039, -0.08301401, -0.094697826, -0.026744341, -0.016350694, -0.11576701, 0.1267366, 0.089722425, 0.051601388, -0.1523011, -0.065070786, 0.07265896, -0.25322148, -0.04526225, 0.02976968, 0.11208974, -0.04030172, -0.064416766, -0.05169649, -0.16408187, 0.22872704, 0.067916535, -0.03119898, -0.019943029, -0.019796995, 0.07055362, -0.03791859, -0.043765184, 0.03226875, -0.0031511683, 0.09441974, 0.14605266, -0.054548666, -0.22072825, 0.07789639, 0.10558802, 0.07209774, 0.0594647, -0.04058853, 0.041641474, -0.069690354, -0.016199246, -0.06294284, 2.473957e-05, 0.08792134, -0.06222016, -0.08875152, -0.059808753, -0.017313797, -0.09065114, 0.08635837, -0.061783344, 0.061022755, -0.08147868, 0.039948188, 0.05266445, -0.081889264, -0.0017096058, -0.03038668, -0.07764159, -0.063341334, -0.09088508, -0.0008561944, 0.08456603, -0.09562495, -0.11699373, -0.06361771, 0.00509493, 0.06848569, -0.07706905, 0.18252268},
   {0.08736844, -0.1472891, 0.096067265, -0.12343423, 0.114402235, -0.119182445, 0.22430855, -0.096955225, -0.026244977, 0.07328569, -0.0074822176, 0.006263705, 0.018386852, 0.0107148215, -0.10221998, 0.06622025, 0.12750627, 0.0043361187, -0.29923782, 0.08690047, -0.024235433, -0.29785603, -0.09119737, 0.053130813, 0.14957185, -0.13194937, -0.03190362, -0.22279623, -0.20610271, 0.24058215, 0.06943876, -0.05068359, 0.08484643, 0.06486153, -0.10072157, 0.06154945, 0.07187619, 0.17777862, -0.06407092, -0.033149447, 0.2902196, -0.04585786, -0.23222467, -0.041731358, 0.11531904, -0.0078117773, 0.041970618, 0.0709431, -0.021638056, 0.016606942, 0.04944589, -0.042058885, 0.08393535, 0.103701554, 0.009256626, 0.015955111, 0.03017302, 0.020594668, -0.039626513, 0.016680036, 0.01572311, -0.22020787, -0.14754173, 0.16915177, -0.0038199872, -0.11162854, 0.0105459485, 0.07535323, -0.00038007647, -0.015382042, -0.022160498, -0.017854357, -0.06133864, 0.06878158, -0.27241817, 0.026993327, -0.063352026, 0.022058267, 0.04448823, 0.3248168},
   {-0.07945244, -0.10270127, 0.03534572, -0.07675207, 0.21519502, 0.08530721, 0.14709698, -0.04548489, -0.013292574, 0.2901544, -0.06135236, -0.07687646, -0.034199294, 0.064412884, -0.11179036, 0.018421909, 0.06269842, -0.02423779, -0.3266355, 0.06404739, -0.025582915, -0.3273593, -0.04433033, -0.022601455, 0.10775751, -0.0037635684, -0.19540909, -0.20243725, -0.25543597, 0.2769535, 0.07158388, -0.02649448, 0.092713125, 0.05947785, 0.06880629, 0.013206329, -0.060026, 0.0010846353, -0.06659469, 0.05754362, 0.29911423, 0.056461845, -0.28762975, 0.0646001, 0.18544282, -0.055076342, 0.088218994, -0.050844096, -0.010167171, -0.091460116, 0.0068390444, -0.04106975, -0.012730145, 0.08979126, -0.09795488, 0.04992066, -0.0356375, 0.0052016224, -0.07097917, -0.020599348, -0.03461622, -0.21545367, -0.24183528, -0.00889574, 0.015008122, -0.03235973, -0.058838826, 0.025022145, -0.07358359, 0.020944992, -0.14117754, -0.031578604, -0.20170198, 0.07453976, -0.18108676, -0.07949627, -0.057997838, 0.17682025, 0.0045192745, 0.23089047},
   {-0.09684562, 0.034573883, -0.11275035, 0.16314845, 0.13628535, 0.10794559, 0.322784, 0.026396189, 0.030230038, 0.0770782, 0.11729738, -0.091616504, -0.057807326, -0.043848418, -0.030691486, -0.14251408, 0.037866544, 0.005819224, -0.0646911, 0.07921316, 0.06048754, -0.2522575, 0.050014548, -0.075487755, -0.037739154, -0.20504358, -0.19087389, -0.21360828, -0.15711288, 0.06559279, -0.08679286, 0.053502277, 0.22215252, 0.05621623, 0.0007625085, 0.08895282, -0.040204655, -0.22219202, -0.0020655277, -0.30499035, 0.08083831, 0.11857469, -0.20459637, 0.04046621, -0.35852835, -0.034523692, 0.04325355, -0.018018108, 0.028169686, -0.097923175, -0.08256825, 0.011339599, 0.085244685, 0.23010093, 0.013969487, 0.029647829, 0.07401771, -0.08747958, 0.046811633, 0.05208797, 0.07351012, 0.04095386, 0.14540698, -0.028585734, 0.07459437, 0.15694597, -0.037482157, -0.075469084, 0.029458039, 0.098868, -0.16961306, -0.09773178, -0.42445007, -0.08854727, 0.028010288, -0.0046527386, 0.04022566, 0.024061512, 0.038455013, 0.044928193},
   {0.025883619, 0.07936113, 0.09955161, 0.06358599, 0.0766011, -0.024151597, 0.09397542, -0.055899024, -0.08889076, -0.0020043359, 0.13757508, -0.05623356, 0.0062002144, -0.06639999, 0.19169156, -0.118751466, -0.09690171, -0.008498922, 0.007918897, 0.05909576, 0.18085289, -0.1309441, -0.036553733, 0.060053173, 0.08475376, -0.14117107, -0.06566618, -0.03297097, -0.04481169, 0.14010353, -0.042250194, 0.054081693, -0.030906975, 0.07592669, -0.0906613, 0.08637028, 0.0039026528, 0.0074903066, 0.022244724, -0.06353035, -0.006751585, 0.17865014, -0.07282773, 0.04781932, -0.2436695, 0.07714338, -0.067439534, 0.0041425386, 0.028093059, 0.025784396, 0.082679085, -0.045838293, -0.005988508, 0.067112744, -0.045546163, 0.027653439, -0.069125555, -0.022934724, -0.038263597, -0.04048258, -0.036631327, 0.033148468, 0.06511159, 0.0035308076, 0.009305619, 0.22012737, 0.04423988, 0.07959487, -0.025156647, 0.11032801, -0.18459442, 0.070318826, -0.26486883, 0.072202265, -0.21122552, 0.007013887, -0.07701737, 0.03670813, -0.04821533, 0.08762725},
   {-0.03347957, -0.13838892, 0.05472336, 0.008523357, 0.018364351, 0.049085483, 0.17508408, 0.045757826, -0.06011688, -0.058193814, 0.09163273, -0.02727517, 0.023747282, -0.088182464, -0.011569262, -0.044717696, -0.06373964, 0.024305396, 0.0041567693, -0.0120195085, -0.06996275, -0.02421318, 0.024867952, -0.069352254, 0.1805975, -0.045485545, -0.12841795, -0.06463974, 0.024440829, 0.014160623, 0.018697267, 0.003698269, 0.07893901, -0.026213115, 0.07838607, 0.038739793, 0.07900249, 0.05361976, -0.032740586, -0.053905927, 0.1355111, 0.022178115, -0.16150117, 0.0526237, -0.16554911, -0.08955806, 0.062208675, -0.06925729, -0.06883152, 0.040069602, -0.0255147, -0.038661905, -0.0930136, 0.04370012, 0.03991925, -0.07868547, 0.07921036, -0.050280955, -0.06005713, -0.07694444, 0.090889074, 0.16104704, -0.07532884, -0.046894986, 0.048092075, 0.02167648, 0.025484344, 0.043308217, 0.001788348, -0.027851209, -0.12293954, -0.05973635, -0.22010471, 0.008593617, -0.0037806777, 0.0056359693, 0.08861553, 0.18318929, 0.062073283, 0.13191438},
   {0.017116446, -0.1577574, 0.07629127, 0.040139396, -0.013754217, 0.1653334, 0.12551978, 0.08051014, -0.053968567, 0.0027350334, 0.08832562, -0.04075139, -0.24041827, 0.029455893, -0.0660127, 0.004502806, 0.0008049327, -0.09219578, -0.086058505, -0.043618247, -0.101028435, -0.19973664, -0.018464103, -0.07644842, 0.25660712, -0.034199774, -0.26720506, 0.028395336, -0.21165916, 0.093065515, 0.0217997, -0.0676768, 0.054300766, -0.005125295, 0.041229073, -0.15012887, -0.08437276, 0.2310369, -0.0074655283, 0.04457607, 0.25051, 0.014259611, -0.25981897, 0.067143865, 0.10871284, 0.00848458, -0.0330555, -0.043758847, 0.015525287, 0.053857386, -0.05571581, 0.086023696, -0.027060175, -0.08934054, -0.06975426, -0.0966354, -0.012521506, -0.010512984, -0.08656479, -0.044915978, 0.07914395, 0.15824546, -0.025810827, -0.08133941, 0.010177344, 0.012196676, -0.07820622, -0.0439973, 0.07181873, -0.19744597, 0.01936004, 0.055787336, 0.004868157, -0.020747028, -0.091723695, -0.041581947, -0.072183385, 0.23346053, -0.07791717, 0.23277478},
   {-0.09682122, -0.08555403, 0.080142975, -0.09679058, 0.013506423, 0.003234725, 0.016534897, -0.00424885, 0.058145363, -0.1334936, -0.044501718, -0.037609767, -0.09611486, -0.05874944, 0.07369555, 0.06865333, 0.07558906, -0.05969682, 0.038887482, -0.021327976, -0.021798624, 0.08339537, 0.014093347, 0.030336339, 0.1791547, 0.028754974, -0.04647373, -0.048240844, -0.071273424, -0.008281654, -0.096019134, 0.028725969, -0.11110553, 0.053480525, 0.06717451, -0.040342566, 0.01104004, 0.06611691, 0.042705417, -0.023386436, 0.107308134, 0.059006773, -0.12275533, 0.07627809, -0.034426223, -0.017360918, -0.036571085, -0.06860467, -0.074935295, -0.050202064, 0.027019344, 0.06646643, -0.08973401, -0.052044325, 0.009388835, -0.09423509, 0.05699524, -0.076810144, -0.012629874, -0.04776406, -0.076508865, 0.08782404, -0.112256885, -0.13200955, -0.07162427, 0.14512262, -0.07524314, -0.09960675, 0.033989273, -0.12517817, 0.100567184, -0.058040354, -0.03207102, -0.03292092, -0.08774441, -0.026505694, 0.040590778, 0.15065998, -0.04497762, 0.14036994},
   {0.0056825364, 0.038517542, -0.0067370683, 0.0201845, -0.16599637, -0.15232313, -0.18836172, -0.06902573, -0.024393516, -0.15516743, -0.028280362, 0.020351345, -0.018132662, 0.0071559176, 0.1415728, 0.0149117615, -0.0307232, -0.044273645, 0.10914506, 0.007239715, 0.0059822327, 0.04313541, -0.025382288, -0.06621293, 0.022988832, 0.15102781, 0.19808264, 0.05652776, 0.002807154, -0.11666437, -0.07583105, 0.070395745, -0.09848151, -0.09352454, -0.068103164, -0.059484895, -0.064173274, 0.023378987, -0.0779593, 0.030357232, -0.13786541, -0.06692054, 0.17592, 0.08962768, 0.022965794, 0.081007995, -0.006657563, 0.0015601163, 0.05757559, -0.08585993, -0.051277176, -0.039290015, -0.058399733, -0.03157779, -0.06000697, 0.047092937, -0.090455644, -0.02282509, 0.008127101, 0.06417728, -0.08236149, 0.02473354, 0.048563942, -0.0012090027, 0.027664922, -0.067355484, 0.024740376, 0.042508982, 0.038139395, 0.0739794, -0.05726036, -0.0010566458, -0.055920828, -0.050219312, -0.035386235, -0.0558902, -0.038969398, -0.021631734, -0.06814651, 0.02233414},
   {0.011774915, 0.11579919, 0.039150164, -0.013272632, -0.043983903, -0.02531585, -0.1219635, -0.032820247, -0.06765032, -0.01237924, -0.018522037, -0.0030554584, -0.008010795, -0.0059049577, -0.011949055, 0.035171516, 0.11416423, 0.021129481, 0.09283288, -0.05485271, 0.058630485, 0.010899118, 0.07606114, -0.07556219, -0.09992823, 0.09816294, 0.21498133, 0.008774774, 0.016482146, 0.02530237, -0.09989132, 0.08453354, -0.02061907, -0.06761485, 0.0014980183, 0.01139188, -0.09488166, 0.040404957, 0.009909687, 0.09972743, -0.19012603, -0.060933, 0.11025724, -0.059833873, 0.021146985, 0.045366906, -0.017662719, 0.0795629, -0.039318, 0.05715463, -0.011024103, -0.0063881674, -0.025324346, 0.0067437547, -0.044348944, 0.05639519, -0.092934296, 0.060126286, 0.0057615116, -0.07144902, 0.034933396, 0.1669357, -0.019279622, -0.015518491, -0.028794624, 0.01736976, 0.005811691, -0.095125265, -0.024816923, -0.03193012, 0.04574706, -0.06959939, 0.0151197165, 0.03444665, 0.025201065, 0.072397925, 0.080749474, -0.06849696, 0.00037659716, -0.14238952},
   {0.03840413, -0.007706027, -0.16372527, -0.115321524, -0.0292501, -0.0031622776, -0.17435469, 0.0007956895, -0.03450344, -0.0040965653, -0.094002984, 0.041445967, -0.019298052, -0.006565079, -0.016911225, 0.077710554, -0.016204054, 0.052795373, 0.021640453, 0.032688703, 0.05622616, 0.08265672, -0.028500758, -0.012539726, -0.14497678, 0.19367544, 0.23551139, 0.09572588, -0.003602471, -0.009571903, -0.06884107, -0.096964285, 0.11885287, -0.040785465, -0.08194403, 0.022720642, 0.010131365, -0.04441494, -0.0037040326, -0.023664048, -0.024526587, -0.10276211, 0.07763165, -0.05883343, -0.043743487, -0.05802483, -0.0486405, -0.072648704, -0.026477676, -0.022913931, -0.0707964, 0.01099604, -0.0627254, -0.059737623, 0.029903373, -0.064456515, -0.045933746, 0.054664344, -0.061398886, -0.058257453, -0.0031565502, 0.041769475, 0.048583195, 0.07456773, 0.01779221, -0.0587888, -0.010661049, 0.002538922, -0.065281525, -0.12660567, -0.046269607, 0.043045625, 0.0986366, -0.055666305, 0.19183214, 0.0925427, -0.0117360335, -0.09536739, 0.06414775, -0.18839072},
   {-0.021468677, -0.015726939, -0.22293155, -0.072157204, -0.04663974, 0.19048429, -0.04953827, -0.05847858, -0.076995865, 0.13230745, -0.04514927, 0.0570653, -0.076414675, 0.03669543, -0.050383553, 0.015299885, 0.029574234, -0.013568796, 0.07407135, -0.0025949976, 0.038737357, 0.032856546, 0.023969099, 0.010847852, -0.19294092, 0.091543645, 0.16411799, 0.12189475, 0.03581806, -0.108195364, 0.051787943, -0.020082409, 0.04264766, -0.0056343046, 0.07122111, -0.1370045, -0.009352959, -0.20861816, 0.016341334, -0.030004991, -0.1632897, -0.025908044, 0.04829858, -0.04046508, -0.008355046, 0.016340733, -0.052167986, 0.06482549, -0.08619874, 0.029777702, 0.049166165, -0.08853527, 0.05464144, 0.02680091, -0.08612881, 0.014530118, 0.044564098, -0.021401782, -0.047162253, -0.040011387, 0.03862705, 0.12481477, 0.12086634, 0.05357392, -0.023062237, -0.129008, -0.008578154, 0.07470994, -0.08246647, -0.10668996, 0.12163453, -0.059675522, 0.087522425, 0.08918096, 0.18030268, -0.08976215, 0.052262757, -0.071742915, -0.07855798, -0.16535284},
   {0.02183407, 0.09354967, -0.2715019, -0.05127765, -0.13266166, 0.20125803, -0.055620935, -0.049643107, -0.041257974, 0.09376663, 0.011363444, -0.087495156, -0.09725363, 0.01249633, -0.06665652, 0.08173488, 0.03705153, -0.030790627, 0.14244363, -0.048273377, 0.037772406, -0.087574475, 0.013423897, 0.083390124, -0.16589265, 0.14927761, 0.104518436, -0.05552444, -0.06565126, -0.09479903, -0.024032133, -0.017892152, 0.19005954, 0.015653485, 0.02113551, -0.08109386, 0.019142617, -0.21977457, 0.023886075, -0.03374634, 0.016637092, -0.018645013, 0.08758763, -0.019882945, -0.032747753, 0.057008438, 0.039028116, -0.08317733, 0.0020889174, -0.052977037, 0.08798658, 0.054383047, 0.032528378, 0.18318303, -0.057230514, 0.05728689, -0.02838724, -0.09716623, -0.061431378, -0.0011326545, 0.043038286, 0.043573506, 0.06956246, 0.073318616, -0.042236213, -0.16604991, -0.048160326, 0.08330072, -0.016346276, -0.079696216, 0.07493056, 0.06625628, 0.07560268, -0.03994414, 0.16975819, 0.06681707, -0.0039745085, -0.014044168, -0.060866255, -0.15124452},
   {0.06799435, -0.047098547, -0.239563, 0.07417896, -0.07349268, 0.1272714, 0.07694174, 0.08123416, 0.032738138, 0.05985495, -0.060771145, -0.032797627, 0.0072062262, -0.08655323, -0.23220332, -0.0002946217, 0.15704997, -0.048457973, 0.032398682, -0.0025132615, -0.00065324095, -0.016954485, 0.083580814, -0.013406258, -0.118473336, 0.034332804, 0.028534515, -0.05689051, -0.16526583, 0.028422091, 0.08622281, 0.029879287, 0.27460906, -0.093867145, 0.010732324, -0.0952828, -0.09513086, -0.10483985, -0.034634724, 0.06652172, 0.073606506, -0.06812173, -6.5048334e-05, 0.07355789, 0.08541499, -0.08321176, -0.011979327, -0.027753495, 0.008148473, -0.09593139, -0.052286167, -0.07497588, 0.009501566, 0.07915558, -0.071476705, -0.082293786, -0.06289598, -0.048306778, -0.010106064, 0.00033181338, 0.0060872063, 0.026454158, 0.11103631, -0.08969541, -0.08485094, -0.12952887, -0.061714865, -0.07171938, -0.06971243, -0.055490647, 0.11201765, -0.05690329, 0.10835813, -0.009729607, 0.15393868, -0.007856034, -0.012032044, -0.016763145, -0.04229273, -0.05966229},
   {-0.09908418, -0.035417087, -0.18590939, -0.067554116, 0.03734365, 0.09820435, 0.02370068, -0.058382988, 0.057514973, 0.19391079, -0.014128197, 0.020730998, 0.0115271, 0.036671005, -0.10505261, -0.011938299, 0.114528835, -0.057422254, -0.075491585, 0.054944824, -0.0034040487, -0.14548005, -0.045000285, 0.060725342, -0.14455202, -0.06819007, -0.04147816, -0.08486205, -0.062099963, -0.0109549435, -0.07063728, 0.046184048, 0.14462447, -0.09040986, -0.06965152, -0.075326934, -0.024260638, -0.05973496, 0.08764648, 0.023295492, 0.019517107, 0.048562042, 0.0011955661, -0.09040463, 0.045145072, -0.038201235, 0.02703859, 0.053788345, -0.0709005, -0.06942104, -0.0471976, -0.081372134, 0.04701314, 0.15374398, 0.0781459, 0.030974414, 0.08662749, -0.0723263, -0.006037846, 0.03556128, -0.04089633, -0.027747672, 0.0015887496, -0.084538855, 0.049090333, -0.0848456, 0.06398688, 0.041586325, 0.056259803, 0.04978575, -0.0007641273, -0.017458448, 0.05378026, -0.05708685, 0.15532082, 0.08780172, -0.062472053, 0.03919569, -0.07011887, -0.016184997},
   {-0.05238266, 0.0406726, -0.058997646, 0.028606186, 0.06140302, 0.052397925, 0.21019164, 0.0016615017, 0.05093854, 0.154975, -0.106136695, -0.05064694, -0.14256826, -0.09501861, -0.1842854, -0.024036555, 0.10753838, -0.08899128, -0.032008193, 0.01643825, 0.082592845, -0.0005767634, -0.051610034, 0.08815537, -0.14012079, 0.010264472, 0.048388917, -0.032056954, -0.11776853, 0.024479868, -0.02273579, -0.009023275, 0.24361898, 0.0839441, -0.038233746, 0.0068851816, 0.070343755, -0.06578768, 0.061168905, -0.020954989, 0.115754604, -0.041943323, -0.040350016, 0.06947002, -0.017520837, 0.06485819, 0.09528341, 0.046984445, 0.049028713, 0.07182022, 0.08788896, -0.06798347, -0.037569795, 0.19098382, 0.06256452, -0.047020856, 0.023963256, 0.063507214, 0.05707168, -0.042610135, 0.03373813, 0.13534185, 0.15032052, 0.085524686, -0.0886576, -0.05472591, 0.08249048, 0.047029044, -0.055512287, 0.05225755, 0.099736996, -0.02285201, -0.0889427, -0.06668015, 0.08777925, -0.02363161, 0.040456086, 0.10270068, -0.0026539213, 0.007524933},
   {-0.07398233, 0.022976577, -0.124268405, 0.08417894, -0.065813854, 0.08129123, -0.032816473, 0.038904205, 0.012107534, 0.024735246, -0.072777316, 0.062676586, -0.085074924, 0.06941285, -0.11788658, 0.1265773, 0.034211066, -0.035465304, 0.06616925, -0.013433811, -0.081092805, -0.04525447, 0.051042937, -0.02049257, -0.10566647, 0.049466502, 0.030362478, 0.021687023, -0.04065785, -0.06300274, -0.05970531, -0.049889963, 0.14136803, 0.03018646, 0.057134207, 0.0017081338, -0.04158422, -0.17318845, -0.030378265, -0.10086519, 0.06613718, 0.05790786, 0.12833083, 0.06516145, 0.068816856, 0.058621757, -0.08339284, 0.031435885, -0.093503796, -0.041078117, -0.03484362, 0.081656955, 0.0624383, 0.021450887, 0.00093973154, 0.0047311983, -0.075796135, -0.088785544, -0.06087771, 0.06546032, 0.06177468, 0.19400315, 0.09297489, -0.016561046, -0.08141568, -0.074376225, 0.046961606, 0.065153815, -0.0031298026, -0.08697772, 0.02374325, -0.093466744, 0.0894257, 0.09112827, 0.14101142, 0.052767284, 0.006897403, -0.07695972, -0.005675531, -0.131155},
   {-0.066506706, 0.06706125, 0.019112984, -0.070163056, 0.04876048, 0.029720342, 0.07984036, -0.037004344, 0.02722826, 0.06849991, -0.089304514, -0.004692213, -0.10577229, 0.015637465, 0.015195333, -0.017214479, -0.076028995, 0.008332975, 0.06992277, -0.07918103, -0.08513451, 0.06223483, -0.04515009, -0.01774258, 0.010345076, 0.03540361, 0.050290585, -0.036239255, -0.02133925, 0.012126846, 0.040292483, -0.046608675, -0.03836513, 0.025204033, -0.06742291, 0.026915053, 0.05930467, 0.0053616078, -0.085879415, -0.090538494, -0.08490327, 0.013084573, 0.06998443, 0.083061665, -0.013249269, -0.08626638, 0.047311105, -0.0023942825, -0.040217254, 0.0651211, 0.090042435, -0.0795296, -0.039684337, 0.09575944, 0.08713824, -0.054753624, 0.058479182, -0.0028225312, 0.086846046, -0.08217402, -0.027160235, 0.15232435, 0.031422295, -0.083262205, 0.09115758, 0.032100134, 0.053655915, -0.1010736, -0.028320238, -0.10901924, -0.06594308, -0.023052001, 0.032316647, 0.03494639, -0.022403054, -0.082793005, -0.04910157, -0.05687699, 0.060581695, -0.03105874},
   {0.0074451095, 0.0037427056, -0.124158345, -0.0077225836, -0.019408336, -0.046089593, -0.050799415, -0.0024433825, -0.018678403, 0.06434076, -0.047170997, -0.037573397, -0.032319665, -0.024928927, -0.1282489, 0.037346315, -0.05647499, -0.030829005, 0.058026668, -0.013146065, -0.028945891, -0.00021854148, -0.08199379, 0.08185516, 0.06549983, 0.05208437, 0.016406732, -0.010664168, -0.04787821, -0.07632616, -0.06907872, 0.04054636, -0.06272819, 0.036116455, -0.054276485, 0.016554644, -0.015217788, -0.036090825, -0.03495328, 0.0014822056, 0.014990385, -0.056858674, 0.09855241, -0.029341394, -0.0060252473, -0.075217724, 0.047372617, -0.03165672, 0.017077327, 0.0056857117, -0.080775686, 0.04576645, 0.0815986, -0.07654713, 0.060951076, 0.054092444, -0.08767408, -0.08541651, 0.032600082, 0.028254699, 0.014257975, 0.0996477, 0.0036363509, -0.035037797, -0.013934948, -0.035064936, 0.069547795, -0.034639183, -0.09116262, 0.034149263, 0.06341777, -0.024367511, 0.117701285, -0.009024873, 0.09816141, -0.016091786, 0.07028431, 0.07780568, 0.028142283, -0.08386726},
   {-0.07572192, -0.026764385, -0.030955236, -0.034730405, -0.0017337898, -0.042763755, -0.03736535, 0.027355775, 0.041591644, -0.0039382856, 0.07091085, -0.042951293, -0.12689419, 0.08700656, -0.0315184, 0.022198822, 0.08174513, -0.08003824, 0.079002716, -0.016640423, 0.029788459, 0.08580836, 0.0284926, -0.04413048, -0.067863725, -0.016836993, -0.0756522, 0.0043545, -0.06708435, -0.11543013, -0.060545083, 0.0016409793, -0.07054361, 0.026747705, -0.03544283, -0.096609645, -0.09250139, -0.054311182, 0.066492304, 0.06778818, 0.069068156, 0.015991217, 0.0784942, 0.0341267, 0.0064719953, -0.06391469, -0.078775786, 0.07283417, -0.059104748, 0.08326812, -0.09211666, -0.06666673, 0.055710074, -0.012198724, -0.022674795, -0.07137516, 0.033371348, 0.04593223, -0.041465525, -0.00034601334, -0.042381074, -0.012981966, 0.07234806, 0.05118265, 0.011954337, 0.005385525, 0.081402324, -0.014032274, 0.060189374, 0.020504812, -0.03866243, -0.0077245166, 0.096100636, -0.0049992446, -0.050583843, -0.024500303, 0.005053802, -0.014539601, -0.008965454, -0.08083945},
   {-0.09605712, 0.06785439, -0.08769046, 0.042309254, 0.002548755, -0.0078122597, -0.092977844, -0.009742272, 0.03394188, 0.06266575, 0.079248995, -0.036626685, -0.013991589, 0.003831245, -0.121103935, -0.030368233, 0.11450315, -0.011126161, -0.02451467, 0.056436498, -0.11771955, 0.036891293, -0.022259302, 0.045278087, -0.010321824, 0.07769323, -0.04243211, 0.037227023, -0.08484889, -0.0372722, -0.07305696, -0.087517396, 0.02149822, 0.052470937, 0.031983085, -0.06858068, 0.005673466, -0.042931613, 0.029265068, -0.05734893, -0.072167665, 0.0034013842, 0.00431163, -0.030825429, 0.026753984, -0.041189604, 0.03352385, -0.09459762, -0.08984277, -0.0063940594, -0.051278133, 0.013882245, -0.06785308, -0.07615786, 0.052647695, -0.02332104, -0.022901254, -0.018040178, -0.04664548, 0.018956292, -0.027220227, -0.026409399, 0.04443837, 0.0050982973, 0.059585966, 0.040376883, -0.06851034, -0.038068302, -0.044424705, -0.078316376, 0.0007847613, 0.0034315805, -0.021410093, -0.020663451, 0.06625325, -0.094996564, -0.008555571, 0.0015298864, 0.052384175, 0.044674437},
   {-0.046779774, 0.08516307, -0.07959976, 0.06356735, -0.019726176, 0.061209608, -0.046239544, -0.08984819, -0.061839532, 0.11415417, -0.1381584, 0.07136599, -0.02126129, -0.021465652, 0.014891932, 0.024175866, 0.0106554525, -0.028503425, 0.023538373, -0.008299517, -0.0034324995, 0.007945163, 0.020220414, -0.013450011, -0.097510464, 0.057288587, 0.013293181, -0.0030302354, -0.041813143, 0.0046587065, -0.08711531, -0.019362632, 0.102613784, 0.04167773, 0.056816906, 0.05524966, -0.08110535, -0.01717364, 0.07767869, -0.08471578, 0.025861312, 0.0389008, 0.040988304, -0.06541444, 0.06775332, -0.06366889, 0.09031751, 0.067595415, -0.0909469, 0.04325315, -0.060377218, -0.10124409, 0.08623269, -0.028166354, -0.064221084, 0.08320034, -0.031637337, 0.05714754, -0.024532817, 0.061260942, -0.051773086, -0.10860439, -0.06631335, -0.1306321, -0.045078196, -0.056819163, -0.05216971, -0.020254834, -0.042697944, -0.050484754, 0.01814524, -0.09728819, -0.05873673, 0.049362376, 0.15155557, -0.030308284, -0.0838417, -0.028146563, -0.01866364, -0.021029126},
   {-0.057278115, 0.009784652, -0.16171968, -0.04202536, 0.09746191, 0.16575204, 0.1765166, 0.06834273, 0.040859543, 0.008541262, 0.04402697, 0.060522188, -0.04757111, -0.0871255, -0.042177144, 0.073844485, 0.105329655, -0.0345394, -0.049597472, 0.09025128, 0.058095083, -0.039635897, 0.06458973, -0.06966772, -0.037003398, -0.101410225, 0.028905928, -0.03224055, -0.15765508, 0.07637263, -0.0117410235, -0.04399658, 0.16560593, 0.07659145, -0.06905461, -0.07052472, 0.008469225, -0.026530128, 0.07108895, -0.07116906, 0.16007783, 0.10906448, 0.051316164, -0.052850578, 0.09010633, 0.0019272789, -0.05508998, -0.007488177, 0.083401866, -0.013096253, 0.07292811, 0.013136007, -0.04126038, 0.14591639, -0.010739851, -0.093121745, 0.052364353, -0.0015382359, -0.06209139, 0.08104231, 0.02873265, -0.10203391, 0.07070327, 0.03520354, 0.0141827315, 0.061308328, 0.03764239, -0.007396805, 0.08199743, -0.047880534, -0.0024220932, -0.067974046, -0.14718348, 0.05853302, 0.13810426, -0.05844773, -0.06345, -0.005035774, -0.068875015, -0.10172838},
   {0.035773493, 0.027623897, -0.09071628, -0.05354818, 0.06671626, 0.046914242, 0.16964667, -0.044043448, -0.09118934, 0.1262396, -0.072472, -0.049648758, -0.13607156, 0.06711096, -0.18677485, 0.12153295, 0.1716556, -0.028072618, 0.047587264, 0.025314074, 0.013060969, -0.17260633, 0.06879545, -0.019213779, 0.024978204, -0.06837089, -0.008045585, 0.062058818, -0.13130069, -0.03390099, -0.012224584, -0.059180245, 0.15572463, 0.09038422, 0.07994378, 0.028542463, -0.050228838, -0.044509202, 0.04756501, -0.003569461, -0.029901752, -0.08590378, -0.020676218, -0.07344956, 0.023945658, 0.06650276, -0.05087418, 0.08123962, -0.089449935, 0.056241747, 0.08536055, 0.022499312, 0.04078654, 0.060266227, -0.08484803, 0.015462669, -0.021664293, -0.0021070144, 0.0081471875, -0.02281718, -0.019047298, -0.051025268, -0.04434063, -0.04448872, 0.05470071, -0.1656646, 0.066620566, 0.037162133, 0.089207076, 0.062654845, 0.046072647, 0.03538753, 0.010456143, 0.086437576, 0.030943189, -0.03900882, 0.08298712, -0.063439034, 0.022507148, -0.019523054},
   {0.042398587, 0.005692798, -0.26608303, -0.051658, -0.004460148, 0.1554572, 0.12137847, 0.06785159, -0.047986563, 0.069309585, -0.08637055, -0.009813125, -0.12658533, 0.04363949, -0.18469371, 0.06275228, 0.159283, -0.07895127, 0.030741949, -0.045273293, -0.04991516, -0.11726057, 0.080449276, 0.031096175, -0.0079678185, 0.027454745, 0.07166708, -0.07644915, -0.10592842, 0.05514544, 0.007229508, -0.051455412, 0.19884694, 0.09000811, -0.042997174, 0.017109713, -0.03813956, -0.09267001, -0.055267584, -0.08774642, -0.018479075, -0.09977702, 0.07493423, 0.019662414, 0.11151363, -0.024295248, -0.058966443, -0.08208909, -0.07970545, -0.076250926, -0.074590474, -0.02578367, -0.053022172, 0.13978016, 0.05571942, -0.053451203, -0.064297356, 0.071822606, -0.069303736, -0.040378105, 0.03594593, -0.12589267, -0.020193031, -0.06335955, 0.08618068, -0.12839562, -0.038611755, -0.09426863, -0.06995115, 0.049448624, 0.107111424, 0.07541352, -0.0326773, 0.046459094, 0.14810047, 0.03743533, -0.078244075, -0.022217141, 0.06756023, -0.11156999},
   {-0.008263109, 0.09690641, -0.23229092, 0.019429274, -0.03108559, 0.035429265, 0.03330761, 0.032569103, 0.030628357, 0.16577761, -0.012101394, 0.033055555, -0.10904506, 0.0041251853, -0.013670854, 0.14192255, 0.08382729, 0.04643274, -0.0016286062, 0.04930557, -0.017399525, 0.059024822, 0.062387176, -0.03171967, -0.123426065, 0.10984576, 0.035411473, 0.06399398, 0.025159331, -0.1132601, 0.072486, -0.091809854, 0.11767215, -0.053475227, 0.05861963, -0.1358526, 0.07129897, -0.21498078, -0.0057535092, 0.112068556, -0.06626531, -0.0064396327, 0.15189625, 0.044362977, 0.041983623, 0.056988455, -0.03915199, -0.0791476, 0.069353975, 0.0154889515, 0.049281813, 0.022987721, 0.022984622, 0.054876406, -0.031234507, -0.100416526, 0.032883063, -0.09784928, -0.0017620996, 0.066641726, 0.039572693, -0.20755851, 0.06115754, -0.10291834, 0.054745533, -0.19294164, -0.09237704, 0.087129734, 0.018481612, 0.023191497, 0.061608203, -0.098750286, 0.06360061, 0.07787229, 0.114695325, -0.08459964, -0.049760386, -0.005679068, 0.0325494, -0.059051435},
   {-0.06771881, -0.0001854382, -0.11021572, -0.075793445, -0.036656506, 0.016320158, -0.07959168, 0.058887318, -0.07270627, 0.0438058, -0.12497653, -0.096601374, -0.008498115, 0.06758145, -0.056665286, -0.0055885846, 0.056803256, -0.05858796, 0.10326667, -0.0891768, -0.12317429, 0.041747365, 0.09136494, -0.079545476, -0.0749421, 0.16253743, 0.13604546, 0.0040092138, -0.056683425, -0.07096659, 0.05559287, -0.07727783, 0.11727474, 0.03375013, 0.017258065, -0.002154201, -0.09717544, -0.11878182, 0.04204471, -0.039750747, -0.13917135, -0.12732205, 0.07482311, 0.06415906, -0.014462305, -0.00010730326, 0.08385926, 0.023398364, 0.060931325, 0.049772564, -0.088318564, -0.08447843, 0.06412509, 0.09165165, 0.041868277, 0.08169091, -0.10220206, -0.089128084, 0.038803928, 0.019421635, 0.062325902, -0.09513991, 0.053677525, 0.02627942, 0.047629736, -0.052207094, -0.078901, 0.021039074, -0.043013677, -0.07354868, 0.08217753, -0.028612802, 0.04005632, 0.07368658, 0.2188223, 0.08825006, 0.06788669, -0.10731804, 0.056235157, -0.10883106},
   {-0.0809034, 0.092226855, -0.072590865, -0.073835135, -0.18259883, 0.025571482, -0.015136946, 0.063232355, -0.028220696, -0.023288708, -0.05738092, -0.054952864, -0.006354867, 0.07489029, 0.028725436, 0.08817207, -0.029643506, 0.016088665, 0.031360812, 0.07869884, 0.0065543735, -0.024003249, -0.06423156, -0.055567004, -0.037683617, 0.02092122, 0.20869921, -0.013510535, 0.003460656, -0.11741708, 0.03044896, -0.09539654, -0.0150814885, -0.051083148, 0.0205974, -0.016700625, 0.076369315, -0.03883861, -0.08235931, -0.001003723, -0.12297314, 0.02549814, 0.21857168, 0.005733099, 0.12959924, -0.03526695, -0.019184947, -0.058194894, 0.079785496, 0.06332213, -0.0038373172, -0.026063912, -0.007686012, 0.091542415, 0.016385099, 0.08803372, 0.0127898585, -0.0742393, 0.042436473, -0.059708748, -0.013560638, -0.03239975, 0.09536814, -0.082409315, 0.040959306, -0.026138453, 0.018718882, -0.015515195, 0.0074643716, -0.10301238, -0.032288402, -0.014198139, -0.017502118, -0.03243588, 0.103124455, 0.042512573, 0.026351115, -0.002154908, 0.05446257, -0.16263823},
   {0.042414438, 0.016962368, -0.025210638, 0.03835399, 0.0056197247, -0.12741159, -0.2479841, -0.06418985, 0.08535905, -0.0031049666, 0.036656722, 0.017634373, 0.13279, 0.02970735, 0.13772146, -0.021786079, 0.062170006, -0.0067546293, 0.004812871, 0.06908901, 0.054812763, -0.008086424, -0.080721855, -0.08027247, -0.027536863, 0.06145114, 0.10125997, 0.024193749, 0.100111865, -0.1469052, -0.042482138, -0.07288877, -0.11649135, 0.027020859, 0.0834306, 0.09356833, 0.013925972, -0.04858452, -0.03328441, 0.05000293, -0.14332384, -0.021766672, 0.19256634, 0.07733222, 0.12311889, -0.02306556, 0.039135598, 0.0661284, -0.04085878, -0.07001934, 0.06802551, 0.012694147, -0.079505265, -0.022278668, -0.077384844, -0.0962153, 0.07964268, -0.0089519285, -0.06361412, 0.04008824, 0.07930339, 0.13612756, -0.039503455, -0.10492998, 0.010043271, -0.12522453, 0.08151208, -0.09184785, 0.061407603, -0.05610905, 0.064252935, -0.09680081, -0.008729896, 0.01337451, -0.07505694, -0.05067727, -0.07619919, -0.19221, -0.041335642, -0.17454244},
   {-0.08079925, 0.1223971, 0.10608119, 0.07725226, -0.11188583, -0.12613279, -0.108274765, 0.02497104, -0.036928847, -0.14483383, 0.13722333, 0.014895384, 0.06955048, 0.03984917, 0.15189976, -0.082967095, -0.028093424, 0.09216551, 0.09709117, -0.044747412, 0.033546858, 0.14450826, 0.06828342, -0.09779923, -0.07583748, 0.018359564, 0.17012143, 0.07660376, 0.12709919, -0.037446044, -0.0313918, -0.044754304, -0.14561272, 0.025513776, 0.039770275, -0.034264, 0.09033187, -0.014221383, -0.07493006, 0.021754282, -0.007895821, 0.06519206, 0.1851314, 0.059793208, 0.114108026, -0.04627614, -0.07809026, -0.08793581, 0.035608687, -0.018332008, -0.04998057, -0.0055275895, -0.003008707, -0.06299624, 0.054349426, 0.0069651604, -0.09871808, -0.024628209, 0.043848537, -0.0431206, -0.0624621, 0.2629944, -0.052615333, 0.016016643, -0.0390824, 0.09369665, 0.06216041, -0.0016807617, -0.082588226, 0.0906794, -0.07754422, 0.006618519, 0.07367186, -0.08782185, -0.09833757, 0.0459084, -0.029298956, -0.10148342, 0.028569477, -0.05421447},
   {-0.05926711, 0.01806066, 0.10732585, 0.09000836, -0.10598477, -0.033743728, -0.045042157, 0.026179563, -0.022502663, -0.060918555, 0.095571384, -0.07702261, -0.06835486, -0.012943879, 0.036795814, 0.044657197, -0.063019946, 0.05683609, 0.034028918, 0.02105213, -0.020783097, 0.011176006, -0.067275226, -0.008956726, 0.15492347, -0.026490694, 0.017497938, 0.04891203, 0.0027164302, -0.08380251, -0.088365905, -0.035591863, -0.045640297, -0.0073528495, 0.002829023, 0.0774418, -0.006262913, 0.14635053, -0.07915062, -0.062005855, 0.04962122, 0.0010803008, -0.111193605, -0.09914542, 0.13256933, -0.08118274, 0.011252098, 0.07469332, 0.026167376, -0.01938625, 0.093439125, -0.08465659, 0.07246899, -0.04638151, -0.030323725, 0.02578645, 0.08067796, -0.005797685, 0.09277166, -0.012819861, -0.08807133, 0.20840381, -0.012849722, 0.018077098, 0.03617399, 0.09269298, -0.0139578115, -0.063900545, -0.07225866, -0.0055093984, 0.052113205, 0.081616074, 0.21014167, 0.03061999, -0.03073743, -0.01398351, -0.0183849, 0.021789342, -0.074406505, -0.0024105385},
   {0.05521256, -0.23414277, 0.049594674, 0.051348913, 0.118098766, 0.044334985, 0.1136899, 0.017896673, -0.052030344, -0.013793295, -0.011057046, 0.023633694, -0.17491043, -0.09458798, -0.09966782, 0.023496758, 0.027260644, -0.08017512, -0.16380508, -0.042415082, -0.12993446, -0.1910452, 0.01726593, -0.0032298686, 0.17688008, -0.10828266, -0.18920298, 0.040164016, -0.045003634, 0.1031317, -0.09209614, 0.023917295, -0.059358336, -0.098987, 0.015522733, -0.00935076, 0.08210702, 0.16064312, 0.0172014, 0.11150251, 0.2916289, 0.1383897, -0.10530252, 0.041417748, 0.05875323, -0.051933244, -0.022900112, -0.05809073, 0.08508673, -0.050969813, 0.049973316, 0.047158036, -0.08480678, -0.06609553, -0.037032437, -0.0076623484, -0.052837584, 0.036234424, -0.014035977, -0.06920248, -0.06892148, 0.56646127, -0.18394125, -0.065043785, 0.032268845, 0.08692936, 0.082332335, -0.017544637, 0.07752032, -0.046376653, 0.15211944, 0.026056943, 0.22787608, 0.025918994, -0.05667597, -0.06694164, 0.08114024, 0.24523333, 0.07873498, -0.033584576},
   {-0.08278565, 0.032981, 0.018308833, 0.05895694, 0.03180815, 0.045667667, 0.09507217, -0.009278226, -0.04307978, -0.050820816, 0.047518898, -0.01746541, 0.024365054, 0.030980103, -0.045616627, -0.14818038, -0.012074624, -0.02063898, -0.14071299, -0.023351941, -0.028299617, -0.03829206, 0.057864852, -0.093956776, -0.00077266, -0.18175307, -0.13540062, -0.07701398, -0.13415283, 0.18160525, 0.047170494, -0.07932653, -0.113044314, -0.013207715, 0.055693116, 0.11047235, -0.08994763, 0.11198646, -0.07308592, -0.04665424, 0.16780908, 0.08445792, -0.18543497, -0.022851156, -0.0012910215, 0.010879792, -0.07237962, 0.052481968, 0.012689414, -0.099034846, 0.07924021, -0.033290267, -0.045045964, 0.09184389, 0.029245902, -0.08765212, 0.041677255, -0.031589527, 0.07649069, -0.0738962, 0.036763914, 0.04482951, -0.14018448, -0.11977606, -0.055098508, 0.19981205, -0.09359005, 0.056701705, -0.0494189, 0.009765011, -0.1286768, -0.04052446, -0.009382769, 0.031708125, -0.067337215, -0.038308058, 0.06754936, 0.1740537, -0.02704285, 0.03816194},
   {0.02604639, 0.117734715, 0.10799259, -0.012509606, 0.16087195, -0.11461998, 0.15382099, -0.058818344, -0.014693904, -0.015402604, 0.20261997, 0.033821598, 0.124881074, -0.04723066, 0.16597128, -0.18627515, -0.0644243, 0.023019455, 0.02299666, -0.010827885, 0.069427736, -0.17247717, -0.01970122, -0.044583045, 0.024782553, -0.060209777, -0.007669893, -0.19100367, -0.043252833, 0.18259777, -0.07490755, -0.050022356, -0.10718167, 0.06493246, -0.07968755, 0.0602833, 0.02951931, 0.13077235, 0.028733466, -0.15147914, 0.1786325, 0.20447464, -0.051472373, -0.056788605, 0.031350948, 0.009460598, -0.09557538, 0.06269575, 0.035783894, 0.05297361, -0.07945637, 0.055870846, 0.01940211, -0.01407315, 0.045401108, 0.020881103, -0.08818205, -0.046032157, 0.009798907, -0.06591953, -0.0047137365, -0.28271896, -0.08388986, -0.08065543, -0.0023138747, 0.16054948, -0.034602046, 0.042539995, -0.07110716, 0.20063585, -0.15660603, 0.006739054, -0.039494645, 0.03399006, -0.1912121, 0.09295457, -0.037272792, -0.02782917, 0.0008108468, 0.032745056},
   {0.060890872, 0.13853966, -0.20508157, 0.17240267, 0.23754686, 0.003909977, 0.26579282, 0.0638267, 0.07420999, 0.08582206, 0.12952955, -0.036995634, -0.07214165, 0.030153193, -0.06258765, -0.21071956, -0.020441202, 0.04348824, -0.026976608, -0.0108734425, 0.09621311, -0.27240947, -0.014709763, -0.03577031, 0.061174203, -0.14245652, -0.22751953, -0.18181957, -0.048121043, 0.26057768, -0.05982441, 0.03364426, 0.23516971, -0.08717894, -0.07518507, 0.08716651, 0.066131234, -0.17609966, -0.0020046209, -0.18093227, 0.13274068, 0.19250195, -0.19653273, -0.0014359306, 0.09572123, -0.00024712086, 0.0065052733, -0.049336426, 0.035512827, -0.0997268, -0.03830423, 0.043318603, 0.07626556, 0.1520508, -0.09471006, 0.049088858, -0.03758049, -0.08811024, -0.03527801, -0.09168489, -0.055832464, -0.4448924, -0.06627608, -0.24296261, -0.049466826, 0.14072874, -0.017546143, 0.024261225, -0.037499722, 0.22855093, -0.17317005, 0.028132116, -0.093451984, -0.0097865835, -0.07317195, -0.057580292, 0.025406066, 0.102205954, 0.015012259, 0.05710474},
   {0.044313703, 0.14250925, -0.12799428, 0.24760641, 0.1081594, 0.10997266, 0.22215766, 0.082830966, -0.081097536, 0.16135585, 0.083396405, 0.024779018, -0.11364547, 0.07562945, -0.09663537, -0.17998445, -0.089493275, -0.082913354, 0.213936, 0.008045244, 0.18970981, -0.19255093, 0.012976982, -0.07225348, -0.20858374, -0.201951, -0.15116102, 0.014649228, -0.07399895, 0.077955276, -0.086871296, -0.017221758, 0.19331618, -0.050381664, 0.05424221, 0.061114416, 0.026388843, -0.09012504, -0.02469266, -0.29614562, 0.19018158, 0.3480513, -0.11635733, -0.08114955, -0.41343167, 0.08910649, -0.031474628, -0.082526885, 0.034824144, -0.0652501, 0.08210438, 0.05717131, -0.0040648202, 0.120274365, 0.06275609, 0.02394952, -0.016137328, 0.025600975, 0.03564959, -0.07887801, -0.044476032, 0.11140611, 0.20238899, -0.22261366, 0.017063744, 0.19925706, 0.061132427, -0.09163723, 0.05133783, 0.049267218, -0.20826176, 0.060912654, -0.2638812, -0.060753517, 0.027869249, 0.028981805, 0.00026974737, 0.15579067, -0.062064588, -0.006125249},
   {0.051078953, 0.15806991, -0.11100452, 0.28519797, -0.07179653, -0.029847542, 0.14642231, -0.09509099, 0.044977143, -0.17185019, 0.32708967, 0.01011426, -0.060805924, 0.041364588, 0.13848701, -0.26822448, -0.08985076, -0.047835197, 0.1614841, 0.040723316, 0.035873648, -0.033687014, -0.033628594, 0.0077718343, -0.10425472, -0.18851809, -0.10947915, 0.08175545, 0.021187067, -0.16160801, -0.019923998, 0.018562589, 0.039808024, 0.019407516, -0.096768886, 0.0104733845, -0.010503339, 0.009165169, -0.06652369, -0.19523646, -0.03605898, 0.18101712, 0.10170473, 0.0148396455, -0.4760611, 0.032105573, 0.07034103, 0.04375217, -0.051779397, -0.033039354, -0.020877004, -0.008023201, -0.019102985, -0.08657123, 0.04643153, 0.014518634, 0.057029128, 0.0032431132, 0.01768443, -0.09528832, -0.038274426, 0.0970264, 0.206655, -0.15682688, -0.014023326, 0.14417258, 0.0034745277, 0.07968094, 0.007562943, 0.21094391, -0.11315833, 0.02018488, -0.11538944, 0.0060259984, -0.08542954, 0.013832882, -0.02221084, 0.15079883, -0.009496503, -0.07650382},
   {0.062050037, 0.07378139, -0.14940125, 0.10792569, 0.022065151, 0.022648593, 0.06451322, 0.06035761, -0.0325277, -0.04788482, 0.14688043, -0.012636253, -0.2077879, 0.07850058, 0.013253733, -0.097962536, -0.03771432, 0.022826947, 0.004260468, 0.058151957, 0.04439661, -0.031665117, 0.010328516, -0.004588545, 0.021901472, -0.18702826, -0.118005395, -0.040844105, -0.03330772, -0.10010935, -0.04191374, -0.09926884, 0.00037672196, 0.086108916, 0.050700292, -0.11101121, 0.04158158, -0.038716584, -0.010273884, -0.23114276, 0.16346022, 0.13704179, 0.0062620305, 0.0043896367, -0.35710937, 0.009454556, -0.07668088, -0.09374731, -0.052775674, 0.013023204, -0.0067265183, 0.079266414, 0.064261094, -0.0119219255, -0.059353728, 0.089586236, -0.04816939, 0.009775495, -0.058280412, -0.005632464, 0.047009192, 0.004663231, 0.1725799, -0.088759676, 0.08531303, 0.1291417, -0.042437922, 0.008304683, -0.0004917607, -0.014282777, 0.03195723, -0.0036123863, -0.17093042, 0.059744626, -0.08029427, 0.028727181, -0.097255364, 0.15200289, 0.07763383, -0.001256332},
   {0.002954407, -0.056008045, -0.015941165, -0.00792237, 0.09245292, 0.109953515, 0.22970308, -0.04285774, -0.025202937, -0.0013618943, 0.11189363, -0.08835512, -0.16650082, -0.0073904097, -0.014870498, -0.031049717, -0.079532504, -0.0056686625, 0.009546666, -0.039071806, -0.12395609, -0.15825546, -0.04783953, -0.09012833, 0.15010971, -0.16629708, -0.21877761, 0.05593105, -0.13024688, 0.082310356, -0.09812003, 0.07396801, 0.08047701, -0.057054985, -0.09307107, -0.030822797, 0.051733218, 0.02336288, -0.07623486, -0.09472058, 0.29422045, 0.08352625, -0.21642601, 0.061895188, 0.029611057, -0.04343585, -0.033607844, 0.03160825, 0.012736753, 0.013022581, 0.011390999, -0.034866545, 0.010697358, -0.049590524, 0.07232144, 0.05902368, 0.0801242, 0.027055576, -0.03426348, 0.080762275, -0.012697756, 0.16299322, -0.09055911, -0.10157252, -0.060992334, 0.075753, -0.00075290963, 0.05376189, 0.022360608, -0.16382857, 0.13738899, 0.05343429, 0.03673862, 0.07483445, 0.04157566, 0.0033687875, -0.087478034, 0.169006, -0.026662912, 0.17115204},
   {-0.0035692945, -0.010916237, -0.026994938, 0.024722267, 0.02738772, -0.017142242, 0.1502025, 0.048997242, -0.0908782, -0.015417944, 0.20484489, 0.021373691, -0.13691542, 0.06972813, 0.1221366, -0.12807031, -0.118994385, -0.06533691, 0.06693842, -0.04057869, 0.060413778, -0.05842133, -0.076785214, 0.05341243, 0.040462, -0.096664816, -0.1427117, 0.055636346, -0.030830242, 0.06482506, -0.064647295, -0.04269284, -0.09912947, 0.032305796, -0.06385694, -0.07535124, 0.03150757, 0.124502726, -0.08195645, 0.006923339, 0.16020918, 0.10843378, -0.056305766, -0.0426566, -0.26243037, 0.09368495, 0.06434927, 0.037439685, 0.083318904, 0.03616814, 0.09341366, -0.06990669, -0.078612864, 0.023896374, -0.06665878, -0.08801032, 0.013491402, -0.042000994, -0.06349635, 0.02244725, 0.048526265, 0.14199618, -0.027020691, -0.04467669, 0.045334376, 0.05379256, -0.021404915, 0.06617066, 0.03575296, 0.011038957, 0.09764327, 0.046132814, 0.05004796, 0.091381475, -0.13008212, -0.09199025, 0.030377451, 0.1741903, 0.019849231, -0.023578344},
   {0.07714222, 0.009134876, 0.010117856, 0.1328325, -0.045184657, -0.10806653, 0.06116649, -0.07331177, -0.01122133, -0.059895847, 0.09963569, 0.0667704, 0.06709708, 0.021796338, 0.11822116, -0.14191039, -0.098441, -0.05181137, 0.08986229, 0.07397575, -0.05005352, 0.11773473, -0.009461902, -0.08655886, -0.0735293, -0.094760135, -0.016560903, -0.004896606, 0.011183633, -0.041835573, 0.013664401, 0.025344387, -0.09274862, 0.08765308, 0.06464893, 0.02174516, 0.035255145, 0.076179534, -0.045633074, -0.090260305, -0.033807814, 0.04365629, 0.00941152, -0.079840995, -0.23159468, -0.025739796, -0.06974189, -0.0336597, -0.09320642, 0.00204546, -0.017552838, 0.02280351, 0.039767604, -0.1439303, 0.011589298, 0.03232022, -0.068903334, -0.053693924, -0.03734383, 0.087617315, -0.054576054, -0.0069256225, 0.077396624, -0.047529906, -0.054202978, 0.16694994, 0.06668579, 0.0226873, -0.025822788, 0.13185959, 0.053347293, -0.008398853, -0.043641932, -0.053570017, -0.025617506, 0.029201843, -0.046748903, 0.048003826, 0.017291388, 0.003980418},
   {-0.051644456, -0.05622215, -0.08228044, 0.12178565, -0.05243963, 0.060430426, -0.030754544, 0.042349096, -0.00908452, 0.017395614, 0.12875004, 0.041428737, -0.092441946, 0.049543254, 0.0036462646, -0.0047150296, 0.07608912, -0.022559345, 0.017564846, -0.05403802, 0.035212275, 0.03498055, -0.029854171, 0.009660497, 0.011908456, -0.07322906, 0.026192166, 0.06922905, 0.0154220555, -0.09652956, 0.036916465, 0.05431876, -0.06482686, -0.084783025, -0.094510406, -0.06126766, -0.080442466, 0.00080037164, 0.06921725, 0.008991675, 0.08578144, 0.02320256, -0.046218667, -0.07241333, 0.050395753, 0.08808554, 0.09478467, 0.018734679, 0.08225685, -0.05789289, -0.07735083, -0.040486716, -0.031971026, -0.09496366, 0.06793818, -0.056309246, -0.01541348, -0.08698944, 0.039351143, -0.04724036, -0.08227411, 0.030813735, 0.06550503, -0.15110356, -0.046486553, 0.07137183, 0.0368402, 0.0067806714, 0.038513295, 0.019642282, 0.016534457, 0.081935614, 0.01220322, -0.07183933, 0.033947524, -0.058965098, -0.017760493, 0.15624236, 0.01718033, 0.081092276},
   {-0.012350216, -0.04419163, -0.13487175, 0.0253445, -0.1443447, 0.03119901, 0.07975409, 0.04263721, -0.05224092, -0.0059001795, 0.035547324, 0.062312234, -0.111318216, 0.07790326, -0.037362147, -0.016862806, 0.076608635, -0.017801672, -0.0290208, 0.014213362, -0.042726487, 0.033857852, -0.05106396, -0.088982366, -0.06015981, 0.054809377, 0.013498596, 0.038769297, -0.005678921, -0.12526038, -0.056242865, 0.011100793, 0.071590595, 0.084357895, -0.06797608, -0.13969193, 0.0014361579, -0.07308, 0.037525397, 0.04554676, -0.03595009, 0.03648754, -0.014204184, -0.042042203, -0.09321703, 0.044806473, 0.06528955, -0.0068792547, 0.05242631, -0.069062985, 0.008629553, 0.00781904, 0.060379177, -0.066587396, -0.05694508, 0.025926314, -0.049786374, -0.021114234, 0.079880245, -0.06381428, 0.038362466, 0.12297898, -0.014793433, 0.031884998, -0.03415303, -0.033027697, -0.038153093, 0.06887892, -0.027497016, -0.12732041, -0.015355468, -0.080996774, 0.10250244, -0.04359617, 0.07591169, 0.026361525, 0.03583507, 0.034407042, 0.024118751, -0.026739005},
   {0.00189476, 0.123105064, -0.060175855, 0.0053852224, -0.16241594, 0.03162508, 0.04299742, -0.029761218, 0.030945351, 0.08494853, 0.09098715, 0.08712514, -0.040347673, -0.00065998733, -0.043615412, 0.08853227, 0.09278123, 0.08492381, 0.17007366, -0.01932985, -0.03425867, 0.061661337, 0.04856325, 0.06082116, -0.040568758, -0.029300997, 0.12862785, -0.020050747, -0.033237234, -0.08772696, -0.014292533, 0.015078784, 0.08622481, 0.028064407, -0.030912092, -0.10693919, 0.0729349, -0.14816894, -0.037051212, -0.0651649, -0.12395316, 0.086390845, 0.022178613, 0.012762192, -0.0890778, -0.074796036, -0.08422011, 0.032946013, 0.04294944, 0.025119437, 0.034691535, -0.02700849, 0.05385662, 0.06973829, -0.019709941, 0.0004694517, -0.014828252, 0.05912956, -0.042378314, 0.007992026, 0.031212635, -0.005636528, 0.09782181, -0.083011225, 0.016046435, -0.092088, -0.022605399, -0.011355869, 0.095108815, 0.06604235, -0.015877398, -0.030525038, 0.15417345, 0.075008705, 0.15471053, 0.024384126, 0.05852979, -0.027503015, -0.075785145, -0.20537308},
   {-0.05249968, 0.001110096, -0.16846164, 0.0432064, -0.07595982, 0.045845225, 0.004362594, -0.083083585, 0.032094974, -0.0346784, -0.09887246, 0.046466783, -0.07322121, -0.07448158, -0.08380939, 0.112588264, 0.053118788, 0.027347185, 0.055845443, -0.10093899, -0.0007749452, -0.084670484, -0.007401347, 0.02248299, 0.00019732253, 0.118109904, -0.0023957582, 0.049588248, 0.032588203, -0.06823929, -0.09070475, 0.025697676, 0.14395675, 0.033617157, -0.06268184, -0.14004977, 0.030270163, -0.058246348, 0.0247342, 0.019722782, -0.10797651, 0.055577125, -0.0067601535, 0.02138397, 0.0030970834, 0.05240921, -0.077778496, 0.026508167, -0.05902359, 0.073749445, -0.08263832, -0.0410554, 0.062393818, 0.050610512, -0.07538437, -0.055088785, 0.08531732, -0.05884131, 0.04307095, 0.07628124, 0.06888238, 0.11705249, 0.16318989, -0.07952673, -0.060000468, 0.04911847, -0.051009867, -0.017698368, -0.06715219, -0.09028277, 0.111745656, -0.046855714, 0.18202487, -0.05463171, 0.21177466, -0.06486417, -0.042080134, -0.05295469, -0.01735496, -0.032660365},
   {0.027326394, -0.07986016, -0.12926355, 0.056059036, 0.032127213, 0.15848738, 0.1930307, 0.050749935, -0.050256465, 0.023344351, 0.0379031, -0.05852633, -0.06256067, -0.048338722, -0.19023131, 0.11834303, 0.121876374, 0.025411472, 0.09151101, 0.0570344, -0.118157685, 0.016885947, -0.034564983, -0.067359686, -0.062246654, 0.0333865, -0.08633262, 0.0031951496, -0.05631862, -0.05882317, 0.08592674, 0.079728454, 0.20757307, 0.004160339, 0.08922483, -0.025802294, -0.051792916, -0.15715279, -0.028450731, -0.047531348, 0.047144916, 0.1035082, 0.046615254, 0.03144914, 2.4866677e-06, 0.06311048, 0.058819555, -0.03027327, 0.031365518, 0.081961595, -0.086758666, -0.0044261706, 0.091051996, 0.14771616, 0.035887696, -0.004618989, 0.059338294, 0.015464029, -0.0012558401, 0.039797336, 0.0686487, 0.10922169, 0.008519249, -0.035893116, -0.009864755, 0.022876946, -0.05333976, -0.0030302906, -0.094871655, -0.063983776, -0.013857677, 0.0073771845, 0.029499268, 0.088506445, 0.09885631, 0.07401047, 0.045029663, 0.047138713, 0.037204117, -0.10915907},
   {-0.07372154, -0.07079614, -0.14463346, -0.025934137, 0.049797297, 0.1220029, 0.23854847, -0.06797132, -0.021955067, 0.14132799, -0.019813115, -0.048877448, -0.12932631, 0.024097197, -0.23390901, 0.074635595, 0.12335459, 0.0909018, 0.060647365, 0.080998205, -0.10819028, -0.10244848, 0.0014437437, -0.06576815, -0.05859124, -0.111824475, -0.1298332, 0.11413374, -0.077709615, 0.021347357, -0.095347896, 0.053148597, 0.30678025, -0.0041762423, 0.058745142, -0.17040429, 0.028773366, -0.13909243, -0.04172632, -0.020058734, 0.16987512, 0.034016255, 0.038755804, -0.039522246, 0.12202641, -0.0030102804, -0.037512083, -0.0723684, -0.0760059, 0.059122976, 0.025070637, 0.05095848, -0.08864888, 0.093006715, 0.018922474, -0.012953585, 0.05170759, 0.043337118, 0.045713373, 0.011654282, -0.00180123, 0.07825298, 0.10270279, -0.07710662, -0.08645005, 0.047066968, -0.1000858, 0.03776506, 0.080953814, -0.025705615, 0.09772188, 0.059047587, 0.096208766, -0.09045352, 0.09230423, 0.09432519, -0.098619424, 0.1499858, 0.017496325, -0.114430755},
   {-0.07065293, -0.018786179, -0.23732026, -0.05637919, -0.025924368, 0.070633136, 0.13172176, 0.044027515, -0.08845518, 0.04386579, 0.053663515, -0.038766135, -0.16717187, 0.0937215, -0.057117123, -0.023599772, 0.12476246, 0.023024313, -0.020079132, -0.030031027, -0.122874945, 0.007800944, 0.022782184, 0.06855613, -0.119880624, -0.056157574, 0.0332219, 0.05275136, -0.1496314, -0.013669648, 0.016163552, -0.05327958, 0.089696504, 0.059378468, -0.036728635, -0.084717706, -0.05919184, -0.10883244, -0.031927764, -0.015275384, -0.040035013, 0.0697144, 0.1138822, -0.037137587, -0.019779265, 0.02167257, -0.06903117, -0.037673738, -0.005681304, -0.03175651, 0.01970186, 0.068453245, 0.061383087, 0.056074582, 0.06269928, 0.0022235971, 0.02036056, -0.042786565, -0.06434769, 0.00836592, 0.021844134, 0.12132336, 0.16862945, 0.074097425, -0.03884107, -0.0532673, -0.045104068, 0.088176124, 0.026383094, -0.028620493, 0.12877443, -0.042466447, 0.09760309, 0.072849825, 0.13273783, -0.037182692, -0.059087127, 0.0011130606, -0.088827044, -0.119917445},
   {0.06864304, 0.05148923, -0.1396772, 0.063379645, -0.024988616, -0.005957782, -0.057967275, -0.09039741, -0.012429461, 0.072542265, 0.027678534, 0.010513689, -0.10218495, -0.037532285, -0.0480678, 0.03048699, 0.058493555, -0.07769641, 0.07419616, -0.0030530808, -0.025177894, -0.09231098, 0.08837276, 0.07531635, 0.032689348, 0.07337741, 0.03897479, -0.029184295, -0.044042163, -0.022181787, 0.015901994, -0.023818862, 0.14468493, 0.077732526, 0.007391758, -0.02376202, -0.07990185, -0.0035496461, -0.079565294, -0.07157565, -0.02672467, -0.11063054, -0.00999265, 0.014576487, -0.06052491, -0.09337115, 0.0073209777, -0.06796835, -0.06459831, -0.04193177, -0.08794341, 0.011588549, -0.08513661, 0.068363324, 0.04433092, 0.04306595, -0.035178535, -0.008126014, -0.039890304, 0.03937201, -0.08506039, 0.16809985, 0.002986236, -0.06690489, 0.04052206, 0.033353023, 0.021011405, 0.08069195, 0.031137548, 0.03663443, 0.07615958, 0.022151932, 0.096475005, 0.044009205, 0.1599728, -0.092365995, -0.016275901, 0.021249413, -0.02746477, -0.016239936},
   {-0.0011903377, -0.007947598, -0.064302735, -0.06652224, 0.012084464, 0.00033628667, -0.0787272, -0.09205697, -0.08226835, -0.04203029, -0.099951915, 0.070695646, -0.061725635, -0.021264628, -0.10559884, -0.035952967, 0.034843232, 0.07571717, 0.033921327, 0.026364462, -0.15336615, 0.07841776, 0.04371717, 0.061237473, -0.006356765, 0.15352967, 0.040418096, 0.09240661, -0.054041397, -0.010855432, -0.014012452, 0.085796155, 0.033814956, 0.0061680246, -0.003783224, -0.03903987, 0.0059012724, -0.027449165, 0.061736878, 0.088819884, 0.044738382, -0.07768476, 0.009699736, -0.034915525, -0.025034074, -0.0025598556, 0.029002368, -0.05340607, 0.053517308, -0.09669288, 0.067253865, -0.08492895, 0.07391232, 0.02623784, -0.044487458, 0.039008252, -0.029919526, 0.073820256, 0.07468609, -0.09953526, 0.013578713, 0.1110222, 0.06124533, 0.08353401, -0.09240567, -0.046110865, 0.04179912, -0.09617048, -0.09215679, -0.16344489, 0.14629896, -0.08378756, 0.08535681, -0.024836069, 0.055542868, 0.08872671, 0.09060027, -0.04080271, -0.08095925, -0.11543377},
   {0.04162399, 0.0403902, 0.005149795, -0.07022606, -0.12773912, 0.115186416, 0.0061742216, -0.035000622, -0.09648242, -0.05144651, -0.0688767, 0.087539375, 0.032525927, -0.07416735, -0.10240605, 0.083276644, 0.03227173, 0.00706286, -0.06795595, -0.054895062, -0.065000005, 0.023565529, -0.06789616, 0.025046762, -0.10098893, 0.067497745, 0.06505329, 0.0061274385, -0.06478051, -0.01629167, 0.03501762, 0.08350896, -0.05720564, 0.06498486, -0.06051323, -0.040677596, 0.081266634, 0.016984453, -0.06844116, 0.0802682, 0.028071735, 0.00682909, 0.056771252, 0.055222757, -0.02636714, 0.03138996, -0.035907608, 0.014594869, -0.05859587, -0.03196689, -0.006534457, 0.0026548556, 0.00096967636, -0.0053949575, 0.07938557, -0.008690352, 0.014189947, 0.018981963, -0.046281204, 0.0053456705, -0.0030767694, 0.0025421537, 0.06353096, 0.02556908, -0.091405526, 0.081176035, -0.005636678, -0.024597717, 0.056735314, -0.08775245, 0.08137865, 0.091589354, 0.04303708, -0.02853234, 0.120362096, -0.019664444, -0.08804531, 0.0387566, 0.08095924, -0.03164063},
   {-0.091888286, 0.04161901, -0.04795925, 0.05885395, -0.10170491, 0.04427846, -0.107735686, 0.033389445, 0.029387442, 0.004721044, -0.021554291, 0.008760801, -0.015075878, -0.015700646, 0.03568149, 0.07076702, 0.028540045, -0.043385983, 0.072037734, -0.090303846, -0.07998283, -0.05925301, -0.04925208, 0.004104745, -0.052024197, 0.110758066, 0.038004305, 0.13361657, -0.021724572, -0.14045404, -0.03474379, 0.08371169, -0.11385337, -0.020412626, 0.041797176, -0.048616897, 0.0009755727, 0.05770337, 0.041342277, 0.035762478, 0.05533091, -0.08076066, 0.0502806, -0.0673357, 0.08454839, 0.051553123, 0.006159082, -0.08257674, -0.03266288, -0.016738828, 0.027402595, -0.02037459, 0.0042086756, 0.018119792, 0.010298683, -0.01100419, 0.033313535, 0.04730557, 0.01020655, -0.011203871, -0.0743646, 0.07692071, 0.05234362, 0.07412183, -0.053925093, -0.094248846, -0.097430244, -0.035987824, 0.055663668, -0.013516492, 0.04293584, 0.02418955, 0.034042533, -0.08529899, -0.050433155, -0.016578801, -0.08842844, -0.001846896, 0.05870519, -0.029729996},
   {0.02855343, -0.12098008, -0.12756805, -0.015032021, -0.07791862, -0.0046914527, -0.02072269, 0.09036071, -0.005452753, -0.011994926, 0.04525465, -0.03472474, -0.009161982, -0.047619358, 0.012512952, 0.115974225, 0.02255765, -0.08865459, 0.01621363, 0.019852912, -0.10013476, 0.07526568, -0.095582336, -0.08501524, -0.11730669, 0.115985, 0.04840505, 0.08261367, 0.0034767434, -0.03968022, 0.082814455, 0.046325725, -0.035080206, 0.032559924, 0.07464201, -0.117295444, 0.08217651, 0.031015, -0.007904971, 0.09422403, -0.11011445, 0.00087153265, -0.0036667853, -0.028741494, 0.057466757, -0.04004207, 0.026308917, -0.0035974912, 0.032500274, -0.015971161, -0.07207237, -0.025014728, -0.098022394, -0.11160105, 0.014427313, -0.0891212, -0.057787612, 0.038798578, -0.020522438, -0.06032861, 0.03019724, 0.10547454, -0.06445969, -0.07044495, 0.08215643, -0.04638646, -0.05588749, -0.030981641, 0.048624285, -0.14125176, 0.14958231, 0.086837105, 0.029668547, 0.017211972, 0.06618627, -0.084298365, 0.06640996, 0.109471485, -0.06502031, -0.047168456},
   {-0.079450905, -0.098037586, -0.15229106, 0.06602839, -0.04457644, -0.014548132, 0.043744728, 0.0024530145, -0.05295814, 0.09683973, -0.104256906, -0.09740598, -0.122318804, -0.06361991, -0.09111423, 0.04717587, 0.052836683, -0.046034537, -0.049571212, -0.09379615, 0.011365473, 0.04131925, -0.04485312, 0.035697713, 0.04313141, 0.13046055, 0.091899894, 0.115334265, -0.10265829, -0.0085390555, 0.029291188, -0.031349346, -0.03183309, -0.094083615, 0.014076886, -0.05595348, 0.07495419, -0.10331476, -0.056568667, 0.049745575, -0.06464371, -0.009663643, -0.023330785, 0.017667819, 0.107380114, -0.037798468, -0.03781525, -0.076022044, 0.062051527, -0.06618066, -0.079165556, 0.055585176, 0.07971772, -0.04123164, -0.05576685, -0.03670013, -0.08291898, -0.038363222, 0.06091077, 0.053144746, 0.041174464, 0.08116726, 0.108254865, 0.04687251, 0.030690603, -0.070392154, 0.053344235, 0.018751517, 0.010082446, -0.12997629, 0.03132694, -0.0138134975, 0.059668243, -0.06495127, 0.11111517, 0.030759372, 0.043784708, -0.0422773, -0.047289327, -0.04401904},
   {-0.035052262, 0.077592775, -0.25056607, 0.016493281, -0.051183756, 0.08830607, 0.0406095, -0.050362375, -0.053822555, -0.0001556058, -0.029469036, -0.024532912, -0.19265676, 0.08795107, -0.14529146, -0.01956964, 0.075387724, 0.008018017, 0.06011209, 0.036498882, -0.017512528, -0.04353272, 0.037781097, 0.07649356, -0.032551486, 0.020904515, -0.015595099, 0.015401404, -0.05541529, 0.02523755, -0.06284947, -0.04669193, 0.09857863, 0.022903748, 0.080689, -0.1422584, 0.042381585, -0.1887338, -0.085132614, 0.08610795, 0.038488973, -0.07525403, 0.034768447, 0.050493304, 0.09105406, -0.0040567815, 0.046695806, -0.03454664, 0.06772473, 0.0048301825, -0.093124166, 0.0513689, -0.019900465, 0.100467734, -0.00819889, -0.090340264, -0.03793168, 0.07283648, 0.0901149, -0.03338031, 0.041907214, -0.063201874, 0.049714122, 0.04962786, 0.07546339, -0.045548026, 0.04672248, 0.0248941, 0.0016122237, -0.13110153, 0.14287376, 0.034330226, -0.00049890217, 0.02328219, 0.19493702, 0.010487698, -0.03623938, 0.10554322, 0.034868587, 0.014836933},
   {0.08234426, -0.061419163, -0.2971631, 0.0048352876, 0.0018502349, 0.20635723, 0.09358393, 0.03138022, -0.06542963, 0.19500647, 0.006634926, 0.018009415, -0.12131734, 0.06524379, -0.16022734, -0.07071191, 0.1570432, 0.031005286, 0.038444225, 0.04527098, -0.14267981, -0.019792879, -0.033572275, 0.011720887, -0.04852348, 0.01793554, -0.029479131, -0.04084406, -0.17111751, -0.10167682, 0.044834763, 0.024437748, 0.10567196, 0.07827966, -0.0450122, -0.078549676, -0.09961012, -0.060634214, -0.096486, 0.0010987029, 0.1938662, 0.14270455, 0.056999106, -0.08495129, 0.0055012708, -0.0459553, -0.049213253, 0.08864684, -0.010612628, -0.06449579, -0.07319902, 0.0036070365, -0.07427691, 0.07531605, -0.041642115, 0.0105607975, -0.0842642, -0.04232834, -0.003662996, 0.073232315, 0.052848525, -0.03175203, 0.06331111, -0.05302519, 0.07820285, 0.059294775, -0.050677463, -0.0758702, 0.019055687, -0.06594984, 0.09115981, 0.055501416, -0.10335491, -0.092853956, 0.14161788, -0.045189876, -0.014520905, 0.18179245, 0.0111882575, -0.0044784294},
   {0.07686258, 0.07415942, -0.28654718, 0.03893618, -0.03244604, 0.18951714, 0.20158318, 0.04580461, 0.082704656, 0.18693341, -0.03568345, 0.0668195, -0.14643766, 0.07285733, -0.0787618, 0.009086258, 0.06645283, -0.014716513, 0.028766377, 0.029252045, 0.038154766, -0.11461473, 0.08087584, -0.088028036, 0.01480881, -0.044065826, 0.010552086, -0.01951971, -0.16383223, -0.11297443, -0.08410426, -0.054231238, 0.19769488, 0.09004134, 0.0625103, -0.16226241, -0.05189073, -0.08436485, -0.040672243, -0.073364854, 0.025266986, 0.029476698, -0.056189697, 0.02267549, 0.11440689, -0.06770068, 0.042653374, -0.04554082, -0.07417376, 0.07053859, 0.0723873, -0.0214992, 0.03102693, 0.13612938, -0.069625154, 0.07658558, -0.029553069, -0.031127812, 0.030622877, -0.031913683, -0.021583483, -0.10144285, 0.10866888, -0.045728125, -0.031945065, -0.046807047, 0.018426044, -0.025933465, -0.063718185, -0.0038156412, 0.10747771, 0.031932637, 0.01228738, -0.08746882, 0.1136113, -0.08498571, 0.027881594, 0.1603356, -0.09039425, -0.16270874},
   {0.016982947, 0.087417535, -0.036159568, -0.059368152, -0.14271758, 0.13393965, -0.04707606, 0.056632124, 0.008666259, 0.03918808, -0.051736657, 0.05853816, -0.019912988, -0.042037316, -0.039077178, 0.12378181, 0.08913688, 0.027129933, 0.05249497, 0.059715062, 0.037696596, -0.04931531, 0.07948061, 0.0051478827, -0.12739311, 0.09057163, -0.0047468618, 0.08587028, -0.050650984, -0.047932006, 0.012898735, 0.041378286, 0.10173882, -0.06753957, -0.05943631, -0.109261945, -0.047498297, -0.18783328, -0.018974056, -0.0057880566, -0.11712064, -0.008194179, 0.04441819, -0.08753872, -0.05554855, -0.023742765, 0.06948265, 0.052283786, -0.0015474331, 0.055983953, -0.08773238, 0.08163521, -0.024460474, 0.07461504, 0.0008040769, -0.02078925, -0.069339074, -0.04918714, 0.029990949, -0.018477965, 0.015605181, 0.0025164527, 0.1086256, 0.0445166, -0.089323476, -0.03485729, 0.0035354989, -0.07045215, 0.053209238, -0.009354344, 0.060434487, 0.0036078973, -0.090935804, -0.0026832246, 0.094927736, 0.06278559, 0.051817253, 0.034196615, 0.0111942375, -0.0340801},
   {0.048402898, 0.07210016, -0.041258674, 0.09176973, -0.06900972, 0.064891025, 0.060707714, 0.03735478, 0.05590634, 0.025090905, 0.007166255, 0.07812199, -0.10859008, -0.033074014, 0.029520515, -0.039519135, 0.05155135, -0.03536721, 0.09726066, -0.081111275, -0.048197016, 0.086537056, -0.008244708, 0.075727105, -0.032234628, 0.04339002, 0.14915395, 0.11580476, -0.014816793, -0.077310495, 0.084194586, -0.06754158, 0.014752564, -0.0009892621, 0.052531596, -0.09826667, 0.06174484, -0.034996845, -0.01135977, 0.028616482, 0.026608871, 0.05526391, 0.02593838, 0.07376083, -0.0254568, -0.021936998, 0.027975574, 0.016383337, -0.048653197, -0.029647306, -0.026560053, 0.051366, 0.004704594, 0.07724595, -0.07492954, -0.016040565, 0.06833664, -0.016327307, 0.051970623, -0.09750017, 0.056090437, -0.051851742, 0.1084767, -0.090790376, 0.07871898, 0.062082443, 0.06897888, -0.0436005, -0.06458547, 0.05675989, 0.020054294, 0.023339102, 0.0012737327, -0.08632216, -0.020354042, 0.087646134, -0.0635317, -0.10136947, -0.017412571, -0.07921485},
   {-0.071220234, -0.008540425, -0.013016338, 0.06368277, -0.11932313, 0.091109656, -0.01836867, 0.00902467, -0.057983216, -0.07845785, 0.010220152, 0.042348545, -0.010086275, 0.02881483, -0.021295272, 0.043248083, -0.0034821555, -0.00044376403, 0.072840884, -0.071702436, -0.016516805, -0.085438155, 0.08125163, -0.09278584, -0.06867073, 0.015094199, 0.031290103, 0.14807425, 0.0020751248, -0.09633733, -0.059836917, -0.03145593, -0.04511138, 0.0052129477, -0.01802323, -0.017621322, 0.05584984, 0.04958141, 0.009768107, -0.07235411, 0.014306016, 0.115584865, -0.008396135, 0.016185189, 0.13148631, -0.07095799, 0.050851934, -0.08029821, 0.013307757, 0.052184794, 0.055734925, -0.046600394, 0.051050596, -0.017573392, -0.097363025, -0.026558384, -0.05912045, 0.07708725, -0.058081675, -0.004269304, 0.03204923, 0.0055260416, -0.01842553, -0.021412678, 0.0010868087, -0.016672976, 0.015011555, 0.046363838, 0.04747569, -0.017755678, 0.0077217915, -0.079457425, -0.02372972, -0.08841834, 0.1077485, 0.024507165, 0.081679426, 0.074187905, 0.034026437, -0.15553905},
   {0.014716515, 0.024164775, -0.12977457, 0.03300754, 0.05748008, -0.017418178, 0.008391688, -0.01007284, 0.067017354, -0.087953635, -0.0060721515, 0.032166485, -0.07498762, -0.0046111047, -0.010078758, 0.050065555, -0.080517285, -0.035572264, 0.10771903, 0.059826106, -0.057185367, -0.02298246, 0.025120318, 0.005674369, -0.0040049795, -0.11311581, -0.030283682, 0.0949126, -0.0665659, 0.030630685, 0.0062032607, -0.078643925, 0.05852706, 0.049842294, -0.07873719, -0.03513626, -0.08691371, 0.063272566, -0.07630163, -0.092522904, 0.14657307, 0.16693091, 0.0076402207, -0.03346554, 0.04348856, 0.017613992, -0.07974243, -0.0035635356, 0.035345808, -0.05247514, -0.09307207, -0.09099098, 0.061297566, -0.102431536, 0.00310404, -0.088980444, 0.010820805, -0.07247213, 0.035867907, 0.078094, 0.061271273, 0.21650815, 0.04196457, -0.10649001, -0.0070053563, 0.08575611, -0.055811815, -0.079575084, -0.07177914, 0.06291083, 0.01834982, -0.08927385, 0.009662322, -0.04781568, -0.095581844, 0.05183702, 0.060872953, 0.08360141, 0.08811873, -0.096582375},
   {-0.08400304, 0.0660728, 0.074106514, 0.022006448, -0.0027188696, -0.06705977, 0.10496332, -0.000667809, -0.06984083, -0.0967055, 0.13965869, 0.06665936, 0.013148511, 0.05477137, 0.058464125, -0.15769239, -0.16354069, -0.0031956583, 0.11266171, 0.031839367, 0.13235714, -0.05984517, -0.03546423, 0.001966693, 0.033689935, -0.14817601, -0.110110335, 0.08022049, 0.02370113, 0.041363463, 0.049230367, -0.039308008, -0.11030669, -0.050330058, 0.00868258, -0.060639687, -0.0072288667, -0.024139926, -0.029982863, -0.0074564023, 0.10016479, 0.051539026, 0.033071622, 0.07666891, 0.09010684, -0.01725822, -0.001405485, 0.06584878, -0.08358445, -0.0034354778, 0.07414503, -0.028527845, -0.029147245, -0.101945475, 0.048345774, -0.019962884, -0.07132654, 0.06717443, -0.019219786, -0.028967753, 0.06537933, 0.1656476, -0.047660843, -0.20369318, 0.04052826, 0.104971945, -0.007680573, -0.032254394, -0.03931064, 0.16624546, -0.03145098, 0.06976806, 0.10793116, 0.07437207, -0.108953826, 0.018882394, 0.06827029, -0.032141473, -0.027594505, -0.15103328},
   {-0.064294115, 0.054023847, 0.09135297, 0.07769221, -0.052797265, -0.0022827662, 0.10229965, -0.03848793, 0.029789053, -0.04683021, 0.11770141, 0.029170964, -0.11677062, 0.024364106, 0.13935862, -0.050002802, -0.14768548, -0.04571374, -0.06924945, -0.02338052, 0.087227106, -0.02142995, -0.04559335, 0.08315337, 0.0925523, -0.094627485, -0.1464464, 0.032369044, -0.021345746, -0.01980424, -0.09491953, -0.09160172, -0.15855625, 0.0443946, -0.09893972, -0.019021565, 0.07843472, 0.08330977, 0.036926884, -0.09493373, 0.13920979, 0.17062186, -0.054704823, -0.032086056, 0.16461688, -0.044540446, 0.04389081, -0.04416235, -0.037913375, 0.028402258, 0.06938786, -0.032555245, -0.08352117, -0.021485984, 0.007074407, 0.04442965, 0.020557953, 0.067887954, 0.08226294, 0.075937405, -0.066292025, 0.22850633, -0.06828264, -0.1891626, -0.09241354, 0.24301295, -0.0353837, 0.03353642, 0.08814997, 0.09278262, 0.007409609, -0.04549521, 0.100548774, 0.06051112, -0.10610836, -0.013494559, -0.01317109, 0.15742645, -0.0058697117, -0.10022418},
   {0.040074084, -0.083789356, -0.17871813, 0.014492926, 0.026629163, -0.0009890357, 0.248279, 0.00049534865, 0.08206355, 0.095834315, 0.21841386, 0.0046656462, -0.14432396, -0.006818086, -0.04339125, -0.15296033, 0.047221906, -0.0740356, -0.09217068, -0.096817836, 0.04075811, -0.058473047, 0.095163964, 0.084728576, 0.09236067, -0.09472722, -0.29860488, 0.043823946, -0.11008712, 0.011024109, 0.026380697, -0.055291686, -0.025672704, 0.048056424, -0.0060053193, -0.10836386, 0.0088304095, 0.18846166, -0.08308735, 0.008806714, 0.219478, 0.13035971, -0.100132406, -0.060134966, 0.106814526, 0.08334806, -0.008182824, 0.015545259, 0.018968824, 0.035771295, 0.007818483, 0.026978265, 0.070811234, 0.019265698, 0.06645473, -0.041927345, 0.04812811, 0.0047032977, 0.061631374, 0.07532779, -0.088521294, 0.49556136, 0.053046197, -0.14004579, -0.06671356, 0.1524073, -0.05697681, 0.05035751, 0.040446885, -0.09113882, 0.121257134, 0.011838542, 0.25349948, -0.024085183, -0.15189217, 0.012329146, -0.07652826, 0.3092528, -0.061528236, -0.05153907},
   {-0.024970917, 0.066220336, -0.12111337, 0.11691353, -0.074624784, 0.029415308, 0.23658746, 0.087767795, -0.05084154, 0.033605512, 0.13225077, 0.023736453, -0.12890218, -0.062263723, 0.087548725, -0.2458321, -0.15940297, 0.04976722, 0.11401451, 0.040940624, 0.12712929, 0.024266817, 0.06729934, 0.009152111, -0.03196621, -0.24123785, -0.088959575, -0.07798499, -0.010342592, -0.051467746, 0.073229186, -0.05720563, -0.09687721, -0.041733477, 0.067045145, -0.10947288, 0.0071659386, 0.06995529, 0.012520636, -0.2109874, 0.16293426, 0.12750004, -0.06620869, -0.04919491, 0.13575372, -0.071678385, 0.029679857, -0.010655752, -0.024793137, -0.0513474, 0.035169564, 0.013375762, -0.04909426, -0.028405238, -0.061537307, 0.07431062, -0.052815426, 0.019851604, 0.06895947, -0.0043325, -0.018848628, 0.00954175, 0.043228813, -0.21382134, 0.060748957, 0.16057113, -0.015255855, 0.038093157, 0.05542726, 0.13095123, -0.09088036, -0.039287474, 0.20612802, -0.09529018, -0.15390834, -0.08479172, 0.010361623, 0.19237094, 0.0154341655, -0.036719814},
   {-0.045492962, 0.13996856, -0.06422401, 0.26524562, 0.07171603, -0.15022708, 0.1590463, 0.042896096, -0.030842166, -0.1533318, 0.21072777, -0.015799396, -0.07710966, -0.07075478, 0.23312606, -0.17550546, -0.16757567, -0.018590719, 0.08348925, 0.03881796, 0.036715455, -0.09134864, -0.048312135, 0.018631088, -0.0039559496, -0.26987302, -0.08387926, -0.041063122, 0.030662648, -0.078206144, -0.045733508, -0.0901614, 0.030714031, 0.08570848, -0.03495315, 0.10628549, -0.051872738, 0.04723005, -0.090013355, -0.17013894, 0.08191404, 0.2754887, -0.06410194, -0.0076457993, 0.15726714, 0.030071266, -0.034054868, -0.0049738553, 0.0658992, 0.022434847, -0.009864531, -0.062841974, -0.025107618, -0.060571767, -0.09036016, 0.04745288, -0.01437806, 0.045209374, 0.042898275, 0.05760403, 0.056888305, -0.22722426, 0.045976143, -0.17652023, 0.08920384, 0.23849876, -0.054404885, -0.067499526, -0.0020525232, 0.17990258, -0.056677207, 0.07088104, -0.042187687, 0.040929414, -0.05471425, -0.049594335, 0.027003674, 0.026386604, -0.0044304514, -0.061777424},
   {0.0679286, 0.15638015, -0.17322235, 0.22761369, 0.1226347, -0.03277421, 0.30217376, 0.0392102, 0.05049489, 0.12715165, 0.250194, -0.059548143, -0.17830198, 0.0058921203, 0.02155121, -0.1489925, -0.03867826, 0.08428698, 0.015125331, 0.07130253, 0.17698327, -0.08874519, -0.0042412654, 0.04567518, -0.05560999, -0.3028917, -0.12999023, -0.0071661384, -0.0012818958, 0.084230065, -0.004384753, -0.07231859, 0.15767726, -0.012293877, -0.0798691, 0.11536508, -0.050471295, -0.12178886, -0.09043422, -0.2486556, 0.12035234, 0.30818444, -0.042616468, -0.029290626, 0.085687764, 0.018719733, -0.050117195, -0.020363046, -0.009321705, -0.010749528, -0.0067770705, 0.018895583, 0.0554688, 0.1587502, -0.03754048, -0.077225246, 0.07488121, -0.06288333, 0.039517798, 0.064412996, -0.0012427494, -0.42138672, 0.05049593, -0.14811237, -0.09210672, 0.27228913, 0.016709784, -0.0910696, -0.06548314, 0.19520402, -0.19869848, 0.041810542, -0.039474778, 0.08396991, -0.08001208, 0.036476634, 0.01269142, 0.11590944, -0.03197553, 0.030436717},
   {0.04061138, -0.03932853, -0.21031329, 0.16548836, 0.09780598, 0.1902153, 0.33979025, 0.08139391, 0.03415222, 0.01579931, 0.17378509, 0.046691403, -0.31476164, 0.05760082, -0.12747458, -0.105152205, -0.12986594, 0.050989725, 0.1200133, -0.009897277, -0.052586637, -0.09518965, -0.032115877, -0.07826826, -0.13991238, -0.1532891, -0.09604555, 0.054787558, -0.048551746, -0.006099382, -0.024815824, -0.009742756, 0.25427, 0.05004653, -0.08473771, -0.083079934, -0.020560123, 0.012329488, -0.04556172, -0.09236998, 0.22757629, 0.26072687, -0.12720554, 0.0044678794, -0.42608094, -0.026966467, 0.011784598, -0.047386214, 0.028194243, 0.076230645, -0.025738835, -0.0999641, 0.07554504, 0.06419165, -0.09287272, 0.060221832, 0.063504815, 0.0891699, 0.017518908, 0.088253, -0.079307064, -0.027174264, 0.17541493, -0.0024334195, 0.019225396, 0.20658891, 0.04686501, -0.073994294, -0.08526284, -0.07063029, 0.07775498, 0.035534583, -0.22696678, 0.03372099, 0.10177844, -0.06445121, -0.0662109, 0.107187614, -0.04908201, 0.019662263},
   {-0.018854288, 0.16193941, -0.04089419, 0.29517168, 0.06910033, 0.0082418, 0.14011137, -0.089050196, -0.008338398, 0.00043232815, 0.1594794, -0.021283444, -0.09589393, -0.067804314, 0.12664849, -0.1373824, -0.14927858, -0.06227485, 0.10855492, -0.009657701, 0.14566189, 0.10158666, -0.09397266, 0.08451724, -0.09148899, -0.17484988, -0.09605265, 0.076236784, 0.1366984, 0.0048389793, -0.03096234, 0.009643092, -0.046665028, 0.032100484, -0.0817243, 0.03502202, 0.0433633, 0.0093702935, -0.01730794, -0.26388696, 0.1747385, 0.2114885, 0.07479314, 0.08499263, -0.4182907, -0.08336168, 0.08460253, -0.077110425, -0.07407075, -0.040872727, -0.015190236, 0.07208312, 0.044180483, -0.021038324, 0.06353425, 0.037649237, -0.0124391895, 0.007943779, 0.013275139, 0.041465815, -0.058564976, 0.03239203, 0.084122896, -0.09609809, 0.009973317, 0.26147085, -0.04399672, -0.0826592, 0.08468633, 0.043426733, -0.13514838, -0.04388254, -0.22520071, 0.08615441, -0.022100007, 0.022350483, 0.023475176, 0.15636031, -0.0035237644, -0.07183581},
   {0.0095167495, 0.10393721, -0.11690597, 0.17596069, 0.06800456, -0.07010722, 0.1545944, 0.06355564, -0.03171545, -0.1289898, 0.17394146, 0.044527758, -0.02668963, 0.06554147, 0.09419398, -0.23740031, -0.13804397, 0.06637461, 0.08761335, -0.10246336, 0.0618343, -0.080781125, -0.021774016, -0.07103598, -0.018378286, -0.11492374, -0.09221284, 0.1235173, 0.07947595, 0.018865556, 0.04990006, -0.0042193406, 0.03498974, 0.015455035, -0.06710489, -0.040222634, 0.032742873, 0.06428027, 0.07379359, -0.123604774, -0.0002117884, 0.28617802, 0.100262314, -0.079082385, -0.4801667, -0.086974256, 0.08355238, -0.0068879835, 0.016014855, -0.023163673, -0.054850448, 0.074936815, -0.07617224, 0.076293424, -0.09353979, -0.07024935, 0.006951469, 0.06831308, -0.06397872, 0.021702101, -0.086327836, 0.14679825, 0.056958683, -0.14324912, -0.07032055, 0.16715743, -0.0101827625, 0.07166463, -0.043909002, 0.20148656, -0.089992836, 0.0042984714, -0.08555738, -0.09464775, -0.14942457, 0.009540729, 0.029236704, 0.037491657, 0.030569874, -0.14495188},
   {0.018599879, 0.019051414, -0.12049143, 0.13717622, 0.020215292, 0.117938645, 0.24512655, 0.014862643, 0.052155297, 0.084815696, 0.15007643, -0.061080296, -0.19818321, 0.09280842, -0.023165137, -0.06961719, -0.112051144, 0.066601194, -0.035940263, -0.05246816, 0.008736647, -0.08105795, 0.029796667, -0.051060945, 0.036041204, -0.017379856, -0.10239181, -0.04410996, -0.112392455, 0.030854944, -0.00018809368, -0.018407468, -0.018149612, 0.0319444, 0.03028634, -0.10345493, 0.08352091, -0.029208878, -0.087263696, -0.054265387, 0.10190721, 0.19328088, -0.16813837, 0.06686777, -0.081275, -0.086719655, -0.04310345, -0.027282616, 0.06708136, 0.041257504, 0.045833923, 0.0015815013, -0.03470522, -0.036867958, -0.07684629, -0.08845305, -0.081152625, 0.047633227, -0.060720064, 0.06385113, 0.05151158, 0.086709216, 0.05592542, -0.11478176, 0.08823634, 0.080615, -0.061531004, -0.0041810265, -0.010275118, -0.07153473, 0.08029465, 0.0694607, -0.05694727, -0.09636592, -0.059547473, 0.03829158, 0.034939025, 0.25028092, -0.014087668, 0.05926192},
   {0.07993944, 0.030359529, -0.16748083, 0.07942354, 0.04458267, 0.026361145, 0.14756833, -0.062097438, -0.039633796, 0.0842539, 0.24195915, -0.09614192, -0.096122704, 0.03658349, -0.006187798, -0.12065952, -0.14681895, 0.03661575, -0.044898454, 0.07610955, -0.016040778, -0.13932168, -0.08802513, 0.041950423, 0.0615408, -0.19162552, -0.24597439, 0.04880951, 0.064744756, 0.07473077, -0.046877664, -0.0028381567, 0.026442967, -0.08224645, -0.064092636, 0.020568188, -0.036192473, -0.028926319, 0.050184168, -0.022169229, 0.22698872, 0.23387735, 0.023305407, 0.03158629, -0.31697267, 0.08102187, 0.019834794, -0.07505774, -0.039435398, -0.036518972, 0.025712296, -0.065370895, -0.09180524, -0.004454038, -0.025950693, -0.084347226, 0.03710711, 0.0071562035, 0.03714814, -0.0639805, 0.06755074, 0.14518186, 0.061024405, -0.2397034, -0.051014777, 0.25991625, 0.04977172, -0.031436414, 0.08580596, -0.054333407, 0.034388963, -0.0742565, -0.03107351, 0.015178181, -0.03525647, 0.018013723, 0.069912344, 0.21987998, -0.09280689, 0.044639204},
   {-0.09754644, 0.06335449, 0.020791411, 0.07768237, 0.08150217, -0.014116318, 0.076532915, -0.07575098, 0.07399878, 0.07853863, 0.18796699, -0.0761002, -0.14539123, -0.00427866, 0.027114352, -0.12796925, -0.15013614, 0.02605895, 0.12189249, -0.061496906, 0.10766211, -0.057906356, -0.022946313, 0.04096336, 0.08335651, -0.21417828, -0.2369231, -0.0637942, 0.06937871, -0.011243939, 0.042950887, 0.040978454, 0.09441482, -0.09545494, -0.08517924, 0.02597812, 0.00082154723, 0.097255126, -0.058454312, -0.12896185, 0.1959398, 0.26943785, -0.05777064, 0.067003295, -0.22359511, 0.0373329, 0.0071775094, -0.08320692, -0.067452185, 0.041299213, -0.054194815, 0.0051983246, -0.0043204767, 0.07245238, 0.07888055, 0.08786132, -0.05398935, 0.060016014, -0.050085615, 0.08933514, 0.0614438, 0.11680361, 0.1063251, -0.23309788, 0.046288453, 0.1886823, -0.0068241144, 0.04248922, -0.07062404, 0.111647435, -0.0012920833, 0.030801397, -0.0004752243, 0.034003276, -0.06306495, -0.059812013, -0.066524774, 0.18553059, -0.043643776, 0.021851191},
   {0.0666973, 0.01779334, 0.024898808, 0.18025406, 0.09424174, 0.017720917, 0.13303153, -0.03984933, 0.031813256, 0.040895294, 0.02774192, 0.06598337, -0.15050392, 0.07050691, -0.024936106, 0.006189539, -0.029370362, 0.067032345, -0.040720105, -0.008581582, 0.081156425, 0.027319433, 0.071579374, -0.030791646, -0.006888262, -0.09351529, -0.094981134, 0.0565002, -0.06698453, -0.04608191, 0.05595607, 0.042692676, 0.036133, -0.013198695, 0.0835241, 0.031425964, -0.06503204, 0.0008141833, -0.024402494, -0.012457122, 0.078342885, 0.20233972, 0.016155627, -0.0070779533, -0.20672911, 0.07459695, 0.030368783, -0.08013346, -0.009620557, -0.07775445, -0.04331566, -0.074764505, 0.0020779234, 0.023643762, -0.0801847, -0.0007517072, 0.060932744, -0.093906835, 0.059861474, 0.02488569, 0.04711684, 0.16802917, 0.073944956, -0.1029445, 0.072523035, 0.13888353, 0.067935474, 0.056676283, -0.07207444, 0.028723428, -0.017231867, 0.010321402, 0.047504466, 0.07039578, -0.09351229, -0.036556993, 0.05138956, 0.116741695, 0.08561259, 0.09457794},
   {0.052692678, 0.000105474675, -0.10012945, 0.118868984, -0.07120182, 0.13763207, 0.11650627, -0.013185818, -0.051355977, 0.055662926, 0.129814, -0.079911, -0.21742196, 0.046243884, -0.027246343, 0.02535008, 0.065765664, -0.011250429, 0.067735076, 0.0025186609, -0.095925935, 0.05840917, -0.021975972, 0.02634253, -0.062250413, -0.05422153, -0.12914681, 0.07682401, -0.05345926, -0.05453566, -0.031559657, 0.018423112, 0.12467617, 0.077562705, -0.03593847, -0.15868662, -0.02839502, 0.054426614, 0.085838936, 0.046899106, 0.15329735, 0.08632114, 0.005179416, -0.09883826, -0.13835713, 0.07977297, -0.052402206, 0.063517004, -0.07867331, -0.02974208, -0.04472532, 0.03239525, 0.010979862, 0.027065473, -0.016150653, 0.07772179, -0.061911922, 0.06470793, -0.030470654, -0.06436098, -0.09378468, 0.11486427, 0.16432327, -0.00059797097, -0.08993925, 0.14504461, -0.048025396, -0.07744675, 0.076036684, -0.0037883418, 0.04468253, 0.07376773, 0.12461375, -0.041056577, -0.008225278, -0.046144463, -0.018106844, 0.21235138, -0.024994006, -0.034181207},
   {-0.0154514015, -0.03231592, -0.10161939, 0.120953195, -0.010290199, 0.06789015, 0.098205455, 0.07093925, 0.017425485, 0.020141063, 0.09526101, -0.0642609, -0.07543654, -0.06651532, -0.032103214, -0.13850886, -0.025152031, 0.0219194, 0.10951875, -0.050786216, -0.07100961, 0.08205854, -0.055474345, 0.086336315, 0.0090326285, -0.033438038, -0.1499424, 0.12342649, 0.0860602, -0.11325085, -0.055674978, 0.004479852, 0.01429385, 0.014357947, -0.06715829, -0.03177448, -0.076362446, -0.01672887, 0.004096544, 0.0050204694, 0.1398183, 0.073380336, 0.067488566, -0.06413188, -0.12697162, -0.09288777, -0.011142217, -0.10054892, 0.053549226, -0.07278969, -0.06642726, 0.075598955, 0.0018914022, 0.016899727, 0.038025115, -0.0042772093, 0.048352983, 0.087668486, -0.014550082, -0.032432884, -0.08501686, 0.1531917, 0.19657551, -0.07115001, -0.062278476, 0.039158236, -0.029533995, -0.056601137, -0.07803793, 0.06097939, 0.11047519, 0.016827444, 0.02529117, -0.03541237, 0.16529593, 0.07653203, 0.07302584, 0.066189565, 0.075047165, -0.008333046},
   {0.07856192, 0.07355039, -0.12839507, 0.04665865, 0.023011362, 0.16923012, 0.10671901, -0.054297846, 0.09223457, 0.05430814, 0.12053597, -0.031730726, -0.20427498, -0.054626174, -0.041126747, -0.046057254, 0.061911423, -0.07493033, 0.106326744, -0.056510117, 0.0006342413, -0.04155532, 0.07753397, -0.10135193, -0.04271996, -0.027116856, -0.01640157, 0.07324627, -0.03586511, -0.14298314, 0.08603967, -0.045080848, 0.11149578, 0.08252693, -0.07892376, -0.12663603, -0.046130892, 0.017645817, -0.055971205, -0.0172372, -0.028056834, 0.1614226, 0.06204586, -0.018206723, -0.05780977, 0.024240158, -0.09469294, 0.0657378, -0.076408714, -0.026393833, -0.038784612, 0.084774636, -0.045306988, 0.065322556, 0.032503888, -0.024498343, 0.031528216, 0.07145622, -0.018811867, -0.05617975, 0.07300428, 0.14813012, 0.05400083, -0.12607999, 0.07620483, 0.14015992, 0.07694773, 0.03613418, 0.09424163, -0.04406925, -0.03953509, 0.007538381, 0.044944264, 0.07666131, 0.04323043, -0.067647435, -0.025104614, 0.13116777, -0.039246626, -0.17171194},
   {-0.009163705, 0.0048372657, -0.14533703, 0.006364815, -0.124975525, 0.026662197, 0.007392608, 0.028119838, 0.076535106, 0.008236833, -0.0016276859, 0.011675379, -0.14784692, 0.023514457, -0.122512095, -0.07830261, -0.026097659, -0.095347635, 0.087948725, 0.02832901, -0.044557743, -0.056876983, -0.06466858, -0.014871276, -0.05662699, 0.06604209, -0.032515932, 0.1174967, -0.02301447, -0.026685094, -0.055281498, -0.08628597, 0.092759766, -0.070968665, 0.007212722, -0.11940216, 0.08433241, -0.045027252, -0.010361744, -0.060890093, 0.017104879, 0.03671837, 0.049084973, -0.03869881, 0.026440293, -0.016392335, -0.082575366, 0.043803595, 0.034851067, 0.088342816, -0.07721201, 0.020636242, -0.039281804, 0.017079337, -0.07902221, 0.013537152, 0.021994745, -0.077058345, -0.06873352, -0.066864945, -0.061940674, 0.06333743, 0.15783344, -0.13771394, -0.089108616, 0.022596817, -0.007139164, -0.09456729, 0.002549395, 0.06804227, -0.03258003, -0.09178312, 0.0106869815, -0.04320708, 0.110580005, -0.054139975, -0.08782151, -0.01593949, 0.005865004, -0.19423352},
   {-0.0012297429, 0.048586372, -0.21709573, 0.12541959, 0.04305913, 0.06592005, 0.07393457, -0.048037075, 0.08673774, 0.17747729, 0.037729952, 0.014194848, -0.0882983, -0.04608331, -0.15437102, 0.06203894, -0.016171513, 0.004342161, 0.13848053, 0.027086083, 0.02782725, -0.10459491, -0.080951214, -0.017278288, 0.002111487, 0.057305794, 0.04764332, 0.054888792, -0.1618165, -0.0621636, 0.014244516, 0.068885386, 0.12774444, -0.06370303, 0.05379741, -0.14693345, -0.027532473, -0.20628902, -0.004548887, -0.050151028, 0.0894077, 0.08834836, 0.015449058, -0.09268675, -0.060655277, -0.0037580356, -0.02588816, -0.047202796, -0.04994599, -0.030249475, -0.0581405, -0.026579369, 0.028623728, 0.18221769, -0.015227605, 0.055972297, -0.031387016, -0.08649518, -0.09201766, -0.09867754, 0.027975507, 0.046056256, 0.19427383, -0.09166156, -0.06849969, 0.056945298, 0.011239222, -0.06951503, -0.036843155, -0.044885486, 0.09094681, 0.018270744, 0.057899136, -0.017228393, 0.09202756, 0.024156913, -0.08234682, 0.13920772, -0.04660626, -0.11354489},
   {-0.09854246, 0.10041363, -0.18739577, 0.07651356, 0.037057918, 0.04895792, 0.043072626, -0.067714006, -0.09416454, 0.03979267, -0.10244225, -0.045462124, -0.034891933, -0.02049654, -0.038775224, -0.028298775, 0.08860498, 0.03429892, 0.056420144, -0.056847088, -0.040239815, -0.078092955, 0.039921455, 0.020087698, -0.028027296, 0.054382324, -0.08783539, 0.07573752, -0.16383927, -0.13143766, 0.002849707, 0.041415967, 0.14603245, 0.021183137, -0.06462812, -0.057806376, 0.0705789, -0.091421396, 0.040137094, 0.036223333, -0.065387875, -0.05681009, 0.10539709, -0.01825686, 0.0036391194, 0.047390707, 0.023459435, -0.010684049, -0.09365815, -0.09243921, -0.07525681, -0.0625021, 0.0037912023, 0.15044369, -0.097914554, 0.079403974, -0.08312982, -0.018972546, -0.047620725, -0.056731667, -0.013327919, 0.05455279, 0.171943, 0.03170362, -0.03532649, -0.03705007, 0.063367575, 0.018266512, 0.094203405, 0.02364122, 0.11294577, 0.0016860792, 0.14344183, 0.06363428, 0.08921903, -0.05061274, -0.02170955, 0.06690487, -0.0074658147, -0.049230397},
   {-0.02769222, 0.0084195165, -0.05479702, 0.0045896266, -0.12012508, 0.030540664, 0.0030054522, 0.089468755, -0.055843707, -0.07729969, -0.10748438, 0.055328388, -0.0688528, 0.05546228, -0.09792266, -0.005991917, 0.028797988, -0.0046639144, 0.12447692, 0.012067015, -0.03296806, -0.036070198, -0.059097096, -0.06273057, -0.035260107, -0.03673785, 0.07094679, 0.12583151, 0.06279947, -0.06550741, 0.08797411, -0.01815165, 0.08246446, -0.028603796, -0.022382455, -0.14502805, -0.040263902, -0.08433578, -0.017347105, 0.07237724, -0.007356297, 0.0061358474, 0.05985741, -0.061099514, 0.04070759, 0.04733991, -0.08950655, 0.0045536906, 0.0015442761, 0.072645254, 0.07708941, 0.063254826, 0.05899821, 0.04209964, -0.044925008, 0.07577801, -0.03968264, -0.033648685, -0.03899238, 0.0030799897, 0.01242017, 0.007027117, -0.017976448, -0.04316466, 0.030286916, -0.008710112, 0.06826515, -0.08501754, -0.02151782, -0.08856842, 0.08097006, 0.04843299, 0.17274068, -0.047897447, 0.09960179, 0.07568932, -0.07506809, -0.011031506, -0.036403626, -0.07339123},
   {0.048786394, 0.024996845, -0.04086594, -0.05780328, -0.04037567, 0.113345176, -0.0601756, 0.08357708, 0.019506318, -0.020678218, -0.03406535, -0.10150343, -0.035907764, 0.02467879, -0.028083516, 0.095071465, 0.037829746, 0.014992617, 0.11911958, -0.05753119, -0.045081954, -0.044933308, -0.051979143, -0.085559085, -0.104403, 0.08093092, 0.096671574, 0.06778238, 0.09559767, -0.18939336, -0.093777895, -0.0024269116, -0.0745839, -0.062571436, 0.03249969, -0.10867867, -0.0070852386, -0.12722802, -0.03536793, 0.08205816, 0.016038695, 0.034327257, 0.17566265, -0.054164745, 0.119947456, 0.06857767, -0.065543406, -0.015300248, 0.072778404, -0.07441751, -0.0024830848, -0.0009830891, -0.07776276, -0.04482093, -0.05077975, 0.087460235, 0.008564675, 0.02178223, 0.053343363, -0.073768005, 0.021638691, 0.019332938, 0.103875495, -0.056553703, -0.023135155, 0.013451906, -0.009062149, -0.0048636007, -0.005429201, -0.09435425, 0.11906195, -0.0040249056, 0.1478676, -0.049937155, 0.1643109, -0.08695098, 0.0833421, 0.055336267, -0.08458568, -0.025643934},
   {0.03341039, -0.06501873, -0.0703411, 0.023726812, -0.19219169, -0.06308286, -0.081852615, 0.01704591, 0.00804986, 0.008206557, 0.03425008, -0.08348296, -0.056595318, 0.049229287, -0.006825199, -0.030601854, 0.00759419, -0.06303717, 0.032802623, 0.055362843, 0.016831027, 0.093624316, 0.06582888, 0.048487898, -0.12017057, 0.16583008, 0.1364273, 0.052972022, 0.046246696, -0.12781756, -0.07470718, -0.08902654, 0.061613485, -0.082344934, -0.08256609, -0.14523643, -0.076801345, 0.045767143, 0.012702075, 0.07435577, -0.15450825, 0.01335499, 0.09991167, 0.073998176, 0.066112734, 0.017660439, -0.0771658, -0.0900766, -0.095957175, 0.052619785, -0.009926349, 0.0031185283, 0.004660086, -0.024961485, 0.053499483, -0.052136563, 0.02809893, -0.06077191, -0.039737374, -0.044909135, -0.054697473, -0.011096787, -0.01037595, 0.08787372, 0.04428283, -0.10746268, -0.052118327, -0.017364496, 0.006414227, -0.06928878, 0.0941174, -0.09331934, 0.06484332, 0.031072916, 0.06490692, -0.053830378, -0.0050288243, 0.033348355, 0.06989448, -0.08360821},
   {-0.028063854, 0.07250273, -0.1580151, -0.111095026, -0.11303745, 0.04903301, -0.13248287, -0.024719276, -0.039674137, -0.010624373, 0.03503098, -0.095325485, -0.098122865, 0.002265744, 0.053171445, 0.020699607, 0.03890493, -0.010484599, 0.04082918, 0.06710623, -0.07562785, 0.016828934, -0.024056286, 0.046138324, -0.08936312, 0.00095029786, 0.018939298, 0.14514336, -0.048438895, -0.02734787, -0.094599694, -0.014647599, 0.0527248, 0.015949309, 6.7054534e-05, -0.080871865, 0.030062133, -0.013527483, 0.05836557, 0.11529414, -0.06054732, -0.045222145, 0.11885547, -0.07240839, 0.069736734, 0.074463375, -0.048141103, -0.06795727, -0.013970709, 0.01317772, 0.044189937, -0.09952849, -0.037994947, -0.056842282, 0.030068375, -0.055269398, 0.07101262, -0.0019256828, 0.058243297, -0.050866652, 0.080837406, 0.08711741, 0.14018938, -0.02179723, -0.04557641, 0.023019768, -0.076014794, -0.053983334, -0.04358155, -0.059799194, 0.089825496, 0.07471828, 0.11589686, 0.045135397, 0.01395938, 0.053683423, -0.029498037, 0.008468168, -0.079483666, -0.12315022},
   {0.04688229, -0.035797562, -0.04232787, 0.038809057, -0.06025196, 0.05352434, 0.01097863, -0.038433928, 0.08037766, -0.023472026, -0.08195271, -0.09118633, -0.13158944, -0.016284525, 0.04010918, 0.03935043, 0.12017834, -0.0624797, 0.12635435, -0.07837916, -0.018123362, 0.077184685, -0.009461947, -0.067887105, -0.0024062307, -0.0036215612, 0.037259027, 0.16816548, -0.03534507, -0.009780291, -0.090553455, -0.0004483825, 0.0808267, -0.047625046, -0.07808603, -0.023447609, 0.03524603, -0.13627136, 0.07866498, 0.06297109, -0.120676756, -0.039296903, 0.013602168, -0.08988035, 0.08561126, -0.013739489, 0.033260487, 0.03656813, -0.06373529, 0.039656587, -0.04522919, 0.06922205, 0.021863615, 0.012251779, 0.04050926, -0.002886576, -0.019250225, 0.06009296, -0.043989103, 0.04267372, -0.09121928, -0.04771079, 0.07288543, -0.036897812, 0.028053984, -0.035565834, -0.024006736, -0.06770844, 0.028574616, -0.028852072, 0.16923228, 0.08735894, 0.053116474, 0.08787573, 0.12873459, 0.02304244, -0.0039442047, 0.017836994, 0.007084096, -0.055006463},
   {-0.09859171, -0.069438726, -0.0580524, 0.05037273, -0.110602394, 0.05099117, -0.010827065, 0.0032256446, 0.0074160267, -0.004461398, 0.035546668, 0.085936934, -0.0768224, 0.04666377, 0.037791714, 0.13140045, 0.10755629, -0.075872466, 0.0195293, -0.0047812643, 0.009704531, 0.09199546, 0.0057231784, 0.06466745, -0.02532752, -0.03205328, 0.0424827, -0.018016202, -0.084417954, -0.042058848, -0.013302322, 0.0768241, 0.03647632, -0.03192751, -0.093630806, -0.013618266, -0.0988604, -0.07636269, 0.08310736, -0.0007331975, 0.005193681, 0.024102798, 0.03958132, 0.02536218, 0.0077972645, 0.057589598, 0.043187045, -0.014532549, 0.08890075, 0.046564102, -0.0940441, 0.028129991, -0.014908232, 0.07528217, -0.08246344, -0.03355273, 0.0404927, 0.0887922, 0.005947113, -0.08624226, 0.006276712, 0.03318896, 0.1504677, 0.01603382, -0.058879707, -0.042232312, 0.03426457, 0.07644378, 0.05850888, -0.0668329, 0.12205255, -0.029121641, 0.09376659, 0.015925767, 0.16756393, 0.009994157, 0.0051043024, 0.060751505, 0.028501574, -0.076383285},
   {-0.053942554, -0.06779804, -0.16540837, 0.0029804432, -0.0044778027, 0.18237957, 0.04717056, -0.092256166, -0.07073874, 0.00018409404, -0.011544391, -0.07056614, -0.028953439, -0.059225034, -0.19084556, -0.017728403, 0.04573565, 0.0043337494, 0.12577318, 0.056899678, -0.09585508, -0.0533685, 0.032607846, -0.0059262016, -0.057813615, 0.056907997, 0.006520073, 0.055491507, -0.13351347, 0.02194647, -0.012666271, 0.08008926, 0.12572803, -0.09013034, -0.022718297, -0.02635298, 0.029203838, -0.09094586, -0.0995734, -0.0068167257, 0.09805755, -0.077589564, 0.057981465, 0.041724034, 0.015789019, -0.009001404, 0.05173517, -0.06407177, -0.035941787, -0.019558836, -0.012881398, -0.025350899, 0.06815189, 0.09919913, -0.03028354, 0.014924657, -0.08223628, 0.0024052658, -0.07934186, -0.07070318, 0.00028360635, -0.12422378, 0.12521565, -0.09373315, -0.023310155, -0.055979326, 0.0011612581, 0.0076812147, 0.085009865, -0.010391692, 0.049258426, 0.07648768, 0.08015438, 0.012342616, 0.06991903, -0.07842234, 0.039794724, 0.14534129, -0.08402407, -0.01900269},
   {-0.07829227, 0.005701364, -0.1760931, 0.10060371, -0.08954807, 0.11423678, 0.051524322, 0.0311033, 0.05984538, 0.05805668, 0.054764368, 0.04473682, -0.10991576, -0.07181298, -0.140421, 0.07621379, 0.12247541, 0.06594307, 0.044384893, -0.022534952, -0.06286769, -0.12116555, -0.087764874, -0.020818332, -0.098677516, 0.024419682, 0.048019756, 0.044865817, -0.058549248, 0.039876208, 0.06706391, -0.09668029, 0.1280494, 0.017417362, 0.07847463, -0.16040055, -0.08768608, -0.13295631, -0.03307417, -0.06998697, -0.0107749505, 0.08781011, 0.052254632, -0.05267006, 0.12706476, 0.09389003, 0.041585438, -0.038282193, -0.0850191, 0.057980686, -0.015681721, -0.06326015, 0.03227918, 0.014571122, -0.021950636, -0.058112185, -0.015339547, 0.075546965, 0.06320497, 0.026489215, -0.0063906014, -0.0038699568, 0.0062734173, -0.035392802, 0.03135904, -0.11080949, 0.07128143, 0.05188213, -0.052268405, 0.036552377, 0.063989274, -0.051628843, -0.013816357, -0.09635423, 0.20102341, -0.001666449, 0.037727684, 0.11717266, -0.056107845, -0.1056779},
   {-0.004178133, -0.04107866, -0.24080849, 0.083522, -0.033245288, 0.099643745, 0.121441245, 0.036488056, -0.068995066, 0.030058766, 0.0329896, 0.085220285, -0.04152057, 0.027850643, -0.09917498, 0.072386794, 0.05086645, -0.0013322681, 0.10851854, -0.078580424, 0.07277923, 0.008189501, 0.04291462, -0.08682354, -0.05442652, 0.04117654, 0.028917193, -0.044293415, 0.041280016, 0.0374134, -0.027326867, 0.08442606, 0.15418018, -0.046718277, -0.006799335, -0.11955587, 0.032031484, -0.07944816, -0.08823362, -0.10628302, 0.03938549, -0.023304325, 0.042802203, 0.022327684, 0.006835276, 0.08518655, -0.036731243, -0.06124266, -0.09387837, 0.05170768, -0.004747711, -0.029187137, -0.06714752, 0.024012933, -0.028288987, -0.059588272, 0.01954534, 0.0160248, 0.059176736, 0.022601591, 0.0942445, -0.088078566, 0.16878216, -0.0906336, -0.02306825, 0.04703509, -0.025796, 0.08489618, -0.09460278, -0.0018081367, -0.022072516, 0.08143515, 0.042886313, -0.025192771, 0.05134478, -0.050067533, 0.0043812594, -0.019997798, -0.010186195, -0.132828},
   {0.0016869338, 0.09774542, -0.20378518, 0.124488264, -0.117491364, 0.036596283, 0.11007742, -0.09942918, -0.049380913, 0.04104941, 0.029905846, 0.06688091, -0.12132446, 0.0321796, 0.053747464, -0.05756386, -0.11276309, -0.04366555, 0.08431764, 0.03311259, 0.067534, -0.06992516, -0.029984161, -0.009547988, -0.12221943, -0.07706261, -0.027963292, 0.0041303067, 0.009811889, -0.048366588, 0.05876416, 0.05831711, 0.06315342, 0.024348795, 0.026223995, -0.12529014, -0.02375973, -0.026833601, -0.027288206, -0.092882544, 0.009731392, 0.017099647, -0.039996017, -0.07890568, -0.0056654457, -0.022078529, -0.00034024566, 0.07527356, 0.087345935, 0.0717791, 0.07623274, -0.06649161, 0.050112054, 0.01889663, 0.035823826, -0.03674887, -0.0009351095, -0.059201725, 0.05180975, -0.05918103, 0.06931279, -0.07668188, 0.14641337, -0.14575362, 0.020164184, 0.070590004, 0.02991837, 0.02197474, -0.09351918, -0.08455043, -0.00973288, -0.007519283, 0.11998496, 0.0628741, 0.003657806, -0.02413696, -0.05610425, 0.16732793, -0.048795056, -0.023454757},
   {0.08469794, -0.03273837, -0.10469267, 0.15063746, -0.03880974, -0.041270047, 0.11367085, 0.031555183, -0.04321157, 0.08029723, 0.013051814, 0.0047007813, -0.11017668, 0.083558984, 0.059857104, -0.05180081, -0.0422649, -0.06842089, 0.005926456, -0.08656325, -0.040396083, 0.09200905, -0.026964165, -0.07639292, -0.025105456, -0.10375066, -0.023029268, 0.0864564, 0.09588719, -0.018958787, -0.099266864, 0.076028556, 0.0009119122, -0.04231319, 0.08369721, -0.079184465, 0.031971447, -0.03429899, 0.002246601, -0.10054661, -0.02031815, 0.19390854, -0.0019355086, -0.09738529, -0.04410226, 0.09262728, 0.03676877, 0.05203373, 0.04770757, 0.07060595, 0.018856652, -0.0023166132, 0.016415924, -0.05666633, -0.045737397, -0.06419542, -0.018425299, -0.08864655, -0.062218282, -0.04368558, 0.033892743, 0.101234674, 0.004044283, -0.1327478, 0.09145164, 0.07517894, -0.09560299, -0.09923062, -0.043701828, -0.0860986, -0.044207443, 0.080565065, 0.055043723, 0.051163096, 0.036085512, 0.084970646, 0.07116971, 0.123492695, 0.051306777, -0.14648831},
   {-0.07623051, -0.014675806, -0.08217895, 0.051736265, 0.031087015, 0.072251424, 0.17424235, 0.043876346, 0.07466859, -0.07521483, 0.19191448, 0.079332426, -0.13715422, -0.08121341, -0.050194927, -0.05950599, 0.043435924, -0.016358607, -0.023152051, 0.029458757, 0.013554765, -0.10144464, -0.05319189, 0.009998675, -0.07362245, -0.07551838, -0.08538115, 0.11697074, -0.058225136, -0.12628467, -0.07874471, -0.093450695, 0.099185385, 0.07129899, -0.094585046, -0.1686554, -0.06614175, -0.037137553, 0.031689756, 0.043434475, 0.026780332, 0.045755986, 0.047933016, -0.041701503, 0.010518615, -0.033932403, -0.039431058, -0.05594763, 0.013288741, -0.036132336, -0.029549219, -0.02516898, -0.093748145, -0.09360318, -0.019949017, 0.0896251, 0.08500414, -0.050706115, -0.015419781, 0.06450911, 0.013170317, 0.020205744, -0.029456282, -0.10782047, 0.018301025, 0.076281145, 0.044484895, -0.053392347, 0.07554399, -0.022131372, 0.044067897, 0.05148647, 0.032535154, -0.046677135, 0.07815909, 0.032767616, 0.039246064, 0.08512789, -0.058391817, -0.088947065},
   {0.04889349, 0.064980224, 0.03136911, 0.10447706, 0.06964714, 0.09618081, 0.21205519, -0.065551385, 0.07938369, 0.06918336, 0.0976693, 0.04786929, -0.034386933, -0.049373638, 0.08351385, -0.13999651, -0.17072953, -0.05168421, -0.043100506, -0.031062787, 0.036039595, -0.07679601, -0.08784938, 0.08261898, 0.034957916, -0.1993364, -0.1507552, -0.018453978, -0.020204816, 0.015848119, 0.014032095, -0.05226096, -0.09275972, -0.09846988, -0.053027123, 0.0034785785, 0.06825456, 0.12529, -0.02312196, -0.06738574, 0.17533386, 0.13206771, -0.05322344, -0.06673311, 0.0047551217, -0.066028595, 0.054940887, -0.023701666, 0.06402417, 0.022709068, 0.055604838, -0.03475334, -0.08524623, 0.030515952, -0.06259149, 0.047744676, -0.024594346, -0.08328323, 0.029842056, 0.03888302, 0.04210096, 0.1618256, -0.04658511, -0.034159604, -0.022582896, 0.14139782, 0.009811232, -0.06694344, -0.018652126, 0.017917639, 0.059045408, -0.026522186, 0.12670091, 0.060542822, 0.0036446669, -0.024908885, 0.03416513, 0.065416805, 0.011258919, -0.014946499},
   {-0.031700514, 0.06283504, -0.032489173, 0.13191085, 0.094848186, -0.060675934, 0.22304836, 0.052838005, 0.011725405, 0.004220229, 0.23234265, 0.08145205, -0.037366387, -0.05287864, 0.034767397, -0.22156447, -0.20704003, 0.08030734, -0.011095948, 0.06066449, 0.044387594, -0.0017045758, 0.0027467832, 0.050279368, -0.02456028, -0.083583735, -0.1266252, 0.034537774, -0.0075589833, -0.045705568, 0.057622287, 0.046948183, -0.077724256, -0.099551834, 0.015869677, 0.032077085, -0.08160379, -0.01832344, 0.019492887, -0.15421623, 0.21709175, 0.14721154, 0.0010601144, -0.0447036, 0.16115712, -0.08831581, 0.069610186, -0.041337207, -0.013994985, -0.06114802, 0.010354444, 0.06722903, 0.051859885, -0.029358769, -0.010942277, -0.04876986, -0.09693229, -0.04263431, -0.0050479844, 0.033892963, -0.0630462, 0.16857937, 0.03259502, -0.16801724, -0.07655385, 0.14217083, -0.03247383, -0.02031873, -0.07109083, -0.014874191, 0.035897415, -0.021678599, 0.15969571, 0.05292337, -0.07176781, 0.07451496, 0.061726265, 0.17820919, 0.055765755, -0.059856016},
   {0.024789061, -0.039290566, -0.060744323, 0.21341121, 0.11663231, 0.08164551, 0.17653282, 0.08255831, -0.07967546, 0.070511036, 0.14767429, 0.064613014, -0.053625822, -0.0924694, -0.05984208, -0.06875113, -0.07084008, -0.07606562, 0.033719588, 0.029745633, 0.05445998, -0.18194145, -0.030567557, -0.061465453, 0.009415511, -0.19875644, -0.2298394, -0.07418866, -0.06592232, 0.098383546, -0.01636502, -0.033077102, 0.03252326, 0.048739377, 0.037532322, 0.0013452326, -0.062670805, -0.037103347, -0.097558215, -0.11926857, 0.14222263, 0.20478112, -0.08474984, 0.008726431, 0.13059081, 0.08336984, -0.028357707, -0.05189013, -0.056813993, -0.098047934, -0.028730214, -0.057382125, -0.06683308, 0.048100438, 0.021727, -0.061851252, -0.050848927, -0.08388838, -0.063791856, -0.0845744, 0.059132732, 0.08592279, 0.037363604, -0.2131387, 0.047649972, 0.28028917, -0.06683795, -0.010406449, 0.055086218, 0.017399782, -0.098708436, -0.07547136, 0.23769891, 0.071845144, -0.057672665, 0.00019212812, 0.01259711, 0.24678898, -0.07226119, -0.01392281},
   {0.04247338, 0.040975425, -0.08860855, 0.026014388, -0.033901308, -0.058279425, 0.12972468, -0.025342144, -0.010986884, 0.14499113, 0.053851854, 0.06824831, -0.15375173, -0.032004535, -0.07196476, -0.10383738, -0.09961817, 0.039088644, 0.06420237, 0.031484004, 0.032104664, -0.13790406, -0.004088424, -0.0475779, 0.085525155, -0.10464409, -0.22529303, -0.12522115, -0.16332969, 0.14104845, 0.028094864, -0.006292681, 0.13666098, 0.053113338, -0.08980894, -0.11684514, 0.03393117, -0.007625996, -0.047439806, -0.101983555, 0.25690573, 0.21591803, -0.101795696, 0.08788619, 0.035041787, -0.007927954, 0.06824582, -0.04873815, 0.019386977, 0.010221252, -0.06765279, 0.0148836, -0.05080093, 0.035447106, 0.016712127, 0.05135348, -0.08560013, -0.101151206, -0.008542135, -0.021989223, 0.06764541, 0.33736205, 0.028197072, -0.13915499, 0.04145024, 0.13873911, 0.041527934, -0.016199011, 0.03147421, 0.09823637, -0.048653796, 0.068327315, 0.15367357, -0.0008858362, -0.09777469, 0.043438993, 0.019545678, 0.14338836, 0.019634299, 0.03318331},
   {0.011921097, 0.06758349, 0.020688295, 0.19049978, -0.030887289, -0.012360037, 0.093887374, -0.061700646, -0.0484463, -0.117286004, 0.20142286, 0.012006323, 0.015299552, 0.007824138, 0.11195897, -0.20161594, -0.21360925, -0.023424141, 0.07171416, -0.01812668, 0.16699468, -0.14123009, -0.074765384, 0.06985769, -0.013698519, -0.18632601, -0.09667539, -0.05864935, 0.122208096, -0.073331326, -0.005737511, -0.050607096, -0.031906202, -0.031447127, -0.057582192, 0.0931847, -0.051372208, -0.05016594, 0.03642896, -0.112619795, 0.058761783, 0.24906489, -0.007516641, 0.078245446, 0.12494541, 0.0722852, -0.09041086, -0.062082693, 0.011490695, -0.0777069, -0.0772985, -0.060142357, 0.019300412, -0.027536076, 0.08791694, 0.059356973, 0.011923879, -0.059851784, 0.092081405, -0.04018167, 0.08986836, -0.09299345, 0.06623269, -0.1608913, -0.0034622028, 0.19667713, 0.066684216, 0.02864112, 0.038543455, 0.09357758, -0.18361339, 0.066452965, 0.21489422, -0.009222764, -0.15661274, -0.07051051, -0.002125829, 0.050681088, 0.013079934, -0.050209377},
   {-0.020701883, 0.14537935, -0.112970255, 0.14945495, 0.04206446, -0.041657723, 0.25745454, -0.075274654, 0.08721718, -0.033675365, 0.22106916, 0.06929444, -0.18876794, 0.025464237, 0.17600694, -0.16491751, -0.114549525, -0.08315452, 0.049180113, 0.0396751, 0.1656327, -0.042921785, -0.051578224, 0.081093445, -0.104152404, -0.295494, -0.04899517, -0.076765455, 0.10304502, 0.029778015, 0.042593084, -0.040544115, 0.06563176, 0.028759306, 0.06585886, -0.080455706, -0.10107208, 0.038298, -0.008422103, -0.28654295, 0.21154849, 0.28529635, -0.065677516, -0.0049708406, -0.0016802168, 0.026117772, 0.0034343228, 0.03472121, 0.029977283, 0.047771893, 0.08749812, 0.08009868, -0.05870035, -0.042645153, 0.06550413, 0.04701383, -0.061690625, 0.0036331923, -0.0010142997, -0.0003027464, -0.034517102, -0.38112924, 0.04625879, -0.30540812, -0.0015250593, 0.23025706, -0.059570797, -0.03214652, 0.03281396, 0.17471336, -0.11712864, 0.009631673, 0.049898893, 0.014810195, -0.13867265, -0.06615344, -0.075030565, 0.03622905, -0.015918395, -0.03604207},
   {0.018958466, 0.06985389, -0.23800504, 0.093077496, 0.0049636555, 0.15566638, 0.32800168, -0.06648179, 0.0037023285, 0.08787936, 0.124870226, -0.0034053617, -0.24517044, -0.067944795, -0.14299826, -0.2053268, -0.16043587, -0.027577594, 0.10713015, -0.07768131, 0.06632118, -0.12606406, -0.07527582, -0.060006708, 0.007307312, -0.21356621, -0.17997205, -0.051466275, -0.08051394, -0.048222534, -0.03401809, -0.09460461, 0.07709602, -0.004297645, -0.020295361, -0.06309164, -0.05073729, 0.017706102, 0.09297352, -0.09701456, 0.23309894, 0.18741512, -0.08038652, -0.03782179, 0.19007428, 0.022027113, -0.03421311, 0.034932375, -0.049216185, -0.0548808, -0.03901044, 0.033850264, 0.0040530926, 0.15155299, 0.053824585, 0.009503575, -0.04776181, 0.08557212, 0.077670254, 0.025821518, -0.08333053, -0.4314417, 0.1707351, -0.2563071, -0.07752205, 0.27812535, -0.030878183, 0.0025516048, 0.0332546, -0.0410984, -0.02479881, -0.057931982, 0.11119404, 0.043242082, 0.024285376, 0.057705082, -0.069008455, 0.20776202, -0.058246132, -0.117735304},
   {-0.0832681, -0.019786185, -0.23606734, 0.08938391, -0.10053699, 0.105258115, 0.13341218, -0.07059834, -0.059048068, -0.06246616, 0.13931726, 0.061195288, -0.22197756, 0.07291407, -0.018764595, -0.033788323, -0.14373295, 0.059742354, 0.21974719, -0.0937683, 0.0057149967, 0.09678098, 0.07057727, 0.026123615, -0.07594683, -0.16891366, 0.014327643, 0.089730315, 0.034546766, -0.047832772, -0.0969521, -0.094231986, 0.09309512, -0.033559818, -0.09601395, -0.091264725, 0.023686737, -0.11614372, -0.085893065, -0.05191328, 0.12399343, 0.1416474, 0.0832336, -0.086375356, -0.4398294, -0.09203152, -0.079956636, -0.045950476, 0.017040089, -0.039275788, 0.002247639, 0.06433572, -0.07561518, 0.15962213, 0.04224996, 0.027236003, -0.056344617, -0.06984446, -0.046738032, 0.070843264, 0.06614076, 0.028329505, 0.089735866, 0.048701398, -0.07513051, 0.102573305, -0.0121994, -0.031529676, 0.044866852, 0.05640504, 0.08635796, -0.07143723, 0.020870535, -0.08063594, 0.117082514, 0.06923821, -0.039149806, 0.022712572, 0.013173501, -0.11260842},
   {-0.012707569, 0.13770781, -0.08394091, 0.18891332, 0.041602436, 0.04146287, 0.21193418, -0.0010643579, 0.0018908695, -0.07227407, 0.2303152, 0.0018783271, 0.0013304885, -0.075138286, 0.03384254, -0.2354701, -0.08439449, 0.091934524, 0.13399173, -0.10269776, -0.00053808617, 0.057541564, -0.024564348, -0.0700755, -0.17317136, -0.13903718, -0.042233415, -0.029728854, 0.11155957, -0.116178185, -0.06921922, 0.063716285, 0.07206587, -0.07725979, 0.046372127, -0.009521489, 0.009003268, 0.04849372, -0.008518414, -0.19299963, 0.10695467, 0.28833076, -0.016013933, 0.02937144, -0.4152221, 0.013883136, 0.08859577, -0.0014107361, 0.0019280013, 0.009669381, -0.014821194, 0.08796405, -0.07354501, 0.078899376, -0.01918906, -0.027511265, 0.00042214245, 0.055788185, 0.0141940415, -0.015159431, -0.024331957, -0.021973344, 0.19239287, -0.016197713, -0.06474202, 0.2783665, 0.07440722, 0.033450313, -0.03683474, 0.118332766, -0.06253611, -0.08713376, -0.17231259, -0.08784235, -0.012154446, 0.08347418, -0.059990395, 0.0853884, -0.023624271, -0.019780425},
   {0.06397154, 0.10169766, -0.05916591, 0.17260943, 0.093466304, -0.114322096, 0.08802089, 0.028300716, 0.02099585, -0.07963415, 0.14342436, -0.009521976, 0.037336897, -0.010375991, 0.065085195, -0.285663, -0.21827771, 0.056844927, 0.15337408, -0.02818975, 0.18282203, 0.03443112, -0.06623012, 0.04850451, -0.077090666, -0.16222236, -0.114212476, 0.09424725, 0.09481707, -0.11434064, -0.008031284, 0.02830321, 0.077601746, -0.0049043857, -0.024543341, 0.039358214, 0.08099483, 0.004290519, 0.009380544, -0.19039695, 0.045528393, 0.28250852, 0.09298, -0.08548915, -0.5238317, -0.024773508, -0.034607965, 0.037799895, 0.014968857, 0.057129476, -0.09178355, -0.030748578, 0.0456502, 0.06338509, -0.04557962, 0.02322155, -0.018599216, -0.045045335, -0.051856063, 0.028634863, -0.070177674, 0.069362156, 0.027719226, -0.23289575, -0.059825443, 0.18489993, -0.015769927, 0.0865175, -0.023793407, 0.099454336, -0.22660086, -0.060523037, -0.26359665, 0.05079737, -0.099480465, -0.064706795, -0.037067372, 0.0786327, -0.019651223, -0.046080425},
   {-0.09809029, 0.057615027, 0.005199017, 0.16859193, 0.15007497, 0.033300914, 0.100904115, -0.06895081, 0.027424324, 0.041050922, 0.0371018, -0.07668226, -0.18661876, 0.088844486, 0.04359132, -0.12275052, -0.049895447, 0.08519923, -0.039964773, -0.06418601, 0.093175404, -0.14648405, 0.039870404, 0.015651569, 0.048344333, -0.14018853, -0.1633985, 0.04545006, -0.119048014, -0.017043037, -0.07355178, -0.0655071, 0.029175851, -0.021332279, 0.069259256, -0.08396469, -0.06222575, 0.08577483, -0.028430462, -0.06408614, 0.14790593, 0.14142062, -0.14570476, -0.10094039, -0.22353095, 0.0013234466, -0.075934395, 0.07908571, 0.07776085, -0.05344484, 0.023956783, -0.032871623, 0.060365677, 0.026862502, -0.0403202, 0.03257076, -0.07784573, 0.061522864, -0.01704263, -0.05125281, -0.037144635, 0.15672374, 0.040707134, -0.052017942, 0.047977574, 0.09291561, -0.09895573, -0.061108183, 0.03243359, 0.09900103, 0.0020614006, 0.08189048, -0.2326119, 0.084513776, -0.066412695, -0.020238377, 0.02322375, 0.024458684, -0.0024878343, 0.12511913},
   {-0.0573173, 0.01232333, -0.238666, 0.17454383, 0.09018498, 0.006290319, 0.1703013, -0.01836259, -0.034412555, 0.12883537, 0.10784303, -0.030444074, -0.1348892, -0.09176602, 0.018561957, -0.22390705, -0.040370025, 0.015626289, 0.038588043, -0.05733086, 0.0035908867, -0.017075216, -0.039642155, -0.08900838, -0.0027036457, -0.19638386, -0.30330926, 0.0150064435, -0.063383155, 0.019229766, -0.025794292, -0.00034642016, 0.07648241, 0.0079829935, -0.096891224, -0.16102612, 0.035022654, -0.033747617, -0.01940633, -0.12699461, 0.3012058, 0.26499486, -0.06439918, -0.0014137411, -0.39922264, -0.08345391, -0.0242877, 0.037673816, -0.0066439314, -0.0048256, 0.0898278, 0.056536306, -0.08089665, 0.13292345, -0.04900139, 0.08002497, 0.04846634, -0.004028863, -0.040746704, -0.027565718, -0.08852465, 0.044726487, 0.109948516, -0.17414045, -0.013044909, 0.19038674, 0.050001025, 0.02236143, 0.07875561, 0.043845862, -0.017492058, -0.01095483, -0.09218983, -0.054662086, 0.062984414, -0.007420592, -0.08329337, 0.2439991, 0.041336812, -0.078446895},
   {-0.045240894, -0.035628375, -0.093251444, 0.114088595, 0.04533571, 0.07618923, 0.19397286, -0.09979539, -0.037944466, -0.004837893, 0.18040285, -0.04856595, -0.20912744, -0.0038502216, 0.023973536, -0.10559607, -0.0307139, 0.01811795, 0.022316204, 0.0662416, -0.04151539, 0.012721143, -0.04108736, 0.009610709, -0.059822507, -0.19164233, -0.21703161, 0.012452579, -0.0023124802, -0.102888264, -0.09354872, 0.06251268, 0.053233583, -0.002241284, 0.029035904, -0.05379258, -0.04206694, 0.060586512, 0.07665044, -0.14648183, 0.14922498, 0.18394205, -0.0046798503, -0.10077257, -0.30226573, -0.036498394, 0.052885734, -0.008659556, -0.069537126, -0.052109253, -0.06343438, -0.08935908, -0.04428926, -0.036837228, 0.020615257, 0.08823943, 0.052728713, -0.06832531, -0.05501729, 0.0052112206, -0.082552835, 0.15798913, 0.089539826, -0.19233385, 0.029225893, 0.2738943, -0.047480103, -0.0146447895, 0.007488273, -0.058275916, -0.035592496, 0.089547805, 0.039221648, -0.08802422, 0.03971777, -0.006881729, 0.056610633, 0.16886398, -0.083025545, 0.06442852},
   {0.017548565, -0.04812895, -0.14333917, 0.17122945, 0.06997996, 0.13833022, 0.33449176, 0.036087196, -0.058090318, 0.07383525, 0.19849655, -0.040435407, -0.22892845, 0.04021304, -0.026739221, -0.09343218, -0.023294486, -0.09291923, 0.099251315, -0.05062639, 0.007346817, -0.05553317, 0.018390752, -0.05962045, 0.055859227, -0.11467519, -0.14067292, 0.112816356, 0.06314704, 0.037105102, 0.06083911, 0.040778756, 0.14340971, 0.018111937, -0.057992335, -0.17792144, 0.039102253, 0.06255353, 0.037507135, -0.047482718, 0.25486562, 0.32002357, -0.162745, 0.077090554, -0.21333362, 0.07288944, -0.07287336, -0.073426925, 0.007225216, -0.0072229137, 0.040699072, 0.0411291, 0.07232466, -0.0048848274, -0.029824214, 0.039630573, 0.065831184, -0.09363505, -0.02640763, 0.0010678121, -0.037146002, 0.09880687, 0.107062094, -0.21034558, -0.014019422, 0.28292608, 0.0170611, 0.03709374, -0.0010150298, 0.04701498, 0.04292109, 0.087504156, -0.057246566, 0.029860165, 0.07650002, -0.04526804, 0.07185609, 0.3130754, 0.009693462, -0.03858567},
   {0.054225802, -0.11329363, -0.17208736, 0.12447636, 0.03425438, 0.15439662, 0.15454203, -0.085046045, -0.08608201, -0.05869334, 0.04826126, 0.088933244, -0.15152267, 0.0023626685, -0.047268353, -0.038387544, -0.012020243, -0.0811373, 0.13800591, 0.005027045, -0.116094396, -0.033537876, 0.02021236, 0.06618343, 0.09618415, -0.13827948, -0.2257731, 0.037718993, -0.051289544, -0.09452683, -0.03861175, -0.0114679765, 0.11433218, -0.08805365, -0.09468307, -0.19362985, 0.07907658, 0.03452213, -0.0044196243, -0.1393849, 0.17279671, 0.1752409, -0.0431218, -0.019622913, -0.23938051, -0.09560614, -0.00398881, 0.036505762, -0.0025931536, 0.042398542, 0.022841945, -0.052264232, -0.02314462, 0.07195145, 0.004698042, -0.06907127, -0.09940699, -0.0030082671, -0.0365551, 0.07608056, 0.030168168, 0.115824364, 0.15058225, -0.18563114, -0.07645945, 0.13389438, -0.036895983, 0.060839713, -0.019993946, -0.025021488, 0.091267854, 0.08504111, -0.029503878, 0.045009132, 0.04925183, 0.0040635765, -0.059254874, 0.11770311, -0.08431542, 0.07474405},
   {0.06411299, -0.011498763, -0.08476473, 0.15918204, -0.06681457, 0.10188934, 0.1120241, 0.046326246, 0.08671468, -0.037585713, 0.11176152, -0.09998851, -0.19640405, 0.069033794, -0.027196435, -0.09140824, -0.04560969, -0.073510274, 0.13268338, -0.025839591, 0.019131657, -0.05280096, -0.005302474, -0.07602836, -0.01532535, 0.019404508, 0.019805964, 0.08602659, 0.021419585, -0.03408494, 0.019003535, -0.06396183, 0.048419733, -0.02352986, -0.015885301, -0.04252914, -0.027912918, -0.06277376, 0.021141624, -0.13338679, -0.031580232, 0.022657963, -0.028955303, 0.050736357, -0.1115798, -0.03904587, 0.04054425, -0.007513332, 0.015545037, -0.011603448, 0.019017972, 0.021767538, 0.039582085, 0.047740847, -0.022891313, -0.06326828, -0.037693445, 0.071856484, -0.062390093, -0.07289105, -0.027177863, 0.012668333, 0.07638069, -0.14989159, 0.02078607, 0.02607408, 0.070972204, 0.060616508, -0.062711984, -0.036593866, -0.043423522, 0.034215715, 0.113435574, 0.04472283, 0.04132995, -0.018462531, -0.058464404, 0.06406079, -0.0634976, -0.06434985},
   {0.0076384945, 0.06325231, -0.0929397, 0.054950994, -0.028438395, 0.030770153, -0.03645489, -0.030910658, -0.050968207, -0.06897683, 0.14057691, 0.059961595, -0.04282017, 0.07993283, 0.020053852, 0.051720526, -0.016415656, -0.06952332, 0.08349189, -0.008545634, -0.03369409, 0.075926006, -0.020672657, 0.018165415, -0.062189862, 0.041847922, 0.033432808, 0.11076775, 0.0941546, -0.06871272, 0.03217212, 0.028451696, -0.040336058, -0.08826752, 0.062955044, -0.05853641, 0.0863133, -0.15682349, -0.0107640615, -0.018387089, 0.015435263, 0.09434497, 0.012101186, 0.010613768, -0.19452251, 0.07954762, 0.06638246, -0.0694929, -0.0481727, -0.06483337, 0.06490355, -0.04903378, -0.05579044, 0.0669034, -0.0893393, 0.05338733, -0.078173265, -0.066794865, 0.025899999, -0.061085094, 0.06453619, 0.122139394, 0.13389535, -0.09921464, 0.037846737, 0.08407801, -0.063625515, 0.017533159, 0.037099756, -0.044456262, 0.0063917064, 0.0029310752, 0.040997133, -0.05678401, 0.09051573, -0.035744485, 0.0049582846, -0.035364855, -0.031853914, -0.122018464},
   {-0.076881096, 0.13296236, -0.17800683, 0.012715127, -0.07030516, 0.004287562, -0.00961056, -0.049738437, -0.07609645, -0.005169625, -0.055671662, -0.046748206, -0.06402082, 0.047922157, 0.010637664, -0.0018820422, -0.08849114, 0.047319584, 0.17097116, -0.085668154, 0.038712468, 0.047715615, -0.06845906, -0.013914007, -0.03545555, 0.032747466, -0.0008160593, -0.026135549, 0.042123284, -0.15047283, 0.014185746, 0.050627537, 0.14685014, -0.016126813, -0.079197906, -0.06224631, 0.018835478, -0.11278225, 0.015410319, 0.013756795, -0.026487919, 0.09294426, 0.15612401, 0.06357706, -0.10103404, 0.06751182, -0.060208693, 0.047213644, -0.039156336, -0.031356428, 0.015781, -0.093493275, 0.008265722, 0.117474645, 0.04936473, -0.02102497, -0.014988801, -0.060108103, 0.019967817, -0.049557332, -0.056940164, 0.1385268, 0.09690644, -0.03554907, 0.088126995, 0.004605166, 0.026352527, 0.0021930202, 0.043923892, -0.021600276, -0.018827433, -0.07271964, 0.14279817, 0.034728926, 0.14343855, -0.09135766, 0.04512862, 0.062828794, 0.06012554, -0.1834105},
   {-0.08136305, 0.029399952, -0.26608044, 0.060250293, -0.081045195, 0.13859141, 0.11881238, 0.08225185, 0.02698446, -0.024629988, 0.003714907, 0.027857559, -0.041699864, -0.06412556, -0.12278144, 0.06386783, -0.021089137, 0.08430942, 0.041118696, -0.0244578, 0.054353114, -0.07101203, -0.028381921, -0.081735395, -0.14577036, -0.07956928, -0.02865714, -0.012134745, -0.021561205, -0.102673076, 0.071251534, -0.010337664, 0.03415627, -0.040202342, -0.06390107, 0.032151442, 0.02092062, -0.112068236, 0.052874755, -0.08003581, 0.046687663, 0.01977067, 0.027144345, 0.0125755025, -0.051268026, -0.045986608, 0.046960272, -0.009623363, 0.028969068, 0.07358461, 0.083168365, -0.02545236, -0.07943944, 0.073433205, -0.098407425, 0.028008811, -0.088545024, 0.05143416, 0.051697575, 0.04951683, -0.08954068, 0.07041623, 0.07689999, -0.12990159, 0.07498812, -0.07729992, 0.057845317, 0.0752765, 0.07318018, -0.06669423, 0.028131356, 0.08190309, 0.006488788, -0.072468415, 0.2050097, -0.073033474, 0.033215977, 0.09819218, 0.08315422, -0.12309117},
   {-0.08337611, 0.077920735, -0.14237303, 0.079596765, 0.010963414, 0.1706483, 0.13287762, -0.08026047, -0.039924808, 0.067581296, 0.009457692, 0.025120866, -0.104096875, -0.06053446, -0.18075584, 0.10401568, 0.040336557, 0.090416424, 0.10979039, -0.031747002, -0.1016203, -0.042486995, -0.026045904, 0.06341901, -0.092240125, 0.08946562, -0.03090966, 0.0028472238, -0.14315945, 0.006335106, -0.07741708, 0.06960554, 0.02835593, -0.051145945, 0.06497904, -0.13030615, -0.09192118, -0.07525388, -0.07192447, -0.09035437, -0.05994238, 0.027913973, -0.0056643863, -0.07461053, -0.035801373, -0.050993524, 0.01730068, -0.09818624, -0.006028416, 0.085102476, 0.038842387, -0.027387332, 0.012852694, 0.1426703, -0.046588637, -0.091427855, -0.08912633, -0.065429956, -0.06801258, 0.060278192, 0.029312812, -0.018555531, 0.06805493, -0.010756985, 0.07114334, 0.021529686, -0.0050075543, -0.019522298, -0.051131796, -0.10588385, -0.020422604, -0.09497283, 0.03643683, 0.062456973, 0.04843729, -0.011709519, -0.048944328, 0.06814368, 0.07183011, -0.107562415},
   {-0.06832741, -0.059946533, -0.18885049, -0.05396086, -0.1561645, 0.10956529, -0.020491587, -0.0017412747, 0.050926376, 0.01695901, -0.06810542, -0.078514315, -0.10325691, 0.07233784, -0.08456649, 0.13945557, 0.032542, -0.02641508, -0.021461638, -0.037608407, -0.11296373, -0.078311026, -0.06589439, 0.05637542, -0.061894566, 0.027541177, -0.011978901, 0.039097827, -0.094642796, -0.07156333, -0.025524598, -0.041384283, -0.00475709, 0.07171878, 0.028762441, -0.05168748, 0.05044061, -0.03778283, 0.037318524, -0.091605894, -0.003857009, 0.033318628, 0.15542656, -0.03500422, -0.02068158, 0.0752467, 0.048304223, 0.085641734, -0.097195774, 0.019424995, -0.018256858, -0.09138834, -0.09077402, 0.072463356, -0.0051871464, 0.018614355, -0.096184425, -0.03806429, -0.068647355, 0.013361918, 0.006118603, 0.05394443, -0.028882686, 0.078037694, 0.027199388, -0.104223885, -0.028577458, -0.033044454, -0.066105075, -0.0058424603, 0.11312623, 0.039470006, 0.03926359, -0.08952913, 0.10528673, 0.04658989, -0.014647597, -0.059046634, -0.07591595, -0.06043282},
   {0.06486964, -0.06805698, -0.08082646, -0.0642704, -0.17437539, 0.11459287, -0.07025261, -0.07289152, -0.0864596, -0.07587087, -0.037767105, 0.07160351, 0.003613134, 0.056884326, -0.040082417, 0.0068793143, 0.09732247, 0.07132124, -0.033953935, -0.07003124, -0.1424516, 0.1083371, -0.0037036985, -0.08060095, -0.042070962, -0.0007397414, 0.0154829025, 0.031024976, -0.054122854, -0.1279185, 0.058980707, -0.020735057, 0.019392949, 0.01247057, 0.07420236, -0.09110114, 0.028390754, -0.040144242, 0.0830247, 0.09255607, -0.11120296, 0.014210237, 0.13969885, 0.066125326, 0.07864486, 0.046806045, 0.08170027, 0.02730288, -0.066886604, -0.06715235, 0.067008875, 0.011680061, -0.097275876, -0.04786475, -0.01888638, -0.074062765, 0.067737356, -0.0856316, 0.06373652, -0.040250633, 0.056235977, 0.10024534, 0.14113836, 0.08116798, 0.024348468, -0.047491375, 0.025364943, 0.07435662, 0.033601575, -0.036015287, -0.019711379, -0.0937763, 0.16704036, 0.028478784, 0.18215346, -0.084794365, -0.075835995, 0.07246208, -0.09650736, -0.031339202},
   {-0.045222104, 0.004861365, -0.13103269, -0.10495637, -0.04806195, 0.010170854, -0.17098005, -0.004750458, -0.0026982874, -0.036052514, -0.09708739, -0.04227594, 0.094243474, -0.08961855, 0.02855985, 0.15723455, 0.11071118, -0.016828865, 0.063586965, -0.04057783, -0.070479706, 0.04037447, 0.07192031, 0.035948493, 0.025706844, 0.08436096, 0.10747165, 0.075213455, 0.054631054, -0.04046363, -0.08101373, -0.05334691, -0.10607622, -0.03595591, 0.065391034, -0.09352284, 0.066276394, -0.13378544, 0.06934098, 0.042531997, -0.10259829, -0.027010988, 0.035774346, 0.08493857, 0.06698791, -0.08816144, -0.005361162, -0.10048499, -0.07969754, 0.025569677, -0.041814797, 0.0029319685, -0.08222811, -0.12004133, -0.023801083, -0.057972934, -0.026071168, -0.00068337587, -0.008948043, -0.04923642, 0.06769455, 0.04215922, 0.11455209, 0.039668415, -0.015022099, -0.030051718, -0.051975615, -0.04993616, 0.04712019, 0.021247417, 0.059496332, 0.0053344024, 0.10847117, -0.013146125, 0.06434054, -0.0032040253, -0.059744027, -0.104112275, 0.027470121, -0.10459597},
   {-0.097644344, 0.08376419, -0.110369235, -0.11675964, -0.07185161, 0.0977976, -0.015574927, 0.035836272, -0.00938159, -0.027792448, 0.01128302, -0.096377, -0.0019067823, -0.09367893, -0.0052024894, 0.1416057, -0.020605749, -0.09121851, 0.07364046, -0.046345443, -0.08147712, 0.14688797, 0.0052059516, -0.0223761, -0.014240725, 0.014496326, 0.083363794, 0.15163837, -0.014843336, -0.17893493, -0.05577462, -0.09718163, -0.07132008, -0.08332913, -0.09929614, -0.13180172, -0.08360698, 0.034957785, -0.06238691, 0.054687798, -0.1738368, -0.06418383, 0.15541032, -0.07970806, 0.0065556285, -0.051829726, -2.4579465e-05, -0.0313475, -0.009346547, -0.014951646, -0.002336517, 0.01579335, 0.020020382, 0.03403078, 0.08546112, 0.012985976, 0.06629804, 0.07211706, -0.0372726, -0.042542607, 0.08180603, -0.009839282, 0.013804019, 0.06788212, 0.041817836, -0.122089796, 0.03938379, -0.0138399685, -0.03373592, -0.103653036, 0.11420213, 0.092092805, 0.1229808, 0.005593554, 0.13384578, 0.05085122, -0.08536401, 0.02444068, -0.07571204, -0.03153101},
   {0.066902936, 0.011099945, -0.084430434, -0.11058151, -0.10890498, 0.048634414, -0.10559162, -0.095524356, 0.07198144, 0.017425993, 0.039744355, -0.012450168, -0.037354738, -0.013372518, 0.0040149395, 0.017911209, -0.030027313, 0.022977091, -0.04211862, 0.032283537, -0.14784941, 0.13649808, 0.030225895, -0.036803078, -0.11791628, 0.0060759485, 0.11107738, 0.17675094, 0.05796297, -0.101018086, -0.077521205, -0.04977659, -0.07975077, 0.07205569, -0.030247973, -0.022171889, -0.043987773, -0.036018528, 0.023660224, 0.05877224, -0.035079356, -0.09634801, 0.19527607, -0.018849961, 0.059311572, -0.054261282, -0.09478364, -0.04682214, -0.08458355, -0.10024626, 0.060854547, 0.016778009, -0.054636683, -0.013912501, -0.07455662, -0.059076566, -0.017198332, 0.04663773, 0.015556067, -0.06951958, 0.04546275, 0.0156961, 0.052003395, -0.07734713, 0.09535956, 0.017627515, -0.03140279, -0.0057593435, -0.04113775, -0.079012126, 0.05735175, -0.08877971, 0.10487697, -0.068376556, 0.13612022, -0.09258544, 0.030024368, -0.01818683, -0.059110224, -0.09838594},
   {0.065439366, 0.02549848, -0.14197904, -0.023573061, 0.00070832367, 0.13411562, -0.08755494, -0.05771118, -0.0063303295, -0.048270993, -0.056831785, 0.06650856, 0.0071653672, 0.031278335, -0.023522919, 0.029971225, 0.11025652, -0.009607583, 0.015934108, 0.035731126, -0.03669549, -0.050635014, 0.065032475, -0.036744244, -0.16355802, 0.13401614, 0.14578553, 0.06592477, -0.040775985, -0.12897521, 0.064213395, -0.056324676, 0.15349752, 0.045567617, -0.0043353876, 0.0029613639, 0.05500423, -0.006092598, -0.052408732, -0.028299749, 0.029645296, 0.009857497, 0.12698534, 0.023011606, -0.05744067, -0.08763281, 0.0038361475, -0.032412957, 0.017789535, -0.072032444, 0.008509643, -0.043358997, -0.089488484, 0.07619934, -0.058375236, 0.006208624, -0.09886575, 0.07076446, -0.0074687973, -0.03178861, 0.00018706173, 0.06126664, 0.123512715, -0.050428446, 0.075869374, -0.13157041, -0.0022969274, -0.09253305, -0.078583755, 0.038170137, 0.03852243, -0.033626094, 0.071249045, 0.0043603573, 0.012567764, 0.016103894, 0.019012233, -0.03150193, 0.045518935, -0.10047247},
   {0.02496683, 0.088836975, -0.115441725, 0.006308322, -0.078020036, 0.042305794, 0.005948415, -0.04946662, -0.048251934, -0.033702265, 0.047085166, 0.04955833, -0.027572893, -0.03387467, -0.087701745, 0.10847138, 0.059575528, -0.08579763, -0.04811827, -0.013761132, -0.016429728, 0.04134277, 0.08838045, -0.022395799, -0.13737026, 0.10101961, 0.048090465, 0.014874975, -0.048534773, -0.0035866746, 0.04021268, 0.082885705, 0.11011881, 0.0866911, 0.08695554, -0.15756205, -0.08975473, -0.081442066, -0.068016484, -0.109004386, -0.007084722, 0.010317549, 0.10062434, -0.08896319, 0.048224308, -0.0359826, 0.050758667, -0.051764555, -0.048126265, 0.08258622, 0.013001792, -0.09286709, 0.046226215, 0.023695687, -0.081624314, -0.061578143, -0.09644781, 0.023411104, -0.057485577, 0.057511263, 0.03454519, -0.05699217, 0.049209736, -0.088278495, -0.06672363, -0.030416584, 0.040095575, 0.0835893, 0.061585747, -0.039747037, -0.042776033, 0.01124879, -0.06268773, 0.046400353, 0.026373684, 0.058011077, -0.068295516, 0.062317375, 0.08072594, -0.034500886},
   {-0.0047785575, 0.0181921, -0.11718857, -0.037804797, 0.026530972, 0.020663438, 0.08150328, 0.0714436, 0.06182576, 0.10884711, 0.1011259, 0.073524155, -0.050705504, 0.00047705323, -0.08153374, 0.066525325, 0.06982159, -0.055491675, 0.07168051, 0.07670908, 0.019392176, -0.04346642, 0.026434734, 0.025657672, -0.12264637, 0.042227834, 0.083373085, -0.019132026, -0.039731376, -0.056274615, 0.053155735, -0.027457068, 0.15173247, -0.04645398, -0.059221063, 0.026948702, -0.09983894, -0.2043658, -0.061738305, -0.067268, -0.056204136, 0.07747133, -0.01706527, 0.04354078, 0.012520895, 0.036897697, 0.07576697, 0.056736764, 0.060277805, 0.084152885, 0.023343697, -0.08549551, -0.053201884, 0.031966012, 0.036642734, -0.054000426, -0.012136014, -0.05428858, -0.02058366, 0.018551955, 0.022150971, -0.07494242, 0.013565882, -0.12112332, -0.010504022, -0.023162669, -0.03938184, -0.08214964, -0.061660144, 0.0109290285, 0.03679498, -0.094474345, 0.06607065, 0.07840318, 0.15723029, -0.031731665, -0.038895063, -0.0104063535, -0.04746127, -0.16827059},
   {-0.090367675, 0.008328411, -0.087668136, 0.037666224, 0.016280232, 0.062327083, 0.07940052, -0.08892775, -0.08898142, 0.023661816, 0.0444694, -0.07556905, -0.13157585, 0.0065162852, 0.025751114, -0.010932912, -0.03944995, -0.031572722, 0.042619772, -0.057769198, 0.10384487, -0.010559209, 0.07951499, 0.017354533, -0.031902123, -0.03913198, 0.017893855, 0.011765285, 0.007192816, -0.15647174, 0.010632117, 0.06321064, 0.025895804, -0.0578711, 0.00036204854, -0.11156734, 0.009737879, -0.10874329, -0.0569747, -0.02860853, 0.07809256, 0.052669317, -0.033404004, 0.077971786, -0.041935172, -0.0051650703, 0.07671387, 0.07666731, 0.011881817, 0.027152414, 0.05372063, 0.06262397, -0.024517862, 0.11034788, 0.02356366, -0.017201452, 0.06299423, 0.05523559, -0.078213915, 0.0030909562, -0.044253487, -0.069239825, 0.11913897, -0.15109594, -0.06300233, -0.06688125, 0.059691858, 0.0854874, -0.067309454, 0.013167788, -0.00044842187, -0.07676289, 0.09793012, -0.09353831, 0.04799213, 0.040897064, 0.011359568, -0.039606515, -0.06049528, -0.059026975},
   {0.05558817, 0.045883205, -0.119946584, 0.11600388, -0.12297984, 0.07279135, 0.016681053, 0.07666685, 0.071196266, 0.03563811, 0.03504621, 0.0024337843, -0.1307822, 0.057547234, -0.043410107, -0.09806825, -0.03064776, 0.015513517, 0.06542228, 0.012108745, 0.09304544, -0.032093782, 0.07577584, -0.0749208, -0.055743556, -0.03314937, 0.073470846, 0.04619215, -0.026908653, -0.14801186, -0.063580826, -0.012538491, 0.037189946, 0.06397236, 0.07294067, -0.06294079, -0.09770846, 0.00920259, 0.022977674, -0.08024064, -0.08088628, -0.0052885897, -0.014745867, -0.021395197, 0.0045579434, -0.07111008, -0.093407504, -0.044480834, -0.027694393, 0.03832552, -0.075377725, -0.0038693151, -0.0289657, 0.055302937, -0.057786573, -0.025068063, -0.0569503, -0.0939551, 0.018756531, -0.031453215, 0.05034996, 0.036729455, 0.03338545, -0.09504188, -0.076627105, 0.0842149, -0.004864524, -0.05278541, -0.016525656, -0.07904643, 0.099973455, -0.07068499, 0.00806185, 0.0656153, 0.06310547, -0.05966645, 0.054464955, 0.053701624, 0.021144824, -0.14372936},
   {0.011855561, 0.020910822, -0.23466225, 0.13183844, -0.1409991, 0.0590988, -0.006143398, 0.049545545, 0.033005532, 0.049303666, 0.1117614, -0.097440146, -0.18970309, -0.00825876, 0.01157003, -0.0069007846, -0.033033237, -0.0395185, 0.029793454, -0.06391106, 0.07748257, 0.07735701, -0.0046581253, 0.039979737, -0.021778233, -0.03750151, -0.15214276, 0.15954912, 0.07366493, -0.014239136, -0.03575405, -0.029241558, 0.052943304, -0.050517123, -0.0062692766, -0.0073449938, 0.08680547, -0.07066511, 0.016959548, -0.13870198, 0.06943386, 0.09877978, -0.028456237, -0.07385356, 0.08634984, -0.006626077, 0.08190983, -0.002228914, -0.06378135, 0.0539227, -0.09295113, 0.022128394, 0.015082851, 0.07314895, -0.029921921, 0.02162293, -0.06004053, -0.04288692, 0.047420166, -0.050419383, -0.07258798, 0.08894306, 0.04754024, -0.0962268, 0.028187126, 0.21126503, -0.056596007, 0.08802143, 0.07708541, 0.011352952, 0.035918027, 0.020531164, 0.08023027, 0.06658334, 0.042727783, -0.040367197, 0.07220473, 0.09478071, -0.09097298, -0.03401527},
   {-0.090044394, -0.043954603, -0.13428003, 0.03915019, -0.07004252, 0.0102262525, 0.21756251, -0.037036624, -0.06080424, 0.08188494, 0.22353524, -0.011977658, -0.23016948, -0.06593828, -0.100472406, -0.105553575, -0.050420173, 0.08845838, 0.06767689, 0.058446947, -0.07293625, -0.04008559, -0.0282413, 0.071011305, 0.06797957, -0.059970513, -0.14793631, 0.12053801, -0.088783294, 0.058119893, -0.033296164, 0.038389962, 0.107856914, -0.098201, -0.06919022, -0.1542102, 0.070006624, 0.00048134493, -0.029547397, -0.15436669, 0.16305017, 0.20740432, -0.10908724, -0.09505886, 0.15868858, 0.0846472, 0.026846923, 0.050759554, 0.049028296, -0.063633665, 0.011360332, 0.029295053, -0.016693085, 0.029889513, -0.025029542, 0.04845985, 0.08901087, 0.058492623, -0.05170735, -0.09495717, 0.004205629, 0.13468698, 0.09190855, -0.22680098, 0.03027255, 0.159793, 0.004714608, 0.059400372, 0.049849726, -0.064647876, 0.091297135, 0.003357205, 0.15659368, -0.09460647, 0.08795477, -0.046335652, -0.0455786, 0.25504342, -0.04091596, -0.071813636},
   {-0.0808408, 0.015929285, -0.21724257, 0.21137628, 0.059806462, 0.10029855, 0.1757642, -0.02895192, -0.0074952636, 0.083385065, 0.21007667, 0.031313922, -0.2570715, 0.024692267, 0.024861833, -0.18489945, -0.11376419, -0.051578224, 0.14439712, -0.023312736, -0.034002624, -0.021895524, 0.07751005, -0.07992742, 0.099840514, -0.134756, -0.18536548, 0.06613359, -0.034035712, 0.040963974, -0.045977287, 0.06801272, 0.12208253, 0.005518074, 0.07082384, -0.02593671, -0.039501462, 0.11948438, -0.07335977, -0.05925392, 0.20015578, 0.27669486, -0.16682093, 0.07272129, 0.14084996, 0.04129196, 0.051249333, -0.08077892, -0.010302326, 0.06430566, 0.07229387, 0.0131457215, 0.056709, 0.09906208, -0.029619195, -0.06678827, 0.004818047, -0.016589664, -0.050141275, 0.066109546, 0.018076703, 0.090319276, 0.116111346, -0.09423393, -0.054587387, 0.16597927, 0.011258396, -0.09439401, -0.022961773, 0.008298764, 0.09992259, -0.049580347, 0.17714179, -0.071757294, 0.023154967, 0.086776085, -0.0032506082, 0.1433041, -0.064762466, -0.104595646},
   {-0.018303718, -0.061224032, -0.2404197, 0.26248214, 0.09687383, 0.101369604, 0.30807108, 0.0842731, 0.0845704, 0.027597593, 0.25725168, 0.020107789, -0.3121384, -0.043000568, 0.059044223, -0.21514042, -0.20899257, 0.05200582, 0.14963034, -0.030284904, -0.0077562793, -0.010266976, -0.081521794, -0.08355917, -0.012377578, -0.24092418, -0.3475392, -0.037269562, 0.019561667, -0.00483015, 0.0022307592, -0.090671495, 0.120272756, 0.019492753, -0.08320879, -0.1652497, -0.015043521, -0.006213974, -0.06313694, -0.1414006, 0.19317, 0.25728813, -0.04519516, 0.065611124, 0.036567017, 0.011675037, 0.036559187, -0.09532642, 0.05782894, -0.057935093, -0.02277197, 0.052346524, 0.02280517, 0.07117099, -0.09815494, 0.0039537866, 0.07660453, -0.016295012, -0.0042157993, 0.017207472, -0.093245454, -0.09396739, 0.075156644, -0.310514, -0.08125962, 0.2535011, 0.042267043, 0.04532757, 0.016247705, 0.11815543, 0.06408038, -0.08710319, 0.07050608, -0.07698777, -0.0010663638, 0.07037813, -0.07816849, 0.16563606, -0.059287097, 0.011612153},
   {0.008084207, 0.014646974, -0.15639228, 0.19726267, -0.021058027, -0.026516216, 0.34925652, 0.054540966, -0.04706564, 0.13378118, 0.28410915, 0.06109966, -0.23720302, 0.0022764578, -0.03329188, -0.22331828, -0.048182074, -0.0896745, 0.03632813, 0.08393351, -0.012031494, -0.19454277, -0.050986435, 0.06945937, -0.007178576, -0.30327457, -0.23184533, 0.064049795, -0.12122491, -0.01481724, 0.06391994, 0.004488095, 0.12708619, 0.054106522, 0.08015218, 0.024506655, -0.10051635, 0.0155023085, -0.068981975, -0.08453174, 0.16907682, 0.17591187, -0.05843783, -0.040314104, 0.15061992, 0.059200205, -0.029799215, -0.08705195, -0.008306608, -0.05451991, -0.00072649866, -0.094594024, 0.018598102, 0.11957483, 0.08967739, 0.032141678, 0.06870491, -0.05874932, -0.06920371, -0.0512571, -0.06990572, -0.034887116, -0.00482773, -0.19971497, 0.018559456, 0.17981578, 0.0065690633, 0.072139345, 0.07190781, 0.07897182, -0.031200206, -0.007971434, 0.18759945, -0.08612278, -0.1541292, -0.09477057, 0.026020164, 0.10834592, 0.0544009, -0.0795304},
   {0.08133849, -0.06658673, 0.032310985, 0.1709035, 0.10010715, -0.039484933, 0.20355695, -0.03032593, -0.060241487, 0.14925022, 0.11749176, -0.051518343, -0.11545773, -0.028244838, -0.022801278, -0.12675276, -0.0153730195, -0.004876584, 0.037380457, 0.07568732, -0.0008154363, -0.2193891, -0.028221145, -0.04397354, 0.12643461, -0.09581737, -0.08182711, 0.0004956323, 0.0016152477, 0.054409105, 0.04431999, 0.079719916, 0.050484214, 0.08205431, 0.053918406, -0.010494419, -0.07742734, -0.0015250312, 0.08736637, -0.20232974, 0.25454196, 0.17486572, -0.12981082, 0.07303788, 0.0031476542, 0.09475263, 0.07838278, -0.08356835, -0.026900232, -0.052939687, 0.003985636, 0.065406114, -0.068556964, 0.048217334, -0.061260957, 0.05152648, -0.038153045, -0.009003542, -0.08565343, -0.049913798, -0.018384635, 0.21395263, -0.04310256, -0.15954253, 0.034739576, 0.07116764, 0.07058704, 0.037204776, 0.011387646, 0.13117763, -0.030034875, 0.018379144, 0.19270943, -0.018501319, -0.20246625, 0.032607473, 0.01408198, 0.12790063, -0.012699034, 0.0087489495},
   {0.070202, 0.115699485, 0.031293117, 0.12681553, 0.087816514, -0.02122891, 0.22445957, 0.05197419, 0.012021262, 0.026934177, 0.15034313, -0.045446623, 0.0031625887, -0.01736603, 0.048933767, -0.22742659, -0.09562018, 0.07106841, 0.10185363, 0.09258384, 0.10928859, -0.117502816, -0.093053006, -0.0247092, -0.17659506, -0.16482735, -0.0975479, 0.018861627, 0.030551927, 0.0044679637, 0.0077881706, -0.002559861, -0.0011873855, 0.043855846, 0.07981928, 0.17296368, -0.094604686, -0.011595114, 0.09615808, -0.27321008, 0.012934516, 0.15155318, -0.042384904, 0.06915818, 0.029495988, 0.06666877, 0.014548555, -0.00676744, -0.07354886, 0.035150055, 0.033123426, -0.08794655, -0.023787664, 0.0066337446, 0.08485316, 0.003536756, -0.067243524, 0.081514694, 0.060997985, -0.059560783, 0.055682562, -0.18898287, 0.07049159, -0.26633072, -0.067780755, 0.15838699, 0.061171282, 0.014777999, -0.02934818, 0.25920814, -0.08769131, 0.017453976, 0.11735029, 0.04984176, -0.22426523, 0.006052479, -0.09223054, 0.09203417, -0.026356071, -0.12970999},
   {-0.09456541, 0.03748904, -0.047798675, 0.23899703, -0.053988915, -0.088874616, 0.21011885, -0.0481371, 0.09103353, -0.139189, 0.30668604, -0.07502111, -0.08864238, 0.05258777, 0.093221605, -0.18151885, -0.23117538, -0.052221548, 0.1684664, 0.054581847, 0.06666282, -0.14887804, 0.06887939, 0.032096073, 0.02479608, -0.18364167, -0.19417399, 0.039772954, 0.024270436, 0.024713246, -0.086564586, 0.020296926, 0.09412563, -0.09744994, -0.007236055, 0.0033486804, -0.0731825, -0.08806238, 0.09095867, -0.15272006, 0.09359589, 0.22924003, -0.13011713, -0.030929219, 0.06380182, -0.018149532, 0.060249753, -0.007027322, 0.012469621, 0.0036956281, -0.08567706, -0.046456277, -0.09541918, 0.029993208, 0.012999473, 0.072580606, -0.0066007567, -0.02134334, -0.084947154, 0.06011667, -0.048305772, -0.46235168, 0.10971559, -0.24807496, -0.026307233, 0.2929041, -0.08441088, -0.063236706, -0.04470824, 0.14645867, -0.19608162, 0.036634717, 0.11186419, 0.03668337, -0.09545006, 0.07701603, -0.028519763, 0.06059697, -0.0056034788, -0.12910083},
   {-0.05018747, 0.087913774, -0.21291001, 0.15779212, -0.14471547, 0.22710922, 0.23367982, 0.020961896, 0.031197261, 0.010542638, 0.13388687, 0.0701417, -0.12039822, 0.03434684, -0.21571673, -0.11025875, -0.06329586, 0.041476376, 0.12268459, -0.090003505, 0.04670101, -0.018679786, -0.09081301, 0.04100316, -0.12480348, -0.042950083, -0.01010217, -0.0015067407, -0.011205628, -0.003429666, 0.06174204, -0.02559506, 0.077353254, -0.055366363, -0.0011996158, -0.12804182, 0.08030102, -0.13445285, -0.024312032, -0.06783143, 0.031723462, 0.06917659, 0.02249173, -0.07171895, 0.106164, -0.013666891, -0.088813744, 0.024059229, 0.0039348514, -0.09762035, 0.02067145, 0.083896965, 0.054074846, 0.13998994, -0.016773429, 0.06761477, -0.07238456, -0.001710916, -0.075801216, -0.0023854065, -0.00807853, -0.56132156, 0.023143083, -0.17738338, 0.010157369, 0.12584575, -0.029209785, 0.029637316, 0.09531922, 0.04777099, 0.012986596, 0.08247209, 0.03885101, -0.019047879, 0.12768921, -0.05633672, -0.07856581, 0.18722144, 0.050753906, -0.13607511},
   {0.015581042, -0.0797223, -0.26762366, 0.110222325, -0.122214064, 0.22262688, 0.25633624, 0.036973648, -0.047109798, 0.07287836, 0.015566574, -0.02332028, -0.26426354, 0.010456644, -0.09754975, -0.06143697, -0.05051659, -0.07881432, 0.0611184, 0.041276168, 0.008992062, 0.024040287, 0.06682699, -0.0017381955, -0.086567804, -0.06352106, -0.1373857, 0.16549234, -0.100374095, 0.028253792, 0.07753715, -0.06224234, 0.26353857, 0.057416067, 0.013561825, -0.11043982, 0.0023978816, -0.18037412, 0.008758111, -0.056115456, 0.06863099, 0.051367752, 0.058084972, -0.084277034, -0.54874194, -0.09527155, -0.015352309, 0.031716343, 0.029539863, 0.07842306, 0.092457496, -0.0023581018, -0.0044425773, 0.02549368, 0.08707479, -0.04173541, 0.08569908, -0.025693096, -0.023925364, -0.08126226, -0.04347012, 0.18314345, 0.17513385, -0.120273255, 0.051032238, 0.120029576, -0.037923362, -0.06453199, 0.022565864, -0.1671216, 0.091509365, 0.08555024, -0.056216057, 0.04798326, 0.12789713, 0.06534027, 0.088693455, 0.12079628, -0.057196867, -0.021311732},
   {0.07203547, 0.21222405, -0.10711185, 0.20368393, -0.05883262, -0.05450341, 0.054438386, -0.09848368, -0.027383167, -0.00711576, 0.22852923, -0.03399902, -0.069952466, 0.00037558377, 0.013958162, -0.21168257, -0.019910432, 0.08626773, 0.04033146, 0.044917583, 0.017290074, -0.06371923, 0.084049456, -0.09026843, -0.108613774, -0.110969454, -0.05701142, 0.014486634, -0.010277966, 0.04162331, -0.071266346, -0.008518026, 0.06380297, 0.025072664, -0.0090536345, 0.079615906, 0.052054934, -0.0030982578, 0.04055939, -0.2592011, -0.014014696, 0.16937877, -0.061925173, -0.014892366, -0.45752198, -0.030677281, 0.022539668, 0.019680912, 0.052087948, 0.020913094, -0.044926703, -0.0897382, 0.011101056, -0.00648614, 0.064668044, -0.06447059, 0.022329696, 0.03282526, 0.014075741, 0.0062847747, -0.09265706, 0.08960894, 0.14793976, -0.072323404, -0.054551613, 0.16219683, 0.00686956, 0.027366046, 0.007693097, 0.14335568, -0.053090833, -0.086689614, -0.22532547, 0.016343748, 0.0765269, -0.024476431, 0.014124846, 0.053859025, -0.0423319, -0.0823895},
   {-0.051979404, 0.21148951, 0.05915669, 0.12171122, 0.14404938, -0.13708402, 0.1681456, 0.02279468, 0.0790015, -0.087267905, 0.17768031, 0.05558283, -0.006218383, -0.07896623, 0.034148496, -0.24655546, -0.0840652, -0.07219374, 0.20404622, 0.014678856, 0.117565975, -0.102403596, 0.05557113, -0.027233955, -0.12139361, -0.17143577, 0.036070168, -0.1307758, -0.01212368, -0.072894916, -0.09188804, 0.089130566, 0.10449896, -0.101025365, 0.0046797087, 0.11360158, -0.046179276, -0.07616493, -0.10161188, -0.12988967, -0.06210498, 0.23740798, 0.0037246228, 0.02734861, -0.40132, -0.028583892, 0.09026616, -0.040957093, -0.0142734, -0.09546862, -0.038088642, -0.04374957, 0.022544472, 0.12295424, -0.030036455, 0.045325942, 0.06140446, -0.10067175, -0.08064266, -0.07016775, -0.026374452, 0.0137987565, 0.13057093, -0.13191582, 0.01682353, 0.23408133, -0.06362381, 0.046506047, 0.06905582, 0.1184319, -0.1524258, -0.053643968, -0.28931135, -0.003986328, 0.016572585, 0.035443, -0.00299135, 0.05882479, -0.03708944, -0.120176695},
   {-0.089675896, 0.045901593, -0.065395646, 0.05183297, 0.16419332, 0.12142072, 0.19556408, 0.020414948, -0.097612455, 0.13660824, 0.050675135, 0.013259552, -0.019877456, 0.05087883, -0.0848715, -0.05921106, 0.038812906, -0.070959195, 0.041363098, 0.03715877, -0.026448809, -0.038196355, -0.056123093, -0.02589802, -0.057157382, -0.12462679, -0.12755938, -0.070063524, -0.090946615, 0.1625922, 0.041777797, 0.028264362, -0.011797988, -0.0043236623, 0.060726475, 0.08352846, 0.06270704, 0.046455286, -0.0022209021, -0.06987808, 0.08997782, 0.16652898, -0.090953015, -0.015302157, -0.2489614, -0.010648809, 0.01033096, 0.059714068, 0.0645939, -0.019372037, 0.09483006, 0.045683227, 0.05547301, 0.013448878, 0.05227535, -0.055723615, 0.03301158, -0.059644636, -0.08967918, 0.08913623, 0.070735194, 0.13591683, 0.023377826, -0.16544989, -0.038551923, 0.016709184, -0.09359835, 0.07622355, -0.06538138, 0.004679289, -0.04686023, 0.078231156, -0.21588439, -0.06546443, 0.02380578, 0.017152995, -0.046191234, 0.045242548, 0.022780715, 0.06970546},
   {-0.045175474, -0.0059454506, -0.068269975, 0.08865413, 0.10254052, -0.05960812, 0.2672025, -0.085996464, -0.048926376, 0.06936494, 0.12421873, -0.09520008, -0.13918337, 0.07081633, -0.018340256, -0.20225024, -0.13512427, -0.08067315, 0.16538237, -0.072364464, -0.030174686, -0.12687346, 0.014029413, -0.013349296, -0.028299984, -0.11189673, -0.18778013, 0.075097136, 0.020039069, 0.05202962, 0.0800116, -0.062987395, 0.04377189, -0.0007799723, 0.036713917, -0.017630897, -0.07440242, -4.573996e-05, 0.06736247, -0.19228342, 0.07477197, 0.1378197, 0.05358152, 0.08781807, -0.29613957, -0.064766034, -0.08911103, -0.045529608, 0.0234387, 0.02713579, -0.08392875, -0.10018906, -0.08241503, 0.0013523743, -0.049347717, -0.018254163, -0.02618389, 0.08100253, 0.08754834, -0.08691517, -0.015559122, 0.12887782, 0.04237783, -0.13371295, 0.045948483, 0.29388884, -0.08604883, -0.022819795, -0.009863593, 0.05921038, 0.01685987, 0.08129232, -0.14547947, 0.07053058, 0.03021783, -0.06744239, 0.086504065, 0.0892523, -0.092001826, -0.0081042545},
   {-0.0012099302, 0.042831074, -0.1515512, 0.21682495, -0.08107655, 0.11232839, 0.27307886, -0.027643977, 0.011739635, 0.05211234, 0.25785506, 0.07195886, -0.13274683, -0.07783799, -0.10006842, -0.20294471, -0.19166112, -0.019675754, 0.0131465895, -0.026701057, -0.046658564, -0.09464688, -0.055680517, -0.0063946163, -0.06769854, -0.20218386, -0.13243322, 0.14878623, 0.04378167, -0.02651673, 0.08913743, -0.05732466, 0.01355673, -0.030940456, -0.06938744, -0.20131113, -0.050010137, -0.025282845, -0.025030788, -0.11514316, 0.18143013, 0.2006283, 0.015035557, 0.06016633, -0.3218516, -0.08875834, -0.02589544, 0.058487453, -0.052272454, 0.018512432, 0.060886063, -0.08539692, 0.010964163, -0.019001126, 0.08019146, -0.078439, -0.09800052, -0.08630517, -0.08505241, 0.0013827723, -0.04716515, 0.06583821, 0.0601145, -0.21152249, -0.0753733, 0.22678886, -0.08030882, 0.005540919, -0.0628471, 0.012851568, 0.07150655, -0.005243106, 0.051768485, 0.03277296, 0.0054219626, 0.0417896, 0.023033671, 0.15852574, -0.07474307, -0.031729575},
   {0.014828978, -0.02774547, -0.15366563, 0.07475166, 0.0070054485, 0.091070324, 0.30879825, -0.019939974, 0.085175246, -0.036500234, 0.08782371, -0.09787317, -0.15620376, -0.055823527, -0.090277135, -0.01233076, -0.09608198, -0.076738976, 0.052865326, 0.05675492, 0.033822466, -0.11714219, -0.06302014, -0.042644694, 0.018299771, -0.18823925, -0.19528231, 0.09215727, -0.0045351265, -0.042250127, 0.016590679, 0.036116302, 0.07828559, -0.060459375, -0.017812267, -0.18621679, -0.080948375, 0.07020943, -0.043558985, -0.0011543261, 0.2951454, 0.15821628, -0.052402683, -0.09254287, -0.2366117, 0.062378787, -0.0026458874, 0.00059897307, -0.04290413, 0.0038656797, 0.09066074, -0.06399976, 0.023362992, -0.024671583, 0.07650016, 0.024927935, -0.07284433, -0.056081038, -0.058975838, -0.08074078, -0.0773153, 0.01214515, 0.079901524, -0.14921196, -0.047040038, 0.10283106, -0.065156884, -0.09461491, -0.02211693, -0.059167072, 0.032391176, -0.029330878, -0.058785897, -0.07546579, -0.00081041566, 0.078204475, 0.06672811, 0.28028116, 0.054731794, 0.12025833},
   {-0.02519182, -0.048129972, -0.15174305, 0.152995, 0.03156014, 0.18490686, 0.21389177, -0.063590005, 0.047614727, 0.11941324, 0.11622484, 0.01710049, -0.26212263, -0.055968568, -0.1766384, -0.10111148, -0.03102751, 0.031764053, -0.03046599, -0.034644462, 0.019961508, -0.17232518, 0.0677608, -0.054938696, 0.009401892, -0.08239859, -0.20969974, 0.08919912, -0.10796417, 0.05552832, -0.03898208, -0.08181875, 0.12031536, -0.0489633, -0.031626116, -0.051912013, -0.084342286, 0.026129039, -0.08276838, -0.113631964, 0.0917223, 0.1590352, -0.1340639, 0.003734746, -0.04765303, -0.039444692, 0.03604973, -0.0015428159, 0.07263879, -0.06032683, -0.07421391, -0.07028977, -0.052242834, 0.1237863, -0.051445823, -0.083716124, -0.02256581, 0.056068473, -0.043444123, -0.07433629, 0.042144455, 0.0753156, 0.011074712, -0.002457519, 0.06568297, 0.10812006, -0.09015001, -0.029303528, -0.025870927, -0.07111696, 0.13864441, -0.028152293, 0.049811017, 0.06809525, 0.011281797, -0.015771747, -0.046830162, 0.102254, -0.02651449, 0.03883587},
   {-0.09088965, 0.042844057, -0.13353467, -0.0029840171, 0.049765777, 0.076100126, 0.03414331, -0.013949152, 0.015966006, -0.06623207, 0.035719123, -0.053139284, -0.06632429, 0.042693116, 0.016798, -0.010632182, -0.00022096466, -0.0263317, -0.008824327, 0.027799714, 0.047707807, 0.027468024, -0.023759365, 0.086764835, 0.07334548, -0.008124118, 0.05020598, 0.092168055, 0.070484474, -0.09928929, 0.07991099, 0.0044982233, -0.07868548, 0.05712427, 0.03189495, -0.040905148, 0.056015257, -0.0019419604, -0.064407736, 0.04443655, 0.039838336, 0.043715984, 0.089643404, -0.08709437, 0.026457712, 0.047127284, 0.048911445, 0.0627894, -0.08497638, -0.08013828, 0.026713647, 0.049761254, -0.009866426, 0.036861558, -0.018561265, 0.061855875, -0.005967442, 0.019865483, -0.06731324, -0.064458996, -0.09071626, 0.1160891, 0.008624214, 0.027794622, 0.07612219, 0.113210864, 0.031455293, 0.038133074, -0.06599212, 0.075799465, -0.05287751, -0.08868955, 0.10054033, -0.04707063, -0.0014246709, 0.0023372024, 0.05172063, 0.06563756, 0.032885186, -0.0040139183},
   {-0.010009512, 0.014800417, -0.09389347, 0.083500594, 0.039838005, 0.004537853, 0.000107300606, -0.00055840967, 0.074260265, 0.057853516, 0.03369899, -0.10139659, -0.012158693, 0.05406306, 0.041954365, 0.0010659812, -0.08424765, 0.014006861, -0.0020425392, 0.07900601, 0.015445667, -0.07276791, -0.086007245, -0.08645007, -0.032756917, 0.086922064, 0.113414116, -0.015259167, 0.016607637, 0.06151188, 0.027625185, 0.07978059, 0.035973202, -0.028657136, -0.030000519, -0.068319984, 0.019597193, -0.038119785, 0.050604038, 0.04094908, -0.14073703, 0.025359102, 0.06392821, -0.026720569, -0.08272022, 0.09472648, 0.021536537, -0.07405897, 0.022758612, -0.07735053, 0.020389095, 0.013457214, 0.003661299, 0.09180451, 0.04227903, -0.10086339, -0.03946934, 0.053841125, 0.004750356, -0.047500074, -0.054684956, 0.093077086, -0.023259206, -0.029637462, 0.0072746202, 0.021412928, 0.07678238, -0.07474548, -0.029362477, -0.0057638763, -0.07694673, 0.037380252, -0.025910275, 0.061164845, 0.09286702, 0.06384512, 0.065505214, -0.056884132, -0.052157335, -0.028650189},
   {0.03338613, 0.055385593, -0.048891116, -0.08746249, 0.05525847, -0.040858198, -0.1475241, 0.08042568, 0.021941962, 0.0649838, -0.006638332, 0.017914793, -0.011900368, -0.0890129, 0.001037333, 0.07667898, 0.039734814, -0.010333583, -0.027182352, -0.018204276, 0.12035214, -0.102298975, 0.0284345, -0.09221363, -0.06617258, -0.001511904, 0.2214898, -0.050310314, -0.0777246, 0.021771483, -0.02191182, -0.025123453, -0.08473431, 0.0011168297, 0.02309493, 0.03376639, -0.09538307, -0.05933747, 0.07481052, -0.1084598, -0.1523998, 0.024898665, 0.072000295, 0.055388767, -0.050365373, -0.05263635, 0.05723702, -0.099232316, -0.06443183, 0.0073305895, 0.020143755, 0.08203257, 0.052295413, 0.0044000577, 0.010896153, -0.083543845, 0.055287573, 0.079523124, 0.017464593, 0.04819946, -0.06876204, 0.15527369, 0.10240698, 0.008547305, -0.00961303, -0.025006339, -0.038181756, 0.077658094, 0.008424476, 0.05003269, -0.058290668, 0.0042334953, 0.075379334, -0.0077607385, 0.07391371, -0.06626594, 0.05275007, -0.12817097, -0.08582824, -0.095119074},
   {0.028959079, 0.115370944, -0.1631838, 0.09125483, -0.030643867, -0.023256298, -0.060727034, 0.08584142, -0.017364519, -0.033622567, 0.035348184, 0.030621376, 0.0056880135, 0.053822346, -0.034613624, 0.044176172, 0.114487655, 0.043183573, 0.13244641, 0.06927553, 0.117866844, 0.019477045, -0.067388415, 0.045989446, -0.081116185, -0.033551604, 0.14172637, -0.10210378, 0.031265084, -0.0886831, -0.082342446, 0.06934649, 0.050102867, 0.0056080604, 0.010099711, 0.007774241, -0.016660951, -0.20803583, 0.07850958, -0.1363431, -0.09022713, 0.04423724, 0.1089348, -0.010792364, -0.07751214, -0.03651807, 0.09059272, -0.0011520487, 0.017020484, -0.011113251, 0.03782054, -0.053053144, -0.0067027058, -0.026639028, -0.026470723, -0.05980127, -0.035465334, -0.068798184, -0.062120076, 0.07026195, -0.015448369, 0.05858682, 0.037912186, -0.10042874, -0.021675125, 0.043313734, 0.053915605, -0.058094736, -0.07505255, 0.0089812055, -0.06832146, 0.018465167, 0.00933468, 0.069803424, -0.02607708, 0.09289435, -0.059029624, -0.05358559, -0.0519147, -0.10193565},
   {-0.06649077, -0.0069162827, -0.09749995, -0.0107575385, -0.08949348, 0.08058145, 0.001887457, 0.048713114, 0.089834794, 0.09657774, -0.0836313, 0.080135986, -0.10528546, -0.0069518164, -0.112743035, -0.06110024, 0.028544486, 0.015394427, 0.10315242, -0.0148922885, -0.07493334, -0.004905604, -0.06929302, 0.08755526, -0.03266248, 0.124295205, 0.1126776, -0.052824363, -0.04980956, -0.023134654, -0.07663746, -0.068136826, 0.094778314, 0.013259267, 0.023946967, -0.024130879, 0.090070054, -0.045659695, -0.05894895, -0.04618541, -0.13856381, 0.032568786, 0.014286693, 0.00061280513, -0.04874186, -0.08723577, 0.029986598, -0.023517817, -0.04245374, -0.03756505, 0.019583791, 0.087384626, 0.0001519408, 0.1468932, 0.009448562, 0.07377877, -0.0739061, -0.09953816, -0.0704847, -0.003960169, -0.033804532, 0.012041153, 0.14437702, -0.10670859, 0.0286308, 0.03631277, -0.01996725, -0.08679077, 0.0213871, -0.08821531, -0.035772275, -0.052069664, -0.077259615, -0.017227719, 0.17522384, 0.094708495, -0.037466336, 0.044823132, 0.05628246, -0.0006200571},
   {0.07825355, 0.01902479, -0.23947787, 0.0680436, -0.048345502, 0.0044941707, 0.047844484, 0.08420925, 0.0372857, 0.10185588, 0.011372894, -0.10127025, -0.0067159077, 0.08788321, -0.10118015, 0.03220417, -0.0038738982, 0.08701902, 0.045257613, -0.072284155, -0.063194685, -0.036274552, 0.009571828, 0.0776328, -0.018144282, 0.108004645, -0.014727288, 0.024117641, -0.11999842, -0.04009021, -0.09187184, -0.081421055, -0.0049524466, -0.08089098, -0.0108997505, 0.047556855, 0.027630184, -0.04721345, -0.034660485, -0.014242596, -0.07582705, -0.01573017, 0.109502956, 0.043253306, 0.074726515, -0.0016885176, -0.054524682, 0.08398861, -0.040887654, -0.082205154, 0.09545512, 0.08682224, -0.018057935, -0.042550873, 0.04161693, -0.040571477, -0.09824184, 0.049787164, 0.017315045, -0.045013558, -0.07958695, 0.07045399, 0.0020355845, 0.0056303483, 0.09055177, -0.10687463, -0.03855089, -0.017562427, -0.030496098, 0.030862307, 0.10242911, -0.09746332, -0.03547132, 0.028581604, 0.1567235, -0.06144319, -0.028379139, 0.033571016, -0.0005782696, -0.08877845},
   {-0.08754703, -0.054427665, -0.12156543, 0.04907712, -0.06584687, -0.0065238695, -0.07701606, -0.0031867581, -0.028179817, 0.030207556, 0.019014608, -0.09585132, -0.09281763, 0.038727783, -0.025682243, 0.08677353, 0.11527501, -0.005472183, 0.04946058, 0.083001986, -0.06270729, 0.059985664, 0.061933555, -0.07253401, -0.08612114, 0.14646438, -0.0033948019, 0.043793708, 0.06436625, -0.034132954, -0.008521408, -0.030902157, -0.04429408, -0.020783106, -0.06828473, 0.03709233, -0.09241376, -0.08615428, -0.0073814476, 0.039351717, -0.03148853, -0.016603442, 0.051141042, 0.040812064, 0.06274571, 0.08378775, -0.06492411, -0.060562808, -0.04673009, -0.090360776, -0.0045337826, 0.059811097, 0.048352245, 0.021988178, -0.04121318, -0.031009657, -0.08157697, 0.052323658, -0.073457405, -0.099549636, 0.051956274, 0.0402142, 0.03250856, 0.043856934, -0.045394637, -0.013807259, -0.048702467, -0.0644164, 0.032458015, -0.127761, -0.021825995, -0.033200473, 0.10372658, 0.082742766, 0.16433842, 0.07824146, -0.0588445, -0.0713666, -0.017774506, -0.096758656},
   {0.046961002, -0.063801534, 0.011395038, 0.008881772, -0.18379638, 0.074477375, -0.051676862, -0.030357804, -0.09170507, -0.07143076, -0.045113675, 0.007543968, -0.08396229, 0.07019193, -0.040941034, 0.13738513, 0.03878008, -0.052394476, -0.038134098, -0.06769458, -0.10142663, -0.014764561, 0.02673319, -0.030937152, -0.13462533, 0.12341857, 0.042286843, 0.13002206, 0.08868487, -0.16654098, -0.08500011, 0.024818303, -3.185879e-05, 0.07295201, 0.08121775, -0.06696233, -0.040439032, 0.04601841, -0.0520701, -0.07282225, -0.097091965, -0.09449156, 0.00047573604, 0.08817745, -0.021567293, 0.073143445, -0.060473394, -0.02572004, -0.004394066, -0.017132554, 0.074311815, -0.0012887857, -0.069221385, -0.07276211, -0.077501036, -0.09612258, 0.030257775, 0.07749128, -0.068818204, -0.040302582, -0.06875477, -0.016447784, -0.06003828, -0.06895241, 0.06338056, -0.027893657, 0.07511706, -0.08365989, -0.08061564, 0.011676765, -0.02026248, 0.085968494, 0.04550395, -0.04227175, 0.06440871, 0.07644633, 0.025126852, 0.033531383, -0.019934997, -0.1653633},
   {-0.08935745, 0.03910101, -0.06248418, 0.02421885, -0.021981457, -0.036416773, -0.12780777, 0.028953861, -0.01596263, -0.054911565, -0.019138243, 0.085662864, -0.05047653, -0.017414637, -0.031239856, 0.12557189, -0.05393756, 0.017882317, -8.775174e-05, -0.06940644, 0.031583436, 0.012901807, -0.057687666, 0.010932005, 0.019204099, 0.18292125, 0.16124167, 0.07510175, 0.035363335, -0.08281572, -0.0125772385, 0.0756141, -0.08488366, 0.05918279, -0.095111355, -0.089462355, 0.063853845, -0.09980887, -0.0644852, -0.05149978, -0.022731412, -0.11598714, 0.13160561, 0.0747092, -0.05667579, 0.063546486, -0.0926698, -0.07984151, 0.04253645, 0.007577175, -0.0377984, -0.009013881, -0.084743306, -0.14782664, -0.056894533, 0.059399042, -0.09941979, -0.012460191, 0.06370852, -0.0044427016, 0.044466086, 0.105249204, 0.11133456, -0.0052356864, -0.027095363, -0.1251846, 0.0076591168, 0.05309771, -0.078939684, -0.13161233, 0.08273769, -0.030776365, 0.025752885, -0.0824699, 0.058698606, -0.02644381, -0.080799766, -0.08376224, 0.040668733, -0.045613173},
   {-0.06695662, 0.015599241, -0.13411006, -0.021458242, -0.033968076, 0.0069431458, -0.09151344, -0.07408897, -0.02009335, -0.028577724, 0.06828073, -0.0043003643, 0.063462436, 0.09368559, -0.11316641, 0.09239542, 0.05006967, -0.025123768, 0.12473204, 0.045508858, 0.0014979673, 0.031208638, -0.07979951, 0.0025070705, -0.039026268, 0.07060629, 0.1176843, 0.06365188, -0.038879916, -0.13259096, -0.013684522, 0.009601476, 0.09754866, 0.04027236, 0.0618266, -0.06785151, -0.009124707, -0.028145006, 0.021587418, -0.06745891, -0.120063014, 0.037110016, 0.1778396, 0.07261967, 0.015655937, 0.09463122, -0.01880642, 0.006198185, -0.04987659, -0.03965339, 0.09415699, -0.006291995, 0.05210088, 0.040826198, 0.059692543, -0.011805586, 0.031446714, -0.057754304, 0.04523965, 0.019971747, 0.06685624, 0.09559078, 0.08906235, 0.034066554, 0.057583712, -0.07717659, -0.032047436, -0.09616659, -0.04798815, -0.09484376, -0.010820566, -0.06406117, 0.0729732, -0.0028894185, 0.026907474, 0.0091345385, -0.017675024, -0.08510922, -0.063554846, -0.01852995},
   {-0.052993182, 0.030654544, -0.16889557, 0.06601098, -0.116208285, 0.038939636, -0.05772098, 0.015468175, 0.042389385, -0.0019620678, 0.041001897, -0.06439002, -0.010129471, 0.06057764, -0.12909888, 0.058859024, -0.004418626, -0.06711331, 0.12650384, 0.05496607, 0.0626159, 0.014477945, 0.028397307, -0.067537375, -0.048975024, 0.13288388, 0.02720439, 0.087137364, 0.027792547, -0.095286034, 0.017007586, 0.072087616, -0.0072031575, -0.00691365, 0.0030564188, 0.036888726, -0.015736293, -0.1638006, -0.022402959, 0.038799744, -0.099045426, 0.0677061, 0.14312693, -0.036387123, -0.06885152, -0.028297417, -0.07987254, -0.03618272, -0.006610206, -0.06466078, -0.08988145, -0.040632095, -0.008834035, -0.036420636, 0.021009909, -0.07049831, 0.08703957, -0.0013323918, 0.031379573, 0.08402975, 0.075418405, 0.037452567, 0.08999914, 0.0003886504, 0.08249896, 0.022290744, -0.0851201, -0.017863644, 0.0113285035, 0.039164506, 0.06973019, 0.06574469, -0.058349293, -0.07142716, 0.14547145, 0.04165008, -0.0531696, 0.066088356, -0.06866418, -0.062640555},
   {-0.053093445, 0.0010486821, -0.18455936, 0.0024287486, -0.016212026, 0.012458853, -0.0018060073, -0.03644915, -0.07406364, 0.018564882, -0.043960545, 0.032601096, -0.009211778, -0.043003418, 0.02106469, 0.026781494, 0.042850193, -0.049568977, -0.011562155, 0.012285001, -0.035037253, 0.010744343, -0.049420837, 0.004515318, -0.06403041, -0.00190371, 0.11287046, -0.07365546, 0.030752119, -0.091946855, -0.029826963, 0.050587993, 0.035936892, 0.008785762, 0.019534329, 0.082972795, 0.0827718, -0.120639026, -0.067911536, 0.030039273, -0.10372254, -0.050432723, 0.08393338, 0.024839224, 0.01843459, 0.06310863, -0.045052066, 0.074564725, -0.051906094, 0.036532227, 0.004609689, 0.03441315, 0.0061108554, -0.011736814, -0.0059221517, 0.012367538, -0.09337763, -0.058020003, -0.017410077, 0.0409604, 0.022423953, -0.103298426, 0.0014563669, -0.09130228, -0.037393626, 0.042813852, 0.06399291, -0.06269062, 0.020638794, -0.038665995, 0.0328866, -0.030083226, -0.05101635, -0.0714868, 0.11858103, -0.057176773, -0.085177265, -0.015477273, -0.050143845, -0.06315204},
   {-0.05780753, 0.14879142, -0.11169742, -0.066820174, -0.07431857, 0.015443198, 0.058011636, -0.061604965, -0.0024752107, 0.07684083, -0.0733628, 0.076220326, 0.06334595, 0.024795718, -0.07575621, -0.08235031, 0.011369567, -0.08425552, 0.063505724, -0.026801134, 0.03915493, -0.0014788042, 0.087790035, 0.06490975, -0.026243415, 0.099602535, 0.15607886, -0.056788225, 0.029017186, 0.016879767, -0.060384814, 0.019224532, -0.038689304, 0.034384564, -0.09466467, -0.02490708, -0.08570162, -0.0910602, 0.00066784845, 0.026711145, -0.07306151, 0.046477128, 0.07096014, -0.05581187, 0.11088814, 0.07301734, -0.042213526, -0.03415893, -0.059691153, 0.04187832, 0.025501333, -0.09212734, -0.026190078, 0.08685916, 0.010286194, 0.026416652, 0.026226413, 0.060886312, 0.08111773, 0.087849356, -0.035313968, -0.059764862, 0.12458804, -0.08046421, -0.06655525, -0.09842058, -0.045959383, 0.004188239, 0.04591807, 0.10920675, -0.015572186, -0.06378871, 0.06490993, 0.011176285, 0.017756334, 0.08430881, -0.078007, -0.13384013, 0.0013159027, -0.015463724},
   {-0.0775326, 0.09145112, -0.1386192, 0.043468222, 0.07832766, 0.017065298, -0.022327852, -0.088348605, -0.007611221, 0.008434518, 0.028317465, -0.01284235, 0.031139173, 0.026905634, 0.07646183, -0.045492098, 0.0156929, -0.094297945, 0.11995161, -0.09489079, 0.090234585, -0.052919082, -0.09380762, 0.022566153, 0.005580869, 0.06327247, 0.06147084, -0.065009795, 0.014874321, -0.034602802, -0.0041835485, 0.007796134, 0.0016179632, -0.09845692, 0.07749709, 0.11102643, 0.03653505, -0.03600098, -0.08321895, 0.020449743, -0.020632721, -0.097560465, 0.079348296, 0.055738572, 0.0036664465, -0.04064629, 0.060774393, 0.047781363, -0.02400638, -0.013232835, 0.0072065815, -0.08404755, 0.025492659, 0.04835581, 0.071159236, -0.04211693, -0.07413303, 0.058108173, -0.0046765655, 0.023259869, -0.023524463, 0.12240988, 0.080517724, -0.13633753, 0.074659, -0.11138002, -0.040346976, 0.04528158, 0.049147032, 0.11544232, 0.002557002, 0.060860388, 0.079103075, -0.0480512, 0.10323508, -0.06627009, -0.086590074, -0.02122721, 0.063573286, -0.12110162},
   {0.06761595, -0.032947015, 0.032453377, -0.041842055, -0.084190525, -0.060481846, -0.14363028, 0.05695402, -0.046690717, 0.047474436, -0.06101183, 0.037142653, 0.097836904, 0.037302904, -0.052620437, 0.020191174, -0.05867563, -0.013146147, 0.0330876, -0.055170953, -0.043162636, 0.055824682, 0.07181456, -0.044468097, -0.015662793, 0.023716185, 0.1433126, -0.073855184, 0.030867409, 0.011950618, -0.018852524, -0.030377293, -0.022186331, 0.017658629, 0.04289136, -0.008750642, -0.057787884, -0.14111589, 0.035865217, 0.00555772, -0.07442007, 0.08522553, 0.026051043, 0.03440597, 0.15034464, -0.0018429309, 0.028726384, -0.093118206, -0.03285286, -0.06684686, 0.015974179, -0.061037198, 0.05484339, -0.08324612, -0.0979881, -0.08711385, -0.060873657, -0.019423302, 0.004235789, 0.08890153, 0.058230184, 0.12601928, 0.033442244, -0.13056535, -0.015565254, -0.01002945, -0.09246501, 0.05119131, 0.08969859, 0.048831288, -0.13353279, 0.039341755, -0.014803909, -0.014393882, 0.009989113, -0.06314421, -0.04222292, -0.058504123, -0.05782315, -0.0010715232},
   {-0.013775576, -0.025211882, -0.063876286, 0.10182064, -0.08720443, -0.008862332, 0.034916643, -0.09092594, 0.023035014, -0.020206334, 0.10297419, 0.05855837, -0.09102804, -0.018732205, 0.06361458, -0.06747248, 0.05749008, -0.0140804425, -0.036271717, -0.05498318, 0.031771977, -0.09565745, -0.084646955, -0.033597894, -0.07956161, -0.085088566, 0.0664219, -0.024440946, -0.00010875259, 0.032612823, 0.0018368559, 0.044906877, 0.042073764, -0.035295848, -0.01867077, -0.042911228, -0.023445401, -0.101163566, -0.006685902, -0.034459487, 0.022162968, -0.060639516, -0.03694108, -0.044976406, 0.05864301, 0.0032338053, 0.025917418, -0.10016927, -0.08269022, -0.047611397, -0.004743673, -0.03937909, -0.041828077, 0.013388957, 0.034300856, 0.020902092, 0.019346295, -0.005680591, -0.0531915, -0.06821175, 0.037656642, 0.09541662, -0.008192915, -0.0755311, 0.007228039, 0.08267265, -0.009325781, -0.08326701, -0.05646662, 0.0056429217, -0.027701141, -0.01138338, -0.035488497, 0.05289418, 0.06426083, 0.0041598603, -0.019059874, -0.05324439, -0.033912204, -0.11230228},
   {-0.056057755, -0.1232869, -0.17865191, 0.10284848, 0.000647645, 0.11905387, 0.14164484, 0.059121884, 0.07154744, 0.025255535, 0.083403654, 0.082597844, -0.18739444, -0.061566044, -0.096991725, 0.0067916666, -0.057941295, 0.060796328, 0.036128037, 0.0061482345, 0.022766128, -0.09604007, -0.07650291, 0.016203776, -0.024841674, -0.051050853, -0.116591945, 0.021948634, 0.009547529, -0.039426032, -0.008109804, -0.011400949, 0.13500763, -0.07165314, -0.032060344, -0.008344519, -0.07236124, 0.061847728, -0.06079252, -0.015898468, 0.2662704, 0.18438767, -0.030463299, -0.0006270034, 0.051758353, 0.044433273, -0.019823007, 0.036013674, 0.003724542, 0.053795483, -0.09167828, 0.079679824, 0.014021074, 0.08302524, 0.02326814, -0.071537115, -0.06986748, -0.07244727, -0.04072062, -0.100969285, 0.01773306, 0.07200468, -0.036898755, -0.0068204347, -0.058408648, 0.21036181, -0.05237514, -0.072045624, -0.028843604, -0.117192864, 0.10981439, 0.0063891616, 0.09273906, 0.056711588, -0.039333615, -0.025733821, 0.00863927, 0.110368244, 0.06735927, 0.05519749},
   {0.064367875, -0.12326407, -0.16533773, 0.055930354, -0.02019888, 0.09141616, 0.2695475, 0.011124366, 0.014542793, 0.077760234, 0.1399175, 0.02373264, -0.14822051, -0.016343422, -0.044235647, -0.052439604, -0.059619594, 0.015921228, 0.10150432, 0.08734177, -0.0882871, -0.01844138, 0.059926294, 0.03283701, 0.05971055, -0.19473457, -0.20017026, -0.004002806, -0.058649343, 0.0384401, -0.026624188, -0.097919025, 0.019185238, -0.0023572762, 0.03409785, -0.08257902, -0.06552268, 0.07195882, -0.058207534, -0.10759251, 0.3241921, 0.28856447, -0.13279136, -0.019079879, 0.047209144, 0.04997035, 0.03236664, 0.07124529, -0.00060604134, 0.05578676, 0.08980978, -0.0976111, 0.036660854, -0.019222008, -0.026109437, -0.09043315, -0.07897788, -0.048887607, 0.036385797, 0.089151554, 0.014106616, -0.11683494, 0.09852143, -0.15534626, -0.028586999, 0.25179657, -0.052222725, -0.04587304, -0.04829011, -0.08310093, 0.03319038, 0.07175137, 0.07445259, 0.025705164, 0.03149169, -0.094745494, -0.09607707, 0.22280255, 0.059689645, 0.014763163},
   {-0.087376826, 0.039143696, -0.2045205, 0.27114645, -0.06622534, 0.045230128, 0.17967561, 0.05149175, -0.06799447, -0.04702523, 0.26912212, -0.08817595, -0.11436517, 0.0022334754, 0.08605352, -0.14253266, -0.14113298, 0.03420534, 0.0949296, -0.05039506, 0.080590054, -0.046934746, 0.086272724, 0.052796114, -0.0613102, -0.28669274, -0.1943195, 0.02486201, -0.0643863, -0.06851995, 0.027900286, 0.01039857, 0.08096646, -0.0828406, -0.08427089, 0.011901808, -0.053862307, 0.07565962, -0.049322817, -0.19971755, 0.21345459, 0.1757753, -0.11497756, -0.051583257, 0.16797134, -0.0783214, 0.07883983, -0.04236765, 0.020836027, 0.0427264, -0.058114804, 0.0669213, 0.059028815, 0.052509513, -0.021217074, 0.0050287787, -0.054804318, 0.07177101, 0.019033521, 0.019134495, -0.039458238, -0.105723694, 0.09181423, -0.18266621, 0.038903438, 0.33201647, -0.07301209, 0.031558644, -0.013476953, 0.120252095, 0.069751985, 0.07819432, 0.10596173, 0.0075944234, 0.03199437, -0.052617885, 0.020325577, 0.12987055, 0.00049727067, -0.008590595},
   {0.06872005, 0.03320292, -0.1576065, 0.2376831, 0.08653197, -0.07715768, 0.22647458, -0.034961533, 0.028984305, -0.06852049, 0.1909982, -0.024165813, -0.023199473, 0.03372904, 0.06429434, -0.19742726, -0.19151312, 0.07998785, 0.07595162, 0.057499822, 0.08641794, 0.010287981, 0.041414537, -0.046601344, 0.005894074, -0.2686304, -0.10749413, -0.021571733, 0.011850621, -0.08603865, 0.008899786, 0.080566175, 0.08720031, -0.060224555, 0.014694086, -0.07667258, 0.010640419, -0.022266096, 0.06812297, -0.2333253, 0.05209995, 0.2147864, -0.10836307, 0.06682462, 0.11840585, -0.05805609, -0.042383853, -0.061344046, 0.049995188, 0.08764404, -0.006815605, -0.055133883, 0.044907007, 0.110512376, 0.051155407, 0.039263606, 0.058739424, -0.060801525, 0.04049415, -0.010361423, -0.027195051, 0.0034132127, 0.06351465, -0.29036614, -0.048248723, 0.2908979, -0.0064624106, 0.07722133, 0.00072032213, 0.13518818, -0.010983745, -0.09510598, 0.17171636, -0.085588336, -0.15648368, 0.070469804, 0.07790372, 0.108974874, -0.09566029, -0.15828949},
   {0.08405655, 0.11574615, -0.05715617, 0.07975688, 0.12723926, -0.06109022, 0.27796325, 0.0011802384, 0.013068696, 0.056662567, 0.07089395, -0.026002167, -0.10055718, 0.030426584, -0.028679855, -0.030795455, 0.010444706, -0.043183297, 0.04829866, 0.09277427, 0.16276321, -0.10141462, -0.017600171, -0.0154277785, 0.022791423, -0.08447929, -0.101881355, -0.07576724, -0.030276764, 0.13169952, -0.09567972, -0.055562973, 0.10799798, -0.05885224, -0.09876867, 0.07017992, -0.05875169, 0.016369298, -0.058286928, -0.12672688, 0.20573726, 0.24743573, -0.057593685, -0.047555532, 0.06815903, -0.003529422, 0.0109626725, -0.08486022, 0.025547536, 0.05251465, -0.023487046, -0.012091654, -0.0631857, 0.0016564075, 0.04059381, -0.038039893, 0.052143224, 0.06775596, -0.068752535, -0.025353184, -0.03862466, 0.22049892, 0.038558662, -0.17862101, -0.06375385, 0.19642915, -0.037559282, 0.07487326, 0.033352442, 0.11643698, -0.13042706, 0.057325214, 0.17258637, 0.014137073, -0.16496138, -0.052705124, -0.057246625, 0.093125656, 0.0020788284, -0.083250865},
   {-0.08213136, 0.24694736, -0.08623899, 0.14620028, 0.09031584, -0.14759347, 0.10105514, 0.08603244, -0.06538631, -0.08958187, 0.18240426, -0.08494895, -0.015671797, 0.012513906, 0.18493088, -0.1203769, -0.08444882, -0.09472066, 0.047566418, -0.08674862, 0.25143424, -0.1328844, 0.02181615, -0.06659051, -0.17887354, -0.23800537, 0.009310432, -0.013768119, -0.015376033, 0.13495536, -0.05356974, -0.06819753, 0.0021750059, -0.026510954, -0.033907145, 0.10854578, 0.048110846, -0.07513299, 0.061980564, -0.2597365, 0.042533495, 0.29067147, -0.079251006, -0.04350034, 0.17509156, 0.030964993, 0.007948153, 0.007937243, 0.016306104, 0.071812406, 0.08400635, -0.049967796, 0.02642229, 0.025108967, -0.029707802, -0.034505855, -0.050436866, 0.051412463, -0.03268475, -0.09203425, -0.064116485, -0.10570782, 0.008730127, -0.22076347, -0.053817198, 0.10215858, -0.06354101, 0.016704403, -0.087426186, 0.13971637, -0.096865386, 0.07900159, 0.116245724, -0.02616765, -0.07890048, 0.0061282516, -0.016515765, -0.028905792, 0.038018942, -0.009880245},
   {-0.08714113, 0.18344669, -0.036583774, 0.090902835, -0.054593794, 0.04135182, 0.10631017, 0.0046141814, 0.07012409, 0.010723042, 0.12571444, 0.045917407, -0.036396477, 0.004065536, 0.09426848, -0.21261798, -0.10975045, 0.053404994, 0.15730785, 0.040941745, 0.15871842, -0.073916465, 0.06753092, -0.07045051, 0.008820481, -0.14163306, -0.00789981, -0.12792271, -0.0076606264, 0.083253205, 0.026327847, 0.020274326, 0.03475292, -0.042707507, -0.0012885182, 0.097556144, 0.041636206, -0.05267745, 0.04871279, -0.2929896, 0.19032799, 0.20077093, 0.04795132, 0.0866203, 0.1848181, -0.01670102, 0.078760125, 0.0292023, -0.09127747, -0.04223711, -0.081178844, -0.03288274, 0.048145417, -0.012293766, -0.019951966, 0.08142957, -0.035436917, 0.05552582, 0.020500869, -0.057508055, -0.024974965, -0.37215307, 0.16534227, -0.28681615, 0.00478857, 0.22838993, 0.09008838, -0.020957243, -0.007608004, 0.10371756, -0.12751722, 0.013767105, -0.05912328, 0.07668804, -0.11488778, 0.057877965, -0.011937361, 0.15218312, 0.032351486, -0.004046238},
   {-0.023631616, -0.019986158, -0.29035228, 0.05052101, 0.0086397985, 0.18547681, 0.120646305, -0.029091123, 0.0582679, 0.1313133, 0.054855146, 0.08872008, -0.17204528, 0.06261676, -0.1645581, -0.069959275, 0.017700233, 0.003936298, -0.006253252, -0.017439408, -0.11654234, -0.07362572, -0.0060570166, -0.06757789, -0.1250557, -0.2004127, -0.07438257, 0.016069686, -0.07697475, 0.026610896, -0.013424712, 0.005603257, 0.29712796, 0.060287967, 0.038932428, -0.05974794, -0.018175013, -0.18179232, -0.07123463, -0.012673824, 0.15109785, 0.09160069, -0.018851742, 0.037938286, 0.20616753, -0.08736667, 0.09404079, 0.0187008, -0.031039484, -0.09464418, 0.0027626753, 0.055777244, 0.00025251278, 0.0714017, 0.03808482, -0.008909665, 0.026013978, -0.025797442, 0.081836976, 0.049459223, 0.018400647, -0.5725465, 0.19098966, -0.085163474, 0.048062988, 0.15210246, 0.04946, 0.041184366, -0.07678802, -0.05756279, 0.16668426, 0.075897194, 0.03580317, -0.038887497, 0.2439412, 0.081368186, -0.06768475, 0.21142039, -0.0038132186, -0.15805978},
   {-0.04939958, 0.0891765, -0.21217252, 0.030709937, -0.07563918, 0.19134927, -0.04071449, 0.08079215, -0.044358365, 0.04751834, 0.010065217, -0.06306129, -0.17539059, 0.07851074, -0.096478, 0.033408675, 0.050323874, -0.032811254, 0.1311346, -0.052408367, -0.13307483, 0.0848682, -0.039331187, 0.024575299, -0.055308018, -0.029053632, 0.089504294, 0.042135324, 0.032564558, -0.13805176, -0.030833278, 0.0099592805, 0.21295393, -0.07807541, -0.05619381, -0.068051115, -0.031617906, -0.19370705, 0.087453745, -0.07229462, -0.05165457, 0.036379896, -0.004668736, -0.0799459, -0.4630914, -0.019176945, 0.037109815, -0.007390424, 0.07099946, 0.01937821, -0.023070805, 0.048244957, -0.015206766, -0.045825988, -0.059628747, -0.018804073, 0.0110625485, 0.034665037, -0.041098326, -0.030576939, -0.0706003, 0.07802372, 0.1653337, -0.063513264, 0.077119805, 0.016978174, 0.025091313, -0.09907064, 0.029510908, 0.0011943656, 0.1047961, -0.060453493, 0.013264821, 0.0013928794, 0.18001369, 0.012259282, 0.005634662, -0.0034291267, 0.0020777413, -0.12148121},
   {-0.03340215, 0.060858518, -0.027326513, 0.06306582, -0.09475127, 0.06729992, 0.00787591, 0.011549359, 0.054722115, 0.026092831, 0.163172, -0.08267005, -0.095715754, 0.07159103, 0.07295915, -0.1291763, -0.02940226, 0.0016901195, 0.046636242, -0.10250363, 0.07387755, 0.015207487, 0.019191585, -0.08066146, -0.15093176, -0.084291, -0.009898862, 0.02418573, -0.013348218, -0.08652728, 0.010884173, 0.06827363, 0.04556909, 0.08447423, 0.048972666, 0.07331191, 0.026126746, -0.16231827, -0.023258211, -0.21847716, 0.010093242, 0.090621985, 0.14383139, -0.101990774, -0.42699856, 0.04399722, -0.0649282, -0.0034217234, -0.042590585, -0.04364065, 0.029467858, -0.059778407, 0.018428931, 0.14973466, 0.08869244, 0.0034586382, -0.049222015, 0.0540671, -0.038625617, 0.0885307, 0.056026824, 0.08358967, 0.18196945, -0.09192804, 0.020573586, 0.15921517, 0.06373252, 0.0009988227, 0.03935779, 0.13563736, -0.117731065, -0.08762182, -0.24718675, -0.036557678, 0.08452225, 0.035967432, -0.048078988, -0.08201102, 0.07630255, -0.0048679328},
   {-0.049431678, 0.21529803, 0.016241403, 0.24582055, 0.06160874, -0.10365173, 0.1636901, -0.037197202, 0.024620827, 0.046555094, 0.087008655, 0.03634419, 0.033567857, -0.04676505, 0.024818752, -0.20502277, -0.11370641, -0.0028623417, 0.20066087, 0.017341234, 0.065620825, -0.036436703, -0.005200915, -0.06536982, -0.10759205, -0.14221717, 0.009090683, 0.049944967, 0.026763678, -0.055026658, -0.06335918, 0.022588266, 0.060360804, -0.017946502, -0.03474522, -0.014588349, 0.028092893, -0.03414824, -0.071321525, -0.13887607, 0.025805961, 0.12399785, 0.02936349, -0.07700893, -0.50614196, -0.08249802, -0.068334244, -0.015230623, 0.06450519, 0.06755703, 0.012026362, -0.024483351, 0.04061523, 0.1719092, 0.037411973, 0.06183079, 0.037191246, -0.08160017, 0.0014452487, -0.07176282, -0.05574532, -0.0059151673, 0.07418432, -0.09182083, 0.044851087, 0.21369565, 0.018170996, 0.051366128, -0.08718353, 0.079907246, -0.20187487, -0.08129766, -0.29904202, -0.03792426, 0.02586237, -0.06329572, 0.0802788, -0.098320544, -0.05747924, 0.013965478},
   {-0.06874554, -0.03002721, -0.0538673, -0.036666535, 0.13478272, -0.067149945, 0.098777525, -0.031750612, -0.060319383, 0.11722157, 0.08019372, 0.049123373, 0.021874225, -0.07579016, 0.029063875, -0.11961128, 0.047031336, 0.018691748, 0.077056766, -0.06312063, 0.046412267, -0.108497486, 0.08340504, 0.062076323, 0.006526949, -0.088846296, 0.04593206, -0.05085619, -0.09273753, 0.12924981, -0.08450354, -0.031157505, 0.036619484, -0.04817488, 0.0552676, 0.079309925, -0.015188817, 0.02204329, 0.009749711, -0.114959426, -0.0097165825, 0.022731358, -0.006810372, -0.07001256, -0.36329687, -0.004626386, -0.049711008, -0.0007921364, 0.041750472, 0.032611005, -0.020234823, 0.06804344, -0.09404478, 0.04626018, 0.06876099, -0.061773207, 0.037410285, 0.05581743, -0.028511956, -0.014594763, 0.007404454, 0.12757924, -0.08603327, -0.055174377, 0.07502108, 0.058492374, -0.039240815, 0.02808497, -0.030890472, 0.061655298, -0.15382306, -0.0068724635, -0.2735782, 0.045774817, -0.039009273, 0.06891862, -0.03422072, 0.07121669, -0.03227945, 0.015698662},
   {0.008327287, -0.046240184, -0.031685635, 0.09433747, -0.0450437, 0.030327266, 0.084035285, 0.041317806, -0.07226754, -0.08872165, 0.08067771, 0.072508745, -0.025979156, 0.044871382, -0.084459215, -0.024730645, -0.14229146, -0.021225162, 0.07001444, -0.0064604455, 0.114280805, -0.11880988, -0.047041498, 0.036541738, -0.08965312, -0.019718764, -0.03660725, 0.030758347, -0.0030425657, 0.049923945, 0.053241767, -0.04604912, 0.038862776, -0.03749518, -0.017300677, -0.02884035, -0.08519245, 0.0030951002, -0.016703352, -0.008891343, 0.13859928, 0.033048578, -0.08965391, -0.08580047, -0.35318267, -0.021165147, 0.03214451, 0.06696607, 0.005220013, -0.0016899549, -0.04894139, -0.09196907, -0.046757843, -0.042152233, -0.06660455, -0.018980075, -0.05435226, -0.04931879, 0.07146896, 0.01418287, -0.032290645, 0.04021041, 0.07309742, -0.06963405, 0.08327975, 0.06576926, 0.0029074154, 0.04559085, 0.07787127, 0.11458029, -0.08205143, -0.048647165, -0.093602344, 0.06143297, -0.07098845, -0.089186825, -0.062133223, 0.124785736, -0.08213452, 0.032465443},
   {-0.06856637, -0.18294846, -0.11181221, -0.015826758, -0.05518601, 0.12384114, 0.114754766, -0.08468287, 0.035116293, -0.049631428, 0.033088356, 0.07217418, -0.13966137, 0.054625146, -0.17367734, -0.056886684, -0.09426679, 0.060236536, -1.4891091e-05, -0.0027516673, -0.1217142, 0.030596523, 0.08180582, 0.056932695, 0.11319394, -0.18063515, -0.1464789, 0.12485879, -0.021356393, -0.032913607, -0.07483286, -0.07647698, 0.018551981, -0.012252392, -0.022230431, -0.09773249, -0.053568803, 0.01800389, -0.07603972, -0.011124814, 0.11979959, 0.16595167, -0.008973536, -0.021633323, -0.0929939, -0.026523553, 0.062225766, 0.041616548, -0.021828173, -0.0012734389, 0.018421851, 0.0049846936, 0.06686168, 0.04897401, 0.020445907, 0.0147487605, 0.017207678, 0.01790912, -0.06447645, 0.06563473, -0.051651213, 0.05091085, 0.016603235, 0.0059150923, -0.024803862, 0.09098339, -0.0069912844, -0.024872696, 0.035728462, -0.09757797, 0.15243626, -0.07934865, -0.043825466, -0.030420506, -0.051169038, -0.06957866, 0.07082232, 0.2236819, -0.046631593, 0.059641425},
   {-0.072298214, -0.20834579, -0.16045111, 0.1080603, 0.06751808, 0.17593393, 0.23441328, -0.08405123, 0.055170912, 0.028361555, -0.04267302, 0.0059610703, -0.16005577, -0.06174066, -0.07921191, -0.07890618, 0.048079304, 0.011482507, -0.044545688, -0.005182706, -0.15866016, -0.02638384, -0.0829108, -0.0035488077, 0.16364953, -0.03581734, -0.28171274, -0.01920888, -0.18449067, 0.13573687, -0.001962756, 0.06375931, 0.13670605, 0.052697957, -0.01443563, -0.16030973, -0.054330386, 0.12973142, 0.0061071916, 0.068548575, 0.18866263, 0.04146644, -0.18336776, 0.049432803, 0.014341824, -0.093170136, 0.008201249, -0.062938936, -0.056827255, -0.008142209, -0.09106572, -0.04487103, -0.05022698, -0.0040022247, 0.04525256, -0.10050711, -0.035424173, -0.08562766, -0.02954986, -0.09229633, -0.067056015, 0.04322596, -0.03819867, 0.059958704, -0.09144274, 0.054055274, -0.08375361, -0.046672482, -0.095622644, -0.091161236, 0.13396348, 0.010869728, 0.08308969, -0.00043384818, -0.027454494, -0.015595257, 0.0794094, 0.21783784, -0.077170156, 0.023586748},
   {-0.024904603, -0.16844085, -0.12201661, -0.0528033, 0.09328161, 0.2411725, 0.26191303, 0.0038970318, 0.06364233, 0.03746749, 0.08685302, -0.0787054, -0.2744911, 0.0921726, -0.11184573, 0.08856129, 0.075620554, -0.016318, 0.013476165, 0.07694158, -0.033112843, -0.048353523, -0.024390288, -0.01528232, 0.19659425, -0.032565895, -0.11773549, -0.0009131891, -0.04888384, 0.08523167, 0.028151771, 0.08477197, 0.007849482, -0.0342096, -0.014916485, -0.23129804, 0.027878312, -0.0127392905, -0.028204769, 0.024776226, 0.14660475, 0.04834422, -0.16377679, -0.0077767842, 0.063147575, -0.01576075, 0.006462842, -0.024438228, -0.09285984, 0.02337888, 0.0024371892, -0.031898037, 0.00414252, 0.0062175, -0.047352564, 0.05871228, -0.014136541, -0.010319867, -0.025604352, -0.072259635, -0.072307564, 0.099246204, -0.101074025, 0.05873026, -0.07904587, 0.0360237, 0.00014841335, -0.0013446123, 0.03874854, -0.15161479, 0.22243232, -0.012344522, 0.023677897, -0.005437831, 0.05281684, -0.06843662, 0.07594048, 0.22386557, 0.057066184, 0.18105808},
   {-0.08610256, -0.034549057, -0.14477034, -0.047322426, 0.00038869746, -0.015092711, 0.098885015, -0.02656906, -0.09684492, 0.075226784, 0.017412722, 0.06048328, -0.10573152, 0.06650121, -0.045737244, 0.10099276, 0.041646887, -0.04360045, -0.082239226, -0.08477415, 0.011788066, -0.108080514, 0.025414802, -0.039023783, 0.03957498, -0.03454816, 0.005921748, -0.063787244, -0.07801657, -0.05100582, 0.07162818, 0.042398885, 0.005421583, -0.017930992, -0.07189479, -0.030448023, 0.08695735, -0.09200512, 0.05009179, 0.05713939, 0.027801944, 0.034288652, -0.09538571, -0.036542956, 0.016649108, -0.04930243, 0.015196346, 0.059976492, 0.020532548, -0.06702497, -0.030023813, 0.017358068, 0.06515537, -0.05850351, -0.051721454, 0.07749461, -0.083999686, -0.048759405, -0.082322404, -0.001111235, 0.051072277, 0.07125514, 0.02504012, -0.109292984, 0.052250527, -0.07031895, -0.09868529, 0.06421635, -0.07529623, -0.0057286522, -0.01187353, 0.023402773, -0.025720514, -0.092637904, 0.04578161, -0.079437144, 0.06341102, 0.082360625, -0.020205747, -0.040902685},
   {-0.057000834, 0.0070580784, 0.03133307, -0.033131715, -0.08400424, -0.060731784, -0.06206794, 0.011332939, -0.083435945, -0.008284448, 0.06601585, -0.004558097, 0.050731868, -0.095381334, -0.030002784, 0.10624498, -0.05888002, -0.0741953, -0.055629455, -0.06682083, 0.066856764, -0.089848615, -0.08627341, -0.034935486, -0.115949914, 0.06829763, 0.16245905, -0.054219335, -0.086946584, 0.06594403, -0.077926934, 0.062398925, -0.06588703, -0.030032504, -0.0058090864, -0.02488078, -0.07634743, 0.0023790621, -0.0033269648, -0.10050254, -0.060728252, -0.10327532, 0.08344428, -0.04421395, -0.07736899, -0.04326153, 0.04869411, 0.031309754, 0.020501427, 0.031573262, 0.018421985, -0.01677363, -0.027875153, 0.033820007, -0.06663773, 0.071676545, -0.08592, 0.040768243, 0.05422037, -0.050634135, 0.0038250908, 0.0024288814, 0.066895984, -0.11802111, 0.021905698, -0.004221845, 0.08515793, -0.073158115, -0.03072019, 0.01379816, -0.015819404, -0.049238916, -0.076556236, 0.05221626, 0.04642243, -0.090862855, 0.009112208, -0.0049261153, -0.07125097, 0.0427445},
   {0.05691222, 0.09291812, 0.045206998, -0.031983603, 0.0011865469, -0.15323602, -0.06334941, 0.02337069, -0.015438804, -0.040842593, 0.0501172, -0.09637376, 0.043594033, -0.08560851, 0.10531942, 0.08578997, 0.09775339, 0.08634666, 0.11667207, -0.08256969, 0.068233155, -0.0847325, 0.08044385, -0.07518821, -0.09465289, 0.009264636, 0.07399468, -0.033111967, 0.07784359, -0.04872721, 0.068788275, 0.028007915, -0.053866792, -0.072598234, 0.062220506, 0.060550023, -0.025831006, -0.18261848, -0.003642305, -0.008180083, -0.14083956, -0.0542276, 0.044526972, 0.055016413, 0.001394648, -0.02683431, -0.086000174, 0.02066331, -0.014248617, -0.07964705, -0.0948657, 0.024467956, 0.059517603, 0.1081348, 0.007821129, -0.0797181, 0.008429648, -0.06335001, -0.035840206, 0.013706241, -0.09200042, 0.009848962, 0.092488654, 0.045726556, -0.023205973, -0.105884746, -0.04368326, 0.033469487, -0.02510199, 0.058352906, -0.05227085, -0.046954162, 0.0030306226, 0.0045154733, 0.014516173, 0.00030932575, 0.081896916, -0.14566217, -0.021337122, 0.024709059},
   {0.007073809, 0.19430387, -0.118754365, -0.08803782, -0.09197979, -0.052622445, 0.02939192, 0.047252975, -0.06318031, 0.06428161, 0.019777033, 0.01866618, 0.10827437, 0.088943236, -0.009376746, 0.030382589, -0.05397124, 0.034253933, -0.00042115035, -0.029837234, 0.028357886, -0.04022686, 0.08970506, 0.033795934, -0.17949042, 0.00400878, 0.1568022, 0.04321238, -0.056532636, -0.09808931, -0.05499935, -0.09228584, -0.00019477874, 0.033938773, -0.028824924, 0.015280096, -0.07054412, -0.23056534, -0.08234381, -0.10424095, -0.055105433, 0.06524217, 0.10855873, -0.06145501, 0.044065174, -0.08498446, 0.017061993, -0.058960456, -0.03422382, -0.006267574, 0.011926748, -0.04730407, 0.06899703, 0.031391975, 0.07247555, 0.010510245, -0.0044215415, -0.09240814, -0.02267041, 0.036016773, 0.045021422, 0.031617176, -0.0275526, -0.13483329, -0.05220823, 0.00044331604, -0.07646325, -0.08174094, -0.052353524, 0.11712731, -0.021808375, 0.05057878, -0.038968906, 0.07906473, 0.006610302, -0.081386425, -0.016083248, -0.1588539, 0.00070442277, 0.02075461},
   {-0.0119770765, 0.20263407, -0.07926274, -0.108912334, -0.010871817, 0.05110202, 0.022406254, -0.058367178, 0.01657804, 0.0061597256, -0.09321448, -0.07561391, 0.0773128, -0.05580369, -0.05976077, -0.045715913, -0.039580498, -0.08806882, 0.037975572, 0.026774764, 0.05884338, 0.04993218, 0.057137422, 0.023657972, -0.20417835, 0.12466369, 0.17379528, -0.07028143, -0.049362984, 0.029957077, -0.060165357, -0.025680637, 0.111434676, -0.029446281, -0.08750002, 0.03895401, 0.07917575, -0.2400152, -0.05311124, -0.05644336, -0.059054233, 0.051657293, 0.06712478, -0.054334145, 0.054236654, 0.09038664, -0.054617554, -0.003572563, 0.039715037, 0.00015190804, -0.088905685, -0.042745423, 0.08181743, 0.053887498, 0.047411907, 0.07244885, -0.061461598, 0.08253206, -0.007708989, -0.04628186, -0.010814145, 0.107694566, 0.01592689, -0.051974516, -0.05924827, -0.109462045, 0.0046746302, 0.06906283, 0.058360316, 0.043701068, -0.13816574, 0.08685651, -0.024490155, -0.09845879, 0.036979135, 0.0077548176, 0.012100166, -0.060234237, 0.042077295, -0.08729059},
   {0.06943703, 0.046765227, -0.18438487, 0.05845195, 0.007916331, -0.07017088, -0.15673847, 0.056832116, -0.012575407, 0.04424355, 0.032979216, -0.0651303, 0.13840269, 0.059048362, -0.07638094, 0.11759462, -0.014730533, -0.06164952, -0.057200015, 0.018493362, 0.042142708, -0.001545448, -0.052296314, 0.08252661, -0.017221719, 0.16515788, 0.21132353, -0.0323696, 0.024942672, -0.09663523, 0.008689186, 0.014187242, 0.016670622, -0.015472281, 0.07633578, 0.01910919, -0.0313609, -0.19239488, 0.038870286, -0.118670955, -0.103354186, -0.13891259, 0.16092739, -0.096580155, 0.15088466, -0.07202348, -0.041429404, -0.06887561, 0.047441848, -0.021557545, -0.08876507, -0.081271075, -0.08888704, 0.056124005, 0.062509164, -0.049122535, 0.056358144, -0.06678105, -0.03706337, -0.07106378, -0.049729705, -0.017003698, 0.006250034, -0.018787496, 0.030787177, -0.16542792, 0.02710935, 0.085521154, -0.004473999, 0.093539946, -0.05652808, -0.060047302, 0.03800303, 0.027506448, 0.12642556, -0.053792868, 0.03265661, -0.12747881, -0.059687607, 0.009710821},
   {-0.05341943, 0.065778516, -0.1216884, -0.10573339, -0.12274727, -0.04452749, -0.031357676, 0.07458017, 0.045261182, 0.032312654, -0.1163216, 0.087557696, 0.041238133, -0.07846555, -0.015687613, -0.03829326, 0.08151728, -0.095105715, 0.0006422151, 0.02174192, -0.086201794, 0.039819002, -0.092001624, -0.005117742, -0.06382032, 0.16470845, 0.08116893, 0.12037901, -0.036605217, -0.11350609, 0.06274701, 0.01978445, 0.083363645, 0.072989516, -0.08685322, -0.031775735, -0.042458102, -0.009642937, 0.07486088, -0.08482018, -0.12834543, -0.03120664, 0.13161483, -0.033016033, 0.08071067, 0.09470456, -0.07643676, -0.070020325, 0.021133816, -0.0670521, -0.07908441, -0.08486353, -0.023675902, -0.02774218, 0.08360064, 0.011619754, 0.041976206, 0.061498452, -0.054660194, -0.0161028, 0.04383976, 0.09407982, -0.04539834, -0.033370003, 0.017500028, -0.041668136, 0.0008371147, -0.09108584, 0.029553555, -0.02299046, -0.055449113, 0.03136453, -0.008385899, -0.064349286, -0.026882503, 0.06726398, 0.003153299, -0.09310064, 0.029865269, -0.06578368},
   {-0.081740245, -0.05068228, -0.029958047, -0.0048070955, -0.13489202, 0.046019133, -0.012095687, -0.0022862842, 0.018180372, -0.09742921, 0.01950611, 0.063717864, 0.055673294, -0.039111678, 0.07824786, 0.09755972, 0.03630562, -0.05396769, 0.038413055, 0.061171602, 0.02809881, 0.03331324, -0.013305232, 0.032988545, -0.110339105, 0.115714826, 0.1235938, 0.08282334, 0.085178144, -0.08008423, -0.080836974, -0.100511156, -0.095592916, 0.049058437, -0.05510551, -0.0620005, -0.03882008, 0.03964231, 0.046098772, -0.036913246, -0.050449498, -0.070083864, 0.06350528, 0.010645695, 0.007108362, 0.030101992, 0.015041158, -0.06750713, -0.09814467, -0.10121258, -0.05279368, -0.026303194, -0.007475461, -0.014209091, -0.07937605, 0.021815233, 0.066183984, -0.052455526, -0.07402286, 0.008728716, -0.05300827, 0.024838658, 0.10942935, 0.08549002, -0.034615446, 0.031858984, 0.08617624, -0.0889097, 0.061693944, -0.028399846, 0.005892028, -0.059078135, 0.11654603, -0.051599562, 0.032850962, -0.0060813725, 0.030580161, 0.011220348, 0.02105575, -0.004753531},
   {0.02840149, -0.0023547146, -0.105756685, -0.11304338, 0.018763022, 0.047846004, 0.0049500554, -0.06310897, -0.0020870941, -0.031687185, -0.032925006, 0.022470234, 0.03305734, -0.08107877, -0.021707987, -0.00046592404, 0.122594684, 0.027253993, -0.027884075, 0.015753828, -0.08476751, -0.02949665, 0.061425753, 0.075793035, -0.06803914, 0.02315471, 0.024069183, 0.012368225, -0.039623074, -0.0577954, -0.051675722, 0.024225963, 0.04870913, 0.02108979, -0.010544469, -0.08129561, 0.004267071, -0.09196267, 0.026900489, 0.0007015889, -0.060454365, -0.041311964, 0.12454651, -0.02149041, 0.07670251, 0.049125515, 0.005707018, 0.010706483, -0.08112842, -0.08710657, -0.04582499, -0.08911726, -0.009171415, -0.12575157, 0.04713564, 0.048675943, -0.04237769, 0.07370301, -0.05178435, -0.02006203, 0.08632777, 0.08998225, -0.010753507, 0.01134737, 0.09497132, -0.093823224, 0.043276872, -0.0741773, 0.062262125, -0.11726918, 0.02511504, -0.06806592, 0.0016401449, -0.031212157, -0.058492787, -0.001485154, 0.03338207, -0.014152907, -0.016701773, -0.07087349},
   {-0.099887535, 0.0631005, -0.00373812, -0.058342997, -0.094509766, 0.080612704, -0.02792613, -0.048277583, 0.049910042, 0.023066599, -0.10665227, 0.00084450596, -0.009159725, -0.012560129, 0.02024958, 0.058356088, 0.06700625, 0.037627615, 0.0058602463, 0.05783921, 0.038340162, 0.028141145, -0.07780939, -0.069143064, -0.042184874, -0.004730246, 0.051653165, 0.0998888, 0.0345505, -0.07847731, 0.0074965577, -0.02002572, 0.07777002, -0.007386409, -0.00062656857, -0.031827826, -0.025693038, -0.15766074, -0.025295097, -0.057073697, -0.15723656, -0.079539105, 0.123720214, -0.049707104, 0.027524453, -0.08745058, -0.0044279397, -0.044831462, -0.06466524, 0.07648864, -0.094712704, -0.07642518, -0.016344026, -0.014816832, 0.071363516, 0.037553594, -0.0038470065, 0.06438942, 0.03671833, 0.0017874906, -0.0581644, -0.0063104085, 0.09529806, 0.0025316807, -0.09388708, -0.07478227, -0.0578023, -0.044367604, -0.011565179, 0.055796143, -0.045463007, -0.021464549, -0.05050335, -0.037290793, 0.0771804, 0.087794445, -0.016312819, -0.07380445, 0.05688002, -0.0011388876},
   {-0.054118004, 0.05929806, -0.052948542, 0.0046786945, 0.01866398, 0.017060593, -0.10417694, -0.0027346266, 0.05305687, 0.05432675, -0.015051087, -0.09745146, 0.04175177, -0.07468025, -0.041489966, 0.09970065, 0.07566058, 0.013907947, -0.03140203, -0.036166623, 0.10635135, 0.03964849, -0.030822277, -0.052909352, -0.03801598, 0.024060259, 0.077463314, 0.0034530775, -0.1273379, -0.028206982, 0.029959073, 0.03337986, -0.0050270236, 0.074175134, 0.023300894, -0.023450797, 0.09008471, -0.12853578, -0.087823644, 0.029031245, 0.006153874, -0.019335648, 0.12296317, 0.022224613, 0.032404356, -0.08210666, 0.06823508, 0.028011622, 0.033440676, 0.037824154, 0.02476991, -0.03549338, -0.04108413, 0.07735946, -0.0837259, 0.060538437, 0.015792465, 0.04539532, -0.055029534, 0.05884139, 0.022198789, 0.08977123, 0.02009278, 0.049728088, -0.083902575, -0.047983803, 0.02055232, -0.00037203642, -0.024274819, -0.034270942, 0.05643998, -0.08150571, -0.019881252, -0.04669842, 0.041969843, 0.017192326, 0.0370244, -0.13936989, -0.03523283, -0.14131357},
   {-0.07615204, 0.044397637, -0.12193677, -0.06052923, -0.011382148, -0.047713872, -0.12541749, -0.061382562, -0.0703572, -0.04862399, 0.04498799, 0.03865748, 0.041436683, -0.023269773, 0.0047604972, 0.088413134, 0.13804656, 0.012775898, 0.09552179, -0.03527133, 0.14598994, -0.1264491, 0.057703875, -0.084697805, -0.10159509, -0.03543138, 0.1314329, -0.049142938, 0.016773038, -0.03903092, 0.07544279, 0.052364863, 0.095518336, 0.07865799, -0.075633705, 0.12347389, 0.024579853, -0.20702614, -0.05661243, -0.06706007, -0.07354205, -0.031656932, 0.113059916, -0.038025577, 0.10650248, 0.055737086, 0.07528854, 0.073661424, -0.081644714, 0.071316555, 0.09114734, -0.035632897, 0.07820153, 0.0057425587, -0.06486999, -0.004574602, 0.083510995, 0.034982085, 0.05505409, -0.09981839, 0.0019148514, 0.08937638, -0.010209386, -0.0506385, 0.07179587, -0.02131755, 0.059985507, 0.014211742, 0.020512998, 0.105419815, -0.14036958, 0.00076649024, 0.057691954, 0.0050420077, 0.02763103, 0.009963103, 0.028328491, -0.15401012, -0.03762184, -0.1497848},
   {-0.022981202, 0.12531313, -0.14179488, -0.0051264088, 0.100856915, -0.0061790664, -0.10007581, -0.03833636, -0.045166943, -0.06500318, -0.01560767, 0.06086391, 0.017980667, -0.041900896, 0.032049756, 0.084877774, 0.0146795595, -0.020098493, 0.12827012, 0.06699735, -0.014362468, 0.03256943, 0.018904105, 0.012727766, -0.140692, 0.028429154, 0.14789322, -0.09053453, -0.076198444, -0.08167777, -0.0035162864, 0.07964422, 0.101118885, 0.05439238, 0.06815056, 0.08500673, -0.09922398, -0.15616113, -0.07103537, -0.055610932, -0.037369207, -0.06372323, 0.016228555, -0.05488361, -0.036998294, -0.01760672, 0.010239504, -0.022802277, 0.024790153, -0.025083099, -0.07374367, 0.043195665, -0.043795336, 0.110408306, 0.029814402, 0.015622849, -0.0756004, -0.086217545, -0.07472271, 0.013950708, 0.051351584, 0.023507265, -0.001950776, -0.039197847, 0.010628313, -0.0015563787, -0.048248813, 0.048038807, 0.010313496, -0.014839648, -0.06176804, -0.08856138, -0.009764336, 0.043262478, -0.06601835, -0.087597266, -0.08656756, -0.14920695, -0.07221704, -0.14554396},
   {-0.028803414, 0.15017273, -0.07018227, -0.048812717, 0.00391053, -0.0960982, -0.13079546, 0.026039176, -0.013468689, 0.016650677, 0.034188267, 0.073746964, 0.097923696, 0.004236363, -0.07255592, 0.10782108, 0.033443302, -0.011656776, 0.081176944, -0.058331933, 0.036550455, -0.0004860654, -0.07560913, -0.08584438, 0.01365076, 0.01992957, 0.11541356, 0.00289179, 0.07254886, 0.06762136, -0.058151156, -0.04968614, 0.036431387, -0.026358508, 0.04742042, 0.016027758, 0.048196126, -0.17408563, 0.025230622, -0.01684936, -0.014569609, 0.03706303, 0.07886392, 0.07404019, -0.004166922, 0.09290033, 0.030683555, -0.02217176, -0.046492323, -0.022350859, -0.020892374, 0.015919697, 0.033793114, -0.00675991, -0.072901435, -0.06566746, -0.05030381, 0.0013982896, 0.01629839, 0.05075736, -0.02488891, 0.12263878, 0.059848588, -0.10242368, 0.044586487, -0.05714439, -0.050983764, -0.094641104, -0.052876953, 0.0082447985, -0.14589806, 0.01786221, 0.010741717, 0.06798289, -0.007801012, -0.025883146, -0.095386095, -0.027735787, -0.03408061, 0.024560137},
   {0.0060547017, 0.0123608345, -0.08813587, 0.011126442, 0.06024116, -0.015612236, -0.10691277, -0.03539737, 0.078806646, -0.027369043, -0.016359182, -0.07565017, 0.08041166, -0.07134862, -0.06285936, 0.015504786, 0.088016585, 0.004771106, 0.079973534, -0.017081087, 0.076226704, 0.051823437, 0.0041895285, 0.0024649738, 0.057189517, 0.017102618, -0.0017114109, 0.0022342363, 0.084870584, 0.041779775, -0.010070245, -0.03885583, -0.03682639, 0.011275923, 0.058645613, 0.05650584, -0.0656281, -0.051201504, -0.010695222, -0.108995385, 0.027017288, -0.021138774, -0.03228427, 0.015403403, -0.0062165726, 0.05249635, -0.047402855, -0.07023685, -0.030889465, -0.02765057, 0.07692114, 0.010079179, -0.09647135, -0.07224127, 0.018678933, -0.066753, -0.07992894, 0.029995637, 0.07899339, 0.059570733, -0.06703052, 0.08074115, 0.0022691695, -0.020072673, -0.074577115, 0.0060694735, 0.04551541, -0.03772679, -0.078048214, -0.0290255, -0.111078195, 0.075414054, 0.052718874, 0.062050197, -0.11248519, -0.024331503, 0.08763082, -0.04538519, 0.020060675, 0.041897457},
   {-0.010509979, -0.091161504, -0.09349929, 0.056665253, -0.049514856, 0.057079107, 0.09268353, -0.04664227, 0.0027594706, -0.012435448, -0.10088565, 0.038331874, -0.012437923, -0.0062448382, -0.15362184, 0.01772202, 0.030640144, 0.05952052, -0.0946793, 0.015981607, -0.09803859, -0.11252378, -0.013786279, 0.07067966, -0.004991277, 0.0840232, -0.137783, -0.027461385, -0.14045271, -0.007599451, -0.07268158, 0.038992986, 0.045174394, -0.070950404, 0.08441692, -0.12684855, 0.034044508, -0.030289553, -0.00823461, 0.08621432, 0.10055658, 0.033533417, 0.0031724016, 0.078272276, 0.07229198, -0.08810998, 0.05334019, -0.05522326, 0.014846131, 0.053395834, 0.07509414, 0.03990015, -0.009415715, 0.09427683, 0.06917883, 0.08381003, -0.070699945, -0.06590755, -0.056544077, 0.051602773, 0.07654122, 0.10324882, -0.08910681, 0.038037706, 0.01760982, 0.048531964, -0.006979744, -0.07877609, -0.054899562, 0.029399026, 0.06036246, -0.06415739, -0.033663876, 0.046955723, 0.037006672, -0.056649853, 0.088943414, 0.13155437, 0.08248307, -0.08933058},
   {0.055375986, -0.14321859, -0.22523713, 0.009983985, -0.040223032, 0.04203687, 0.23380077, 0.015347273, 0.010600856, 0.12477171, 0.065387815, -0.0088343145, -0.28943053, -0.05818583, -0.21636622, -0.026931567, 0.023920013, 0.0068884566, 0.021267626, 0.06280766, -0.11685732, -0.09533229, 0.07769721, 0.08387286, 0.16543646, -0.064356565, -0.12833162, -0.032993138, -0.022226574, 0.12994337, -0.013323693, -0.0761252, 0.15413238, -0.0649086, 0.0019856535, -0.08377983, -0.059942044, 0.05924979, 0.06819343, 0.08046377, 0.25006247, 0.07552145, -0.15967907, -0.04132532, 0.16066831, -0.033173636, 0.01966127, -0.0013857333, -0.08680332, -0.09295631, -0.038774353, 0.08836176, -0.08313473, -0.0049137683, 0.06590226, 0.074650176, 0.08030252, -0.07973525, -0.05006003, -0.047251657, -0.043916207, -0.0075153764, -0.05722259, 0.021147719, -0.068782225, 0.032523345, -0.029487666, 0.037257306, 0.014654741, -0.03189677, 0.098513134, -0.048039123, 0.06387098, 0.054728102, 0.077090874, 0.046284072, -0.077786244, 0.1833989, -0.028792635, -0.006261473},
   {0.00080432766, -0.099643484, -0.11951129, 0.03792694, 0.11722214, 0.20764594, 0.21489523, 0.08611347, -0.06746552, 0.16352479, -0.02369794, -0.011900484, -0.18076347, -0.022149421, -0.06320277, -0.06959841, -0.03314401, -0.0037268847, -0.115682304, 0.061831944, -0.10009886, -0.09893967, -0.09206176, 0.06280401, 0.2197603, -0.029851642, -0.1815116, -0.01042782, -0.05651688, 0.028677838, -0.019027362, 0.06827196, -0.018445473, -0.08140257, -0.03133562, -0.07703998, -0.05502026, 0.09194572, -0.039127093, 0.04721565, 0.32433268, 0.062361598, -0.08211664, 0.046273403, 0.14697248, 0.09176215, 0.06289346, 0.05755085, 0.06814501, -0.06267875, -0.025723033, 0.055832535, -0.08215953, 0.077771574, 0.015779765, 0.039505847, 0.07934112, -0.029183358, -0.047277678, -0.07605758, 0.038651057, 0.10677093, 0.06320846, -0.005756456, -0.037947066, 0.17495261, 0.017388023, -0.04866728, -0.029811367, -0.19221093, 0.07623614, 0.037238173, 0.115703166, 0.017473476, -0.08427997, 0.02671118, -0.06449288, 0.25277963, -0.019046163, 0.14706297},
   {-0.04681101, -0.14265546, -0.20673648, 0.09352038, -0.039716702, 0.037384696, 0.2285807, 0.0182361, 0.0146377385, 0.024029965, 0.047222104, 0.030883644, -0.08370276, 0.013727926, -0.05191667, 0.014333352, 0.035437297, -0.045947686, -0.020585848, -0.06425862, -0.14579, -0.10311208, 0.050921313, -0.0601739, 0.18189727, -0.11644644, -0.21459647, -0.0014530204, -0.049209874, 0.0030431747, 0.07271575, -0.007457225, -0.01715238, 0.034589835, -0.09240586, -0.0011340542, -0.06968645, 0.11133418, 0.013323663, 0.018781435, 0.2130172, 0.06400533, -0.14974892, -0.03893955, 0.16547017, 0.0933549, -0.022353403, -0.10119433, 0.08726338, -0.0057535307, -0.073058195, -0.072162785, 0.011660052, 0.072651364, -0.040737018, 0.07751148, 0.02896002, 0.07838417, 0.055535264, -0.013449298, -0.07772147, 0.03080986, 0.03397937, -0.10548537, -0.022068404, 0.23947014, 0.056331683, 0.03879085, -0.013677627, -0.072198875, 0.05498342, 0.023551792, 0.05201866, -0.08846866, -0.114040054, -0.038074095, -0.09234995, 0.24730055, 0.05135709, 0.009988501},
   {0.052334007, 0.077449985, -0.13955398, 0.07855392, 0.14211465, 0.05909943, 0.19197036, 0.09043687, -0.09668495, 0.006862066, 0.124798834, 0.006852578, 0.02983011, -0.0644814, -0.06722011, -0.13946278, -0.118520565, 0.09395876, -0.083323926, -0.009084971, 0.14334314, 0.0013799744, -0.031636745, 0.06432349, -0.0757699, -0.035783034, -0.07073897, -0.074882895, 0.048749473, 0.041912228, -0.06621147, -0.04816056, -0.006368801, 0.03368369, -0.06909773, 0.08769494, -0.010080714, -0.028717859, -0.065692954, -0.028050698, 0.18481034, 0.15880214, -0.11896931, 0.08630809, 0.18963805, 0.09005221, -0.015817255, 0.07958474, -0.020878332, -0.039397255, 0.084779344, -0.08028924, 0.06678656, 0.093207106, 0.0043106615, -0.04128089, 0.027917573, 0.04676601, 0.036734097, 0.019168658, -0.039763596, 0.06941066, -0.070220895, -0.16948467, -0.046677083, 0.18603419, -0.016640145, 0.0539521, -0.031405494, 0.13343935, -0.014482173, -0.06411013, 0.15987068, -0.08052405, -0.10057207, -0.034538716, 0.051510207, 0.13675216, 0.029053088, -0.04985729},
   {0.023119519, 0.016326016, 0.019644639, 0.11651396, 0.027585557, -0.12647782, 0.20918265, -0.05424615, 0.033497967, -0.04336593, 0.013476172, 0.00935061, -0.066242516, -0.016874269, -0.023982681, -0.17995699, -0.0773622, -0.018388331, 0.023115318, -0.043427344, 0.007627797, -0.07029579, -0.0040654913, 0.049775124, -0.05421457, -0.1452268, -0.06197292, -0.13787308, 0.034918457, 0.009846369, -0.020962985, -0.016301848, 0.021889122, -0.08310368, -0.012095902, 0.18739529, -0.021984475, 0.061704483, -0.02425896, -0.10426714, 0.008677378, 0.19116074, -0.16459571, 0.008414899, 0.11860876, 0.042073958, 0.074969076, 0.035142206, -0.0705283, -0.039767794, -0.0772093, -0.031295065, 0.08317951, 0.06987348, -0.087641716, 0.03160996, 0.050037067, -0.047152113, -0.0022495314, -0.09108041, 0.016311683, 0.13172199, -0.06329924, -0.05255396, -0.000115446746, 0.053955752, -0.09503968, -0.10012225, -0.042460468, 0.19172736, -0.115119204, -0.010531867, 0.06650242, 0.024076393, -0.14603461, -0.0058775693, 0.046066955, -0.013848064, 0.06757436, -0.05234073},
   {0.080387816, 0.23442224, -0.15706256, 0.112230904, 0.011342094, -0.12120029, 0.16756459, 0.03223653, 0.08209295, 0.04657172, 0.10752583, 0.010405408, 0.037749205, -0.066470966, 0.18661779, -0.14008488, -0.1232679, -0.09144242, 0.06005453, -0.039825104, 0.26912707, -0.17925498, -0.081037655, 0.026718833, -0.10567106, -0.2772287, 0.06231489, 0.0006339263, 0.12242016, 0.056877825, 0.068021454, 0.054580346, -0.020440705, 0.08117674, 0.04070716, 0.07223558, 0.043556236, -0.06412774, -0.07389565, -0.23295836, 0.029705973, 0.2609367, 0.0045683454, -0.065442294, 0.17192006, -0.040327612, -0.076723106, 0.0774596, 0.007074448, 0.0064209015, -0.026060678, 0.045845807, -0.02279237, 0.04228898, 0.009645577, -0.0023577926, -0.0556997, -0.0059355474, -0.014568396, -0.0016246297, 0.026279822, -0.14256081, -0.00951539, -0.31683072, 0.055547826, 0.18206544, -0.029843278, -0.075556286, -0.08140836, 0.27635244, -0.20180878, -0.037797302, -0.008151715, -0.01294815, -0.108467095, 0.07610085, 0.063688084, -0.016886737, 0.0042249137, -0.115702055},
   {0.037209846, 0.122803845, -0.03219822, 0.024844958, -0.046284627, -0.024368942, 0.019505318, -0.011472334, 0.053830296, -0.100821435, 0.1702856, 0.00884664, 0.052269578, -0.046952616, 0.11000658, -0.13470796, -0.128042, -0.018578157, 0.08597896, -0.018064069, 0.110196844, -0.13842566, -0.050283168, -0.06797223, -0.1744869, -0.18827304, 0.039812796, -0.009616216, 0.059805077, 0.016878847, 0.0017913507, -0.091659576, 0.047799014, -0.057303183, -0.052123066, 0.114103034, -0.071887575, -0.090719655, -0.027888475, -0.08074429, -0.034359623, 0.13684005, 0.06309174, -0.00066706585, 0.12134874, 0.039806865, -0.062987804, 0.020998305, 0.08138395, -0.033890486, 0.025436625, -0.04301029, -0.081419736, 0.14608614, 0.020922583, -0.09862565, 0.011515336, -0.03774348, -0.01239121, -0.08703542, -0.009566195, -0.24548537, -0.029320667, -0.1649177, 0.04505252, 0.09168082, 0.0885591, -0.039798908, 0.0015911832, 0.20053159, -0.095471516, 0.07441948, 0.015067707, 0.04710251, 0.04296757, 0.0018416569, 0.020990945, 0.047377, 0.05371878, 0.018459318},
   {0.03353993, -0.048883136, -0.15510806, 0.06581765, -0.11007924, 0.1361049, -0.018616095, -0.08746396, -0.009427667, 0.050552767, 0.051458273, -0.036897533, -0.20163122, -0.07381007, -0.05494973, 0.0145194195, -0.08492973, 0.08379135, 0.051307958, 0.012866285, -0.023749348, -0.11733283, 0.09451557, 0.053272408, -0.108084574, 0.0026144169, -0.030520815, -0.010241141, -0.141271, 0.013477743, -0.05871246, -0.08038861, 0.0690885, -0.050771195, 0.029895658, 0.00025768837, 0.08686339, -0.06437833, -0.0354629, -0.12993656, 0.05469424, 0.05709152, 0.0296672, 0.06855099, 0.2567377, -0.075748906, 0.04656335, -0.016672602, -0.05850597, -0.015750973, 0.06488948, -0.027344862, 0.025459131, 0.06290808, 0.011384596, 0.00719946, 0.037811168, -0.03193454, -0.07295565, 0.03281305, -0.07128936, -0.32850432, -0.035143144, -0.035848472, -0.0032907352, -0.01898517, -0.0362119, -0.013711538, 0.018399872, 0.013513506, -0.01800181, -0.064126484, 0.17768939, 0.042801213, 0.13424405, -0.003494449, 0.042219825, 0.071722865, -0.054946095, -0.114688},
   {-0.0656915, 0.07166823, -0.08720327, 0.17243722, -0.06891707, 0.068514176, -0.01509169, 0.03225989, 0.06475316, -0.12317967, 0.21809028, -0.042353656, -0.13107927, 0.046332844, 0.1369966, -0.14167418, -0.13681328, -0.069482386, 0.0707839, 0.03550836, 0.08468905, 0.11340091, -0.07875237, -0.05960307, -0.0081295, -0.16310415, -0.062924765, -0.0042524715, 0.10639777, -0.040020388, -0.009088803, -0.073140055, -0.005885784, 0.06520989, -0.008752288, -0.05388562, -0.027804563, -0.013811778, -0.06628618, -0.19785288, 0.12499732, 0.22741902, 0.08444527, 0.01940394, -0.60231745, -0.0800664, -0.0864723, -0.061893612, -0.026350668, 0.036336113, 0.088583745, 0.07795849, 0.071976595, 0.0012541593, -0.09784513, -0.012024145, 0.075794615, -0.05412283, 0.07091568, 0.003738217, -0.06721521, 0.06660818, 0.02416343, -0.084559746, 0.012534335, 0.2276679, 0.06702162, -0.0010375029, -0.009247065, 0.092249095, 0.015374556, 0.060377028, -0.15069976, 0.009895529, -0.050326213, -0.078808054, 0.021377034, 0.16776852, -0.040785454, 0.012444487},
   {-0.082936674, 0.2611262, -0.09938332, 0.15358818, -0.04445084, -0.13465513, 0.13050272, 0.054229457, 0.076257095, -0.089140765, 0.24510767, 0.07234202, -0.029576167, -0.019680403, 0.06718276, -0.26580137, -0.20094936, 0.03679263, 0.2603869, 0.00638611, 0.23467846, 0.08716867, 0.06256277, -0.061148655, -0.12884474, -0.20673628, -0.053041488, 0.07033292, 0.015879693, -0.049736205, -0.024393374, -0.07178506, -0.023301326, -0.049548637, 0.03410659, 0.027720464, -0.054182835, -0.14886102, 0.055060133, -0.19299032, 0.08184833, 0.10694766, 0.11750634, -0.037900675, -0.6230958, -0.0029781088, -0.07695395, -0.02257055, -0.02514085, 0.019878328, -0.051723197, 0.019567493, 0.092695944, 0.011968197, 0.0199921, 0.08256769, -0.0005511112, -0.0498964, 0.09137394, 0.04887214, -0.088222414, 0.016464323, 0.109512605, -0.13177322, 0.08411641, 0.16781734, -0.09708385, -0.048135508, 0.01177156, 0.11531269, -0.2495264, 0.08158934, -0.25371647, -0.04661885, -0.050407853, 0.05121363, 0.026135195, 0.016016169, 0.08949152, -0.08767141},
   {-0.062486164, 0.22150166, -0.025344424, 0.08342181, 0.107165255, -0.06547122, 0.14506347, 0.053571068, -0.08082254, 0.00421495, 0.09983294, 0.022644471, -0.06151122, -0.077386744, 0.0706293, -0.10340208, -0.19120874, -0.0020587072, 0.07205644, 0.041641437, 0.19806556, 0.000113386355, 0.00743293, -0.071364865, -0.09833055, -0.15103129, -0.08441623, 0.025895502, 0.09949397, -0.11589594, 0.008170585, -0.065892324, 0.06453912, 0.07428457, 0.048496958, 0.037298016, 0.032420933, -0.03275796, -0.028924597, -0.1191796, -0.069521405, 0.17002805, 0.060357865, -0.097246066, -0.5690501, -0.036072258, 0.023226336, -0.09743863, 0.03314131, -0.06932694, -0.050949566, -0.0922524, 0.037911847, 0.08983218, -0.02191964, -0.0052442416, -0.02930313, 0.041292604, 0.08685034, -0.031805888, 0.032239504, -0.0043143285, 0.22155084, -0.12466619, -0.0945188, 0.13879372, 0.000496127, 0.068956226, 0.060565494, 0.19433239, -0.06790694, -0.08165825, -0.19138628, -0.06755471, -0.014344715, -0.07127361, -0.046751767, 0.078539565, -0.030603083, -0.17439944},
   {0.08933588, -0.010549456, -0.05014387, 0.18305057, 0.0868163, 0.06598828, 0.12280714, 0.065517984, -0.031824477, 0.064708635, -0.00307874, 0.0061710915, -0.10058543, -0.02237691, 0.06741078, -0.1256101, 0.002057362, 0.003223151, 0.106493756, -0.047146477, 0.08411317, -0.011481589, -0.094182365, -0.07388184, -0.014461829, -0.0063322713, -0.08602557, 0.04873366, 0.019939672, 0.0140600065, 0.002337489, 0.06515449, 0.019833067, -0.038952265, -0.061867375, -0.019171469, 0.041722752, -0.065632164, -0.060438447, -0.030196864, 0.07009432, 0.19955584, 0.0514915, -0.027134402, -0.384528, -0.017504998, -0.011550814, -0.06259923, -0.037503894, 0.06584631, -0.028465942, -0.027833275, -0.09765924, 0.0916618, -0.04539316, -0.040015265, -0.07547388, 0.012531898, 0.07027794, -0.051834892, -0.0016749576, 0.11402659, -0.01422653, -0.20654792, 0.026182078, 0.059126373, 0.022327172, 0.060956705, -0.08839864, 0.07522679, -0.15433064, 0.08367448, -0.18956551, -0.08878232, 0.014933011, -0.030020982, 0.044040725, -0.044815347, -0.08530421, -0.06866814},
   {-0.08028484, 0.08245123, -0.07243082, 0.13762979, 0.093574874, 0.06891612, 0.15265395, -0.06544392, -0.087331064, 0.029979931, 0.14397207, 0.07414385, 0.023549777, -0.077048436, -0.06289103, -0.031954825, -0.0643181, 0.021153882, -0.06447669, 0.06250865, 0.030123886, -0.059627607, 0.044769935, -0.07915637, -0.047336917, -0.017709523, -0.017521143, 0.0038431194, -0.05519145, -0.06666922, 0.0667536, -0.08012046, 0.07126336, 0.014634736, 0.0032845752, -0.030682413, 0.0756066, -0.08112479, -0.05289174, 0.046341393, 0.00020435819, 0.15285079, 0.03750926, -0.07079396, -0.200581, 0.09302371, 0.031406425, 0.03521624, 0.0075923754, -0.027285988, -0.06365083, -0.03482338, -0.003902065, 0.05941876, 0.07242369, -0.05541602, 0.0038494307, 0.07529752, -0.09206976, 0.07361947, 0.04207384, 0.08663992, -0.059435785, -0.06344794, -0.011524595, 0.15784255, 0.029353257, -0.00080713915, 0.060160108, -0.041193124, -0.051871415, 0.08756668, -0.14090073, -0.0679155, -0.062571324, -0.012396522, 0.03936838, 0.152331, -0.01015531, 0.035745632},
   {-0.030164734, -0.09364483, -0.0023452183, 0.056143887, -0.011160807, 0.075100385, 0.18630604, 0.03571599, -0.09619352, -0.029881887, -0.040881865, -0.02308082, -0.12944804, -0.0056216717, -0.18180186, -0.040177446, 0.10858525, -0.009666428, -0.16475071, -0.053459883, -0.19637786, -0.042837016, -0.049488146, -0.0211296, 0.19100383, 0.013947534, -0.113014, -0.0069547542, -0.07518757, 0.037900947, 0.05425437, 0.039279737, -0.027242044, 0.013975229, 0.003210376, -0.114273615, -0.0154348025, 0.13306059, -0.06321368, 0.06681269, 0.15949452, -0.0017486312, -0.107453935, -0.07543378, -0.09415511, -0.060857143, 0.072142236, 0.017086204, 0.021295408, -0.007073555, -0.012099259, -0.016824285, -0.0056696143, -0.0059328927, 0.036424078, -0.07705823, -0.037587482, -0.0048799124, -0.020262115, 0.0075045447, 0.044636093, 0.10212157, -0.065340616, -0.075241186, -0.042907696, 0.036688518, -0.024592448, -0.06776879, -0.048950557, -0.05393705, 0.025083877, -0.059465, 0.054526996, -0.049867533, -0.06354225, -0.060361553, 0.046294857, 0.1894836, -0.05798472, 0.18502013},
   {-0.09149985, -0.28545678, -0.16391024, -0.046833903, 0.022723747, 0.142879, 0.1309067, -0.07990811, 0.052700553, 0.02429395, -0.10823842, -0.08350534, -0.28187767, -0.025248326, -0.2691364, 0.04538285, 0.14608781, -0.08385492, -0.1543632, 0.07950922, -0.12730677, -0.12517053, 0.005162835, 0.08183583, 0.21626374, -0.036108393, -0.16100334, 0.09332289, -0.10326406, 0.0671933, -0.050875645, -0.02363822, 0.10854537, 0.016519578, -0.09183486, -0.2498243, -0.0045609595, 0.058408923, -0.04205494, -0.0056989905, 0.24815036, -0.021165043, -0.1827826, -0.063671894, 0.0927942, 0.07157654, 0.09004054, 0.025911734, -0.033038754, 0.023836039, 0.04644371, 0.08442213, -0.041913643, -0.042877734, 0.07243221, 0.0063354657, 0.020015165, 0.07902658, -0.035327513, -0.09898487, 0.009749249, 0.1924074, 0.01678029, 0.15675926, 0.07053242, 0.040303897, 0.057162527, -0.098526664, -0.06401714, -0.09179465, 0.23150662, -0.06717339, 0.101003766, -0.03271611, 0.06641086, -0.047706664, 0.057306144, 0.27430636, -0.023686454, 0.12441898},
   {0.0061024725, -0.17187344, -0.054248203, 0.0038584243, -0.022291627, 0.101404175, 0.17738496, -0.041347645, -0.056049623, 0.22013642, 0.036178004, -0.059786435, -0.29229435, -0.0063738003, -0.25475118, 0.15479937, 0.15961166, -0.08421379, -0.042558953, 0.039237097, -0.123449676, -0.12242581, -0.065368086, -0.06269725, 0.21865228, -0.011895753, -0.28531817, 0.03392249, -0.22425406, 0.13169532, 0.068276845, -0.09089315, 0.08777459, -0.046729553, -0.053167645, -0.098152645, -0.058495905, 0.14647992, -0.051034126, 0.00037095172, 0.24417013, -0.07511348, -0.23101404, -0.0023958476, 0.09194436, 0.028449208, -0.02977001, -0.037087873, 0.06921953, 0.013223937, 0.031184368, -0.008923141, 0.021460343, 0.005978495, 0.045552097, 0.032406114, 0.021173848, 0.03253109, -0.090260364, -0.02274057, 0.036439545, 0.20314004, -0.0046624998, 0.12397465, -0.03910219, 0.047727574, -0.013643037, 0.019122645, 0.03847248, -0.13153769, 0.18780254, 0.014239691, -0.0025537892, 0.06422722, -0.030589322, -0.09310269, 0.05189614, 0.2159802, -0.0028692281, 0.16610031},
   {-0.08263097, -0.14814152, -0.046108328, -0.12247243, 0.0072422107, 0.18023461, 0.003683806, -0.08188703, 0.005724118, 0.029052448, 0.015135117, -0.096483655, -0.04076628, 0.006511748, -0.09343227, 0.16658758, 0.17479105, 0.02765143, 0.00084788044, 0.08375749, -0.11126641, -0.07484886, 0.09310285, 0.02172578, 0.0626902, 0.051398885, -0.053100333, 0.056112666, -0.06332112, 0.007116711, -0.04632026, 0.0015079, -0.036939014, 0.059434798, -0.06355546, -0.031953216, -0.031277403, -0.08905026, -0.063375555, 0.0931046, 0.085685395, -0.020835184, -0.010887028, -0.06723277, 0.029417474, 0.09254917, -0.072862834, 0.08464671, 0.038869705, -0.043730717, -0.056493048, -0.08536622, -0.0140690245, -0.0780207, 0.014244657, 0.05679486, -0.0027901053, 0.00066247303, -0.077809416, 0.063646615, 0.06828747, 0.06846726, 0.049677324, -0.056067042, 0.024041556, 0.07668976, 0.08345835, 0.056167718, -0.07844695, -0.1335609, 0.080537066, 0.023468988, 0.12703414, 0.048939083, 0.13135335, 0.052964382, -0.065006875, 0.025960568, -0.021720191, 0.058440894},
   {0.017447662, 0.060079083, -0.057238005, -0.12472971, 0.03700984, 0.05329234, 0.013960054, -0.03336971, 0.017920006, -0.006504704, 0.014359676, -0.030085599, 0.031601243, 0.08180041, -0.104946755, 0.10177755, 0.008780354, 0.018755458, 0.0518863, 0.014013727, -0.07265402, -0.08942157, -0.05073263, -0.010910849, -0.02175728, 0.14195836, 0.0067775194, -0.077841416, -0.12955517, 0.012607023, 0.055620153, -0.051198754, -0.077140145, 0.00959843, -0.08046608, 0.084920146, -0.018912293, -0.058641553, -0.0904173, -0.0058072857, -0.108278684, -0.11950463, 0.06756498, -0.013572646, 0.033861518, -0.029434644, -0.002865307, 0.00013166516, 0.031828843, 0.00491265, -0.07733038, 0.008903077, -0.096729845, 0.08931452, 0.043255206, 0.08042017, 0.057636663, -0.090510644, -0.08653952, 0.06908217, -0.082474835, 0.15395764, -0.00625957, -0.06759934, -0.05042335, -0.09810499, 0.009509101, -0.028868834, -0.06624553, 0.04172531, 0.055595558, 0.0646789, -0.01124184, -0.07707802, -0.033083033, -0.06613168, -0.08036463, 0.024419134, -0.019557765, -0.020330098},
   {-0.04431478, 0.05384041, -0.06567069, 0.048014823, 0.041994143, -0.0022882228, -0.04716566, -0.04386761, 0.0852433, 0.06331185, -0.08896169, -0.06399571, 0.1950671, 0.03337442, 0.059021175, -0.026572099, 0.041530114, 0.0023378879, 0.02533102, -0.007915443, -0.020983089, 0.0031027677, -0.08438729, 0.0359837, -0.110188104, 0.16431601, 0.14287302, -0.09341971, -0.069331184, -0.051372323, -0.027646456, 0.028108718, -0.062336106, -0.028006045, 0.08038444, 0.16385898, -0.08321129, -0.17736335, -0.09485318, -0.012233194, -0.06665913, 0.018798495, 0.089486815, -0.0979471, -0.0015936245, -0.07786523, -0.07610988, -0.011119842, -0.08425624, -0.08478732, -0.08406145, -0.041618668, -0.07809473, -0.010933437, -0.019226305, 0.0037969, -0.07083738, 0.009675059, -0.022035867, -0.014572225, -0.08852179, 0.14444707, -0.008216628, 0.015987283, 0.043592177, 0.0014205873, -0.08239897, 0.04177741, 0.059034146, 0.057136565, -0.14880896, -0.079040244, -0.0051132725, 0.081457414, 0.016246518, -0.061736304, 0.04586385, -0.10068597, -0.013770122, 0.06894511},
   {-0.039236777, 0.17907138, -0.14063755, -0.104778014, 0.106125064, 0.015509025, -0.13999406, 0.060001772, 0.07819023, 0.0040303078, -0.09646201, -0.05444315, 0.19625634, 0.0913425, 0.034980994, -0.00081235485, 0.0109030185, 0.07425163, 0.07019923, -0.0018273441, 0.033956964, 0.024239657, 0.021577172, 0.056353543, 0.0010631344, 0.1250153, 0.19773027, -0.063333906, 0.05483269, 0.0077587347, 0.011140329, 0.06734873, 0.035824288, 0.002910398, 0.05182453, 0.051963057, -0.076346025, -0.1292686, 0.08881711, -0.030370535, -0.068901286, -0.084029585, -0.030230206, -0.07487888, 0.02171034, 0.0028549135, -0.00037898123, -0.022937864, 0.06211072, -0.008577681, -0.02782645, 0.053395275, 0.06839185, 0.1298277, 0.06341752, -0.023475947, 0.058814812, -0.06384148, -0.022607796, 0.04607804, -0.009354822, 0.13863161, 0.0034513958, -0.004172155, 0.03785401, -0.032167614, -0.042588558, -0.018062705, 0.031059317, 0.07672539, -0.20811607, 0.053903677, -0.15058778, -0.029697748, -0.08527411, -0.01619389, -0.09611059, -0.11208796, 0.04430731, 0.045568265},
   {-0.06738088, 0.124472015, -0.02335809, -0.12836412, 0.057511754, -0.014184128, 0.013060187, 0.06792368, -0.08030824, -0.0012320502, -0.14259246, 0.07671945, 0.05532944, 0.0087706745, 0.033966254, 0.0317453, 0.045091983, 0.03461594, 0.027574252, -0.057580493, 0.124579616, -0.032229718, -0.0061955377, -0.05393387, -0.038406827, 0.023268174, 0.10265304, -0.021626212, -0.035398558, 0.08451132, 0.050982483, 0.03122553, 0.004486275, -0.079948716, -0.08204097, 0.015096584, 0.012521826, -0.16651386, 0.008326322, -0.0777156, -0.11106476, 0.043078598, 0.026126547, 0.06128667, 0.0062353797, -0.071585625, -0.08783426, 0.06932965, 0.04154655, 0.01131396, -0.0010203421, 0.039270826, 0.065132804, 0.044029105, -0.089108445, 0.017882528, -0.043838028, 0.05585289, 0.021643184, -0.017965144, 0.054518454, -0.014377807, 0.047833648, -0.131963, 0.02496589, -0.048232596, 0.07796368, -0.07223966, -0.09344439, 0.1603311, -0.13541612, -0.010533619, -0.1578416, 0.055134356, -0.03230672, 0.07075838, -0.04616572, -0.07019571, 0.07181376, 0.054928705},
   {-0.011015947, 0.09705258, -0.18998009, -0.053990845, -0.06979277, -0.010035444, 0.009589564, 0.06693472, -0.030591076, 0.12723105, 0.022620473, 0.08555576, 0.060739502, 0.05013966, -0.08837591, 0.033080745, 0.047314394, 0.0124790445, 0.0714677, 0.04340816, 0.12549633, -0.11241104, -0.03260825, 0.0848663, -0.18621393, 0.059281297, 0.2113111, 0.0067779613, 0.0372483, 0.031975783, 0.055982742, -0.026394306, 0.028295044, 0.06355351, 0.06856776, 0.1586575, 0.056059614, -0.07348654, -0.054456647, -0.07882134, -0.059858907, -0.05825088, -0.0021031764, -0.09831813, -0.0037845343, -0.04239341, 0.04677882, -0.04777133, 0.034851983, -0.026558999, 0.069604166, 0.017616205, -0.060795583, -0.007610716, 0.087381326, -0.045862786, 0.028789848, -0.08650759, 0.070186, 0.02592934, -0.0054090694, 0.09437554, 0.09999742, -0.025517562, -0.037804604, -0.030507263, -0.04562699, 0.025188152, 0.050545312, -0.014659265, -0.040762853, -0.03792046, 0.046106838, -0.09368873, 0.13490558, 0.060479783, -0.051366117, -0.029141214, -0.008357103, -0.11387295},
   {0.07831895, -0.024980126, -0.20594709, 0.03176915, -0.07189896, 0.083266236, 0.040772375, -0.018691108, -0.04889577, 0.053389445, -0.00976961, -0.07864777, -0.04198206, 0.012506589, -0.09622586, 0.09174033, 0.014374637, 0.07680378, -0.006662243, 0.06465995, 0.042166714, 0.020566309, -0.052392513, -0.069308035, -0.032902535, 0.117682666, 0.028320823, -0.024770897, -0.1193484, -0.077061296, -0.02912849, 0.0442369, 0.101444624, 0.07549874, -0.024471171, 0.017623026, 0.07886879, -0.13744593, 0.021457577, -0.007067125, -0.15378676, -0.028893834, 0.083139606, 0.07734268, 0.08329554, -0.030002534, 0.042094804, 0.057596017, -0.0468615, -0.029106544, 0.049248524, 0.00063205557, 0.020359872, 0.14327835, 0.039886255, -0.08315754, -0.055173304, 0.061325636, 0.009430505, 0.030932508, 0.014365189, 0.023304751, 0.08454858, -0.0039904276, -0.009756222, -0.003766753, -0.08653479, -0.0052744686, -0.06078808, 0.062806524, -0.033301815, 0.07561633, -0.049238138, -0.06565561, 0.03916742, 0.07690465, -0.052354664, -0.16290557, -0.016271103, -0.0944363},
   {0.047674213, -0.0040429244, -0.032798253, 0.017303828, -0.05833175, -0.0953494, -0.104620054, -0.010224762, 0.08244517, 0.063853286, -0.016474338, -0.004824667, 0.051801346, -0.007680826, -0.037067242, 0.11172505, -0.017106479, -0.086197704, -0.012496714, -0.08811032, -0.03927198, 0.05245522, 0.09133918, -0.070440315, -0.027280288, 0.030191157, 0.17308639, 0.04804038, -0.12730321, 0.02819331, 0.08104256, 0.027311485, -0.050752625, -0.00987411, -0.012469663, 0.10898299, 0.052447908, -0.022204837, 0.028886223, -0.013450678, 0.02160799, 0.007302997, 0.106317684, -0.07150992, 0.12456105, 0.007380873, -0.0074579865, 0.0847908, 0.021156782, 0.042495668, -0.09160105, 0.048281863, 0.05284169, -0.042462803, -0.009140796, 0.001986677, 0.08931904, -0.026524182, -0.09294586, -0.068471305, -0.000779219, 0.07639084, 0.06333161, -0.060460214, -0.012019023, -0.012366584, 0.04505466, 0.069672555, -0.0107148215, -0.04443039, -0.0001036107, -0.061066825, -0.040512744, 0.06363789, 0.06888384, -0.039122052, 0.014606153, -0.030665554, 0.017332561, -0.12958997},
   {-0.03718826, 0.047380015, -0.066579275, 0.06903175, -0.048924636, 0.042488486, -0.045376234, -0.009019893, 0.006005747, -0.042667743, -0.105892666, 0.08332577, 0.0665403, 0.0895224, -0.078599736, 0.011367649, 0.13384731, -0.011659831, 0.011559857, -0.06081739, -0.06194752, -0.015492686, 0.08127221, -0.016362075, -0.023011375, -0.03748372, 0.05408786, 0.020194944, -0.08436608, 0.032744743, -0.09742817, -0.021000244, 0.055976506, -0.08596088, -0.09664798, 0.10806327, 0.0738663, -0.050647244, -0.039296936, 0.043429714, -0.009803858, -0.018861381, 0.048249546, 0.023950431, -0.06671786, -0.07024396, -0.05464754, 0.07327603, -0.008733122, -0.097572125, -0.09234896, 0.045786846, -0.017400252, -0.008175213, -0.089376524, 0.014152576, 0.032030042, 0.015686598, 0.08833774, -0.008704014, 0.01035545, -0.02365903, 0.042779725, 0.049395543, -0.06427902, -0.07682787, -0.10080568, 0.042012423, -0.032523952, -0.0226628, 0.05889769, -0.012943546, 0.06527085, -0.07185074, 0.12521926, 0.014529884, -0.049525026, 0.017153038, 0.043433256, 0.011974491},
   {-0.04252147, -0.015414643, -0.03455435, -0.062434103, 0.037854977, 0.063552015, -0.06634614, -0.05249555, 0.083315134, 0.072007515, -0.12408998, 0.017259913, 0.040767536, -0.04686791, -0.08689704, 0.07561333, -0.028665774, 0.08289515, 0.073364995, 0.024367398, 0.0457749, -0.1449022, -0.057161726, 0.048562832, -0.108593084, 0.14517404, 0.070737675, -0.041408163, -0.02513065, 0.030996641, 0.007248689, 0.019941578, -0.00061789516, -0.07050234, -0.05745346, -0.023212373, -0.06723863, -0.08720067, 0.06284102, -0.06341298, -0.07557005, -0.058024433, -0.042099923, 0.009116151, -0.018944219, -0.012052521, -0.035519548, -0.049981985, -0.03990576, 0.071830265, -0.04625528, 0.06337834, 0.039664015, -0.018712388, 0.0022694236, -0.090407476, -0.013709433, -0.016211372, 0.054164357, 0.011593197, 0.066375025, -0.021251824, 0.033218194, -0.05986012, 0.093479805, -0.010950396, 0.073019676, -0.029962571, 0.09044271, -0.023410602, 0.04677004, 0.04124544, -0.01934795, -0.09312455, 0.08218582, -0.0036108494, -0.076681815, -0.14385313, 0.009210989, -0.019078702},
   {-0.06198087, 0.13367979, -0.042981315, 0.004290863, -0.062138896, 0.029172009, -0.16564685, 0.08923579, 0.070480414, -0.0262091, -0.015213144, 0.086573765, 0.113537304, 0.0813994, -0.0906935, -0.044534717, 0.1175594, 0.031527884, 0.052562848, -0.09736009, 0.010587242, -0.027693847, -0.066864386, -0.06149852, -0.15635644, 0.060737584, 0.21799335, 0.052488625, 0.013245748, 0.014363694, 0.038718875, -0.026940092, -0.045975186, 0.0029297573, -0.00706331, 0.14081521, 0.029001337, -0.15699619, 0.017901747, -0.07758462, -0.09822845, -0.12281206, -0.007736129, 0.042064693, -0.027896177, 0.023482032, -0.051905017, -0.031302877, 0.07530029, -0.06494086, -0.089674525, -0.029161945, -0.061124064, 0.09085068, 0.08277636, -0.051216736, 0.05664138, -0.07583987, -0.049184933, -0.060537264, 0.037159644, 0.02828412, -0.023014268, -0.08222626, -0.07443397, -0.03145618, -0.014740354, -0.00458867, -0.08214311, 0.081271864, 0.014379138, -0.029112296, 0.030538026, -0.062048666, 0.044946674, 0.036298953, -0.07494024, -0.1721241, -0.08506182, -0.0052866056},
   {0.05678435, 0.118599795, 0.023587782, -0.014763849, 0.022484798, -0.08915508, -0.08489462, -0.047224734, -0.050387308, 0.09570227, -0.08298514, 0.014453993, 0.03439974, -0.06341728, -0.08303377, 0.07358081, 0.1472114, 0.07629017, 0.05124613, -0.065862685, 0.15403011, -0.065485865, -0.07402525, -0.06788842, -0.09194525, 0.07262939, 0.08718871, -0.11094123, -0.07815133, 0.10426968, 0.049988054, -0.02140215, 0.0070505417, 0.03263342, 0.02606746, 0.16104594, -0.0064468724, -0.20123343, 0.055384137, -0.08351187, -0.03503138, -0.031497397, 0.03521724, 0.072418265, 0.023646625, -0.025347449, -0.01967641, 0.04338249, 0.07972758, -0.038882297, -0.049009886, -0.041949596, 0.039212264, 0.13023545, 0.074064836, -0.03387771, 0.014921198, -0.026192177, -0.0012616515, -0.06464333, 0.08404098, 0.12625355, 0.03233319, 0.010400815, 0.013502859, -0.08011102, -0.07030875, -0.08975598, 0.014173448, 0.17476995, -0.18678746, 0.024177564, -0.06619464, -0.087924495, 0.035669625, 0.00254561, -0.016742317, -0.07913922, -0.008372823, -0.11338731},
   {0.022449031, 0.20781212, -0.063876875, -0.005214848, 0.06727632, -0.1672781, -0.06712298, 0.042396005, -0.0073629953, 0.013562503, -0.029265514, 0.045512464, 0.21958373, -0.0738935, 0.050024383, -0.08365593, -0.034708682, 0.025679663, 0.0599997, 0.06379506, 0.065433115, -0.09494086, -0.059449263, 0.075073965, -0.01094753, 0.12853327, 0.087993644, -0.066396296, -0.015167693, -0.030159047, 0.057149727, 0.015518605, -0.02705499, 0.028183997, -0.07842554, 0.16901372, -0.028522698, -0.13279594, 0.012712866, -0.022279236, -0.015149045, 0.03900189, 0.015693277, 0.06686049, 0.010667986, -0.031657018, 0.010635816, 0.0021514304, -0.01636927, 0.08244063, 0.03382107, -0.077886745, 0.09096461, 0.039742406, 0.007280693, -0.07284759, -0.08700129, 0.054334886, -0.013172738, 0.07435666, -0.07140709, 0.18303892, 0.030199522, 0.028215358, -0.020654008, -0.14759427, 0.041617442, -0.027604759, 0.07743088, 0.1651745, -0.18805107, -0.08963047, -0.12052403, 0.03137909, -0.11617641, 0.037591822, -0.016650945, -0.1584987, -0.0071774563, -0.0036000183},
   {0.015257963, 0.067304045, -0.040636107, -0.0125032365, 0.045094162, -0.14330555, -0.0930844, 0.046928123, -0.031998094, 0.014428468, -0.111792274, 0.07869048, 0.109650254, 0.031809963, -0.06661242, -0.02517838, 0.076762095, 0.030353405, 0.051469777, -0.026238244, 0.014323552, -0.06072412, -0.04393461, 0.0032357965, 0.0083838655, 0.1176004, 0.16906178, -0.05071025, 0.021183595, 0.07274935, 0.00027109912, 0.07825441, 0.06688961, 0.014381454, 0.04925173, 0.08091237, 0.05690768, -0.13134947, 0.070667796, 0.017161973, -0.049451564, -0.11895127, 0.120814934, -0.06945224, 0.08093937, -0.06662269, -0.093743615, 0.008144162, 0.042622767, -0.00012461968, -0.008634068, 0.08888598, -0.04314174, 0.013768458, -0.02636488, 0.033705797, -0.09269511, 0.07824683, -0.09187542, 0.014592316, -0.062370047, 0.1365913, 0.01663584, -0.040040333, -0.0861488, -0.011458684, 0.048122887, 0.032465316, 0.05237309, 0.049886253, -0.1746651, -0.041370995, -0.08842023, 0.05226568, -0.07642823, -0.09195949, 0.016550452, -0.1384587, -0.009834394, -0.08067675},
   {0.031116059, 0.0053233947, -0.051027186, -0.13066724, 0.041561928, 0.06928554, 0.05044877, 0.046750445, -0.08190832, 0.10694799, -0.10406614, -0.064687654, 0.036682025, -0.08698399, -0.042827167, -0.036981225, 0.03795451, 0.03467039, -0.07692063, 0.036342245, 0.011068451, -0.07594879, 0.08814954, -0.08340151, -0.10306068, 0.08803305, 0.09249937, -0.113200754, -0.04721904, 0.10325103, 0.064331345, 0.063005224, 0.054862894, -0.0709261, -0.025095107, -0.018594688, 0.017625589, -0.11890851, 0.046076443, 0.050035913, -0.017233582, -0.10649164, 0.06354855, -0.07687391, 0.005053562, -0.089710146, 0.0035869107, -0.046643347, -0.028028201, 0.0074679903, -0.024409413, 0.033624083, 0.00015880872, 0.10928916, -0.07092291, -0.06202338, -0.029695736, -0.027181406, -0.07427664, -0.02725006, -0.050912306, 0.16247463, -0.106438175, 0.016599977, -0.03300315, -0.13265619, 0.0141386185, -0.021545902, 0.0062932223, -0.011857505, -0.107672006, -0.06736694, -0.005449493, -0.008436211, 0.066324495, 0.08566376, 0.056724142, -0.08787262, -0.010404088, 0.068694666},
   {-0.0860886, -0.10327777, -0.17081206, 0.010299371, 0.047662217, 0.020889916, 0.14054394, 0.05209805, 0.00022625773, 0.06777261, -0.06485303, -0.014576615, -0.18050194, -0.05555935, -0.047421057, 0.0970105, 0.060032394, -0.0067422763, 0.033545397, -0.06651472, -0.021280421, 0.004620169, 0.09237454, 0.07679498, -0.01638554, -0.04063947, -0.123745285, -0.05281421, -0.048459437, 0.04755524, -0.09299935, -0.03207461, 0.04931116, -0.0548601, 0.06019055, -0.15701269, -0.09234899, -0.06943345, 0.0068150517, 0.022851275, 0.09256872, 0.043548588, -0.08606201, -0.08891031, 0.17993404, -0.010997519, -0.076175705, -0.054908983, 0.053649336, -0.023707582, 0.069260605, 0.040327862, 0.021581436, -0.07568321, -0.05888439, -0.014891669, 0.027824448, -0.059838064, -0.015195027, -0.056344062, 0.043921538, 0.1353505, -0.11816938, 0.016930612, -0.05732827, 0.028190069, -0.04770429, 0.038700588, 0.0068391114, -0.10157129, 0.13415363, -0.029778732, 0.08554847, -0.06714587, -0.074274346, -0.070568606, 0.056406755, 0.03013544, -0.069900885, 0.023404537},
   {0.009229425, -0.19208287, -0.16929042, 0.038636364, -0.02318673, 0.23353112, 0.14791757, 0.064001955, -0.051173322, 0.060851894, -0.0876826, -0.05004447, -0.10876497, 0.019638196, -0.24277683, 0.11420283, 0.10996781, 0.085346095, -0.118411615, 0.036269464, -0.17149185, -0.20792602, -0.022373334, 0.054920662, 0.18410468, -0.023636427, -0.18423958, 0.08521705, -0.15824571, 0.13200666, -0.06836366, 0.082672246, -0.012268378, 0.047592755, -0.011428872, -0.055324607, 0.034465864, 0.07101802, -0.014595185, 0.00360668, 0.19252346, -0.046781305, -0.091424346, 0.0115956515, 0.14154989, 0.016235188, -0.05988719, -0.080088735, -0.07061772, 0.036944456, 0.077090956, 0.029445909, 0.016499411, -0.04604009, -0.048155, -0.096917704, -0.0031957463, 0.066379726, 0.0793139, -0.04211047, 0.052097626, 0.11668549, -0.044227347, 0.0059010903, 0.018724993, 0.08172147, -0.045477103, -0.030233568, -0.0021753535, -0.063110046, 0.21011837, 0.027078947, -0.00888341, 0.012459545, -0.027725963, -0.013515942, 0.026376182, 0.24988186, -0.007266834, 0.081489205},
   {-0.010021616, -0.16468859, -0.08359247, 0.008188409, 0.0072952453, 0.1241044, 0.14020525, -0.075175434, -0.012737339, 0.10273975, -0.025178747, -0.04645327, -0.2563281, -0.046076402, -0.25697428, -0.0032430382, 0.09885181, -0.01173421, -0.103521354, 0.06484945, -0.2122154, -0.15624757, 0.060721926, -0.09482679, 0.24151498, 0.04598825, -0.25609145, -0.069682404, -0.1802573, 0.1528018, -0.07555632, -0.06684759, 0.07217717, -0.050619315, 0.06763309, -0.2025342, -0.019902889, 0.07476207, 0.047119852, -0.0005660418, 0.1793836, 0.07789704, -0.26961088, -0.068115756, 0.16482879, -0.07667363, -0.087987535, -0.045537554, 0.016561624, -0.0153440405, -0.08049379, -0.002662316, -0.0709048, 0.017571466, -0.08781964, 0.079000875, 0.057366278, -0.09043379, 0.031580724, -0.1011678, 0.067232855, 0.091275945, -0.03453238, 0.12489713, 0.0167647, 0.007998543, 0.07279794, -0.026399527, 0.008648068, -0.16243275, 0.21178338, -0.053856116, 0.040736213, -0.09876854, 0.07352805, -0.05485567, -0.09733845, 0.18207252, -0.09692365, 0.21439664},
   {0.03148477, -0.22835623, -0.1203782, 0.01837835, 0.107515864, 0.08811094, 0.06393422, 0.078367464, -0.0035150799, -0.0054112496, -0.078028925, -0.090617426, -0.13140306, -0.0055956766, -0.15712848, 0.0899745, 0.049940277, 0.0016065016, -0.035985637, -0.061342448, -0.1072121, -0.05865703, -0.036518823, -0.029838653, 0.18465123, -0.028861556, -0.1718272, -0.077129826, -0.17475733, 0.08842025, 0.055992857, -0.059081793, 0.101141505, 0.06498788, -0.02815927, -0.038760766, -0.056126323, 0.023671668, -0.044347744, -0.013751744, 0.13487855, 0.02167689, -0.17139757, 0.068282574, 0.1781421, -0.03333904, -0.077408835, -0.10013637, 0.01503874, -0.09161877, -0.009480074, -0.054217752, 0.076920114, 0.036478493, -0.032244105, -0.021331465, 0.067379214, 0.078429654, -0.04602927, -0.021114696, -0.085010886, -0.0045049237, -0.055433996, -0.059167247, 0.0040102378, 0.10366084, 0.042014003, 0.08377303, -0.09298843, -0.03185948, 0.18633892, 0.044967577, 0.07999096, 0.01842569, -0.13878804, 0.0020009503, -0.022615615, 0.22621958, -0.08133301, 0.11360107},
   {-0.034856413, 0.10241618, 0.003035989, 0.041334257, -0.035523787, 0.005819134, 0.037129544, 0.027492015, -0.015763555, -0.027807731, 0.15300934, -0.07663517, -0.015773678, -0.032037325, -0.019436952, -0.123243056, 0.014374291, 0.08696436, 0.0652647, 0.008292089, -0.037627142, -0.0088679865, -0.015417635, 0.06966823, 0.05125156, 0.013684708, -0.015297832, 0.011570814, 0.0068147588, 0.10695946, -0.074436314, 0.0072073597, -0.029520385, -0.017111892, 0.027408117, 0.05021337, -0.027446536, -0.090452224, -0.029056748, -0.10793819, 0.0532486, 0.07523778, -0.008606198, 0.08684802, 0.20236862, -0.017025374, -0.05413877, -0.040919345, -0.09212491, -0.0180518, -0.037962228, 0.016326392, -0.061349656, -0.07041324, -0.032906853, -0.029657925, -0.0075492696, -0.0008022772, -0.0060395747, -0.08534622, -0.04212109, -0.03530652, -0.028814958, -0.09678327, -0.049006533, 0.16552465, 0.031114396, -0.07273729, -0.018913224, 0.045165274, -0.04726191, -0.015694745, 0.10721048, 0.023402004, 0.013115928, 0.0885554, 0.016419617, 0.07103512, 0.040130798, -0.08295222},
   {0.015779562, 0.14872123, -0.019285474, 0.1839542, 0.011371083, 0.049462993, 0.060680147, 0.057177503, -0.03349039, -0.052538432, 0.05647896, -0.026722342, -0.08194893, -0.009894192, 0.05227659, -0.059695248, -0.15005726, 0.04183603, 0.10496057, -0.015027321, 0.18121716, -0.050689965, -0.004449442, -0.06264396, 0.0153272515, -0.1273951, -0.013743957, -0.044939447, -0.08611284, 0.10784506, -0.04313349, 0.08222073, 0.06437935, 0.06296152, -0.068463385, -0.0050273673, -0.07385849, -0.0007383596, -0.06436391, -0.1378328, 0.16873626, 0.23725559, -0.061462164, -0.08841702, 0.15304436, -0.00941436, -0.02992966, 0.07975711, 0.011183918, -0.022316964, 0.012951307, -0.06408665, -0.049279466, 0.10227781, 0.07088092, -0.02767507, 0.050015073, -0.0011093043, -0.08395107, 0.026159748, 0.044089384, 0.047403704, 0.07726761, -0.08437754, 0.06444002, 0.059863485, 0.027259668, 0.08449294, 0.073692925, 0.028046861, -0.1307876, -0.024716724, 0.00047999003, -0.09547306, -0.039485708, -0.050473742, 0.0026897884, -0.045146916, 0.032874897, 0.028750984},
   {-0.0409623, 0.25372517, -0.10279823, 0.20720895, 0.13386293, -0.05756661, 0.23175925, -0.084600806, 0.082174525, -0.06824855, 0.10264328, 0.03833194, 0.055089314, 0.03913828, 0.068036586, -0.2925936, -0.20394091, 0.029737629, 0.15289292, 0.084971525, 0.18251643, -0.04991947, -0.006291233, -0.044156823, -0.17201652, -0.109934196, -0.07638861, -0.07490922, 0.097188786, -0.0027919693, 0.023551904, 0.0071686287, 0.02917799, 0.048109617, -0.044659983, 0.13398314, 0.06408475, -0.13239753, 0.04045321, -0.2305014, -0.021534478, 0.25145888, -0.0051984806, 0.07242243, 0.11018095, 0.03434623, -0.07446676, -0.08828929, 0.017685775, -0.07239455, 0.011012383, 0.0041413587, -0.04024724, 0.15769374, -0.068739645, -0.015627103, -0.0011328178, 0.013232794, -0.06272279, 0.018876316, -0.009103484, -0.17371114, 0.13436441, -0.24415337, -0.042212386, 0.2246237, -0.00033616595, 0.041942786, -0.061221763, 0.18061145, -0.16383635, 0.081465244, -0.036115054, 0.079692185, -0.13039228, -0.014650822, -0.03999918, 0.029230399, 0.08231514, -0.18572278},
   {-0.09207334, 0.106278904, -0.15948623, 0.21943061, 0.111759305, -0.06726761, 0.20196047, 0.010985544, 0.02237661, -0.1289249, 0.1621648, 0.0881561, -0.08943724, 0.08679543, 0.087352045, -0.22800203, -0.18014452, 0.06844164, 0.08095613, 0.040848378, 0.2706703, -0.00015033482, -0.029277287, -0.019359965, -0.21386373, -0.23642404, -0.027884547, -0.09060957, -0.038248215, 0.08517975, 0.027048608, 0.0004780807, 0.09840228, 0.08134847, -0.03251516, 0.17850322, -0.034211922, -0.16907807, -0.014574935, -0.19681714, -0.001887738, 0.16799656, 0.075607054, 0.0063203503, 0.08520975, 0.024359249, 0.090130575, 0.0015384684, -0.05071133, 0.036518216, -0.043373805, -0.098246396, 0.052109387, 0.090439096, -0.03871336, 0.037353203, 0.0740156, 0.0017146774, -0.08637186, -0.036995143, 0.01476109, -0.3917946, 0.10916364, -0.2733328, -0.08854387, 0.17157306, 0.023914281, 0.05104915, 0.08420216, 0.1263485, -0.16457304, 0.06804517, 0.15352218, 0.08799831, -0.15679936, 0.031416796, 0.001809271, 0.088682555, 0.0024404651, -0.12989776},
   {-0.054971885, 0.017356455, -0.02147432, 0.20567867, -0.098121226, 0.016488913, 0.07137487, 0.013384709, 0.03445079, -0.093175605, 0.16494973, 0.053574614, -0.099226624, 0.07591846, -0.05352389, -0.08297943, -0.06962194, -0.019009285, 0.037668698, 0.03581496, -0.02143131, 0.0054177805, 0.08607515, 0.0339148, 0.01274565, -0.19553694, -0.03004, -0.04631122, 0.10722459, -0.07920678, -0.07694477, -0.03981872, -0.001927316, 0.0044660517, 0.0069994614, -0.040923085, 0.0601218, 0.07211849, -0.02434786, -0.12720498, 0.048921384, 0.23102938, -0.05645282, 0.016925473, 0.3043819, -0.04560532, 0.041267537, 0.035563603, -0.044428434, -0.098826125, -0.082583755, -0.02025101, -0.022016993, 0.00048758124, -0.07878765, 0.02116275, -0.030871028, -0.038487453, -0.07145736, 0.07904312, 0.037767716, -0.35537612, 0.13658547, -0.12398004, 0.007016368, 0.09674686, 0.06601186, 0.078424275, -0.08622486, -0.013226558, -0.15532216, -0.018924601, 0.067274876, 0.06681107, -0.082006134, -0.06716815, 0.06295664, 0.0026070431, -0.08236343, -0.08413191},
   {0.08839531, -0.034312792, -0.26156318, 0.26071602, 0.052493, 0.21189103, 0.20099498, -0.048867427, 0.0044590533, -0.081104115, 0.078118354, -0.01998498, -0.16221873, 0.054087214, -0.09152056, -0.090383045, -0.10511336, -0.05613431, 0.07623045, -0.043452196, 0.032097425, 0.067219906, -0.01898799, 0.07894936, -0.01978452, -0.22636606, -0.2601038, 0.15954967, -0.0054560155, -0.020800756, -0.014444277, -0.014066443, 0.12862457, 0.061444838, -0.0011531619, -0.14500988, 0.020829687, -0.067441516, -0.08346963, -0.23029397, 0.18223976, 0.18927619, -0.03693087, -0.07401318, -0.722653, -0.05839953, -0.024551332, 0.072870895, 0.022798352, -0.044543784, -0.036258727, -0.016116826, -0.04607889, 0.08342075, -0.009468742, -0.05858196, 0.08001965, 0.059029844, 0.079980455, 0.016340856, 0.07407876, 0.096329056, 0.12701212, -0.10884311, 0.073226966, 0.21701835, 0.049233805, -0.03469068, 0.001395978, -0.045114882, -0.050263517, 0.048630614, -0.06253299, -0.037915777, 0.14479005, 0.030967481, -0.0052412497, 0.12862326, -0.0341744, -0.07002394},
   {0.012834227, 0.1597156, -0.19965154, 0.24551496, 0.0363652, 0.022889555, 0.20959103, -0.05231284, 0.080246076, -0.07217892, 0.1314115, -0.10050811, -0.07635225, -0.034884572, 0.10480345, -0.14666152, -0.17912766, 0.06928744, 0.26600862, 0.012203212, 0.07277846, -0.06031937, -0.060295656, -0.018847331, -0.15071847, -0.2616671, -0.0041294997, -0.036676247, 0.08467984, -0.1863651, 0.06079934, -0.024020895, 0.062281452, 0.012296487, -0.06256474, -0.08667768, -0.08179678, -0.036038503, -0.07290536, -0.15625192, 0.016421026, 0.2633122, 0.032244857, 1.8049845e-05, -0.77461344, -0.017018534, -0.06510614, 0.013237795, -0.011335066, -0.015590664, 0.00797385, 0.037216116, 0.006074702, 0.1251696, -0.042001344, -0.0027670972, -0.08813258, 0.03195135, 0.014250219, -0.047285624, -0.055035368, 0.062392723, 0.25913954, -0.23459971, -0.052948393, 0.28336555, -0.033362832, -0.01232698, -0.09268442, 0.1315143, -0.023701917, 0.0064198324, -0.123135686, -0.078825735, 0.14841807, 0.037980564, 0.07597672, 0.100491665, 0.041714523, -0.16659728},
   {-0.093337, 0.14598423, -0.1132809, 0.1816186, -0.027810248, 0.04000784, 0.1483526, -0.02951189, -0.03881051, 0.032064475, 0.10986989, -0.0981647, 0.065200865, -0.06982574, 0.115472026, -0.13155317, -0.12233609, 0.04173561, 0.011063907, 0.057094973, 0.17246187, -0.07417039, -0.018446818, -0.044873957, -0.14792314, -0.12531959, -0.068995796, 0.043196425, -0.065010786, -0.053541403, 0.07976842, -0.04324104, 0.047209937, 0.08804047, -0.09226702, 0.07906928, -0.07068409, -0.18668261, 0.08108662, -0.24406365, -0.05131542, 0.24114035, 0.010093381, 0.034147587, -0.60118634, 0.07361343, -0.047887024, -0.045795765, -0.060104314, 0.07543323, 0.057487212, 0.022287114, 0.01409272, 0.053936932, -0.10029642, 0.029735893, -0.006060127, 0.08622124, -0.058325835, -0.0366972, -0.025240324, 0.11718275, 0.02022118, -0.1671798, -0.024956062, 0.16915083, 0.00078363053, 0.044394687, 0.01740627, 0.20986322, -0.15699068, 0.004997872, -0.3356526, 0.042327967, -0.08650454, 0.03665311, 0.0213896, -0.057415146, 0.08550046, 0.004522051},
   {-0.08289663, 0.16637838, -0.097311206, 0.14358257, 0.11901645, -0.058597337, 0.13582861, 0.033240486, 0.08222366, 0.05935972, -0.011599568, 0.07421575, -0.09831482, -0.07516487, -0.06767637, -0.06705754, -0.027965091, 0.08566531, -0.029947452, -0.012016521, 0.029957918, -0.12278596, -0.0441901, 0.060599558, 0.039954096, -0.15315253, 0.07058512, 0.04655085, 0.040067933, -0.07176392, -0.023961846, -0.068550795, 0.11253111, 0.06368769, -0.09419923, 0.09438171, -0.01133343, 0.006984496, 0.04352095, -0.16897608, -0.009010859, 0.12922275, 0.057820097, -0.06858155, -0.40037644, -0.048132416, 0.078200005, 0.02576159, 0.07935799, -0.090448216, -0.050619148, -0.06577363, -0.069502234, 0.0007999979, -0.061786015, -0.022501541, -0.008636614, -0.086021416, 0.04497894, -0.022592505, -0.0934604, 0.1539153, -0.030669007, -0.17515965, 0.071091555, 0.10281312, 0.044917114, 0.059278384, -0.089878395, -0.0074534295, -0.042467084, 0.031880658, -0.25112015, -0.03932929, 0.07091847, -0.043189112, 0.030439854, 0.08525659, -0.07838118, -0.056398533},
   {-0.07992749, 0.011577081, -0.14346468, 0.0126062725, -0.011468879, 0.028351905, 0.12052288, 0.030210944, 0.06979574, 0.0034628587, 0.0932639, -0.07886792, -0.1255483, 0.095166795, -0.10116954, -0.013882878, 0.0760714, -0.055099167, -0.07038407, -0.089962035, 0.07292239, -0.1002502, -0.002096489, 0.03429832, 0.095778696, -0.026245747, -0.05806676, 0.008095502, 0.043153096, -0.005749274, -0.018898517, -0.06060994, 0.11103039, 0.06143945, -0.020878423, -0.018067587, 0.052919276, -0.075227804, 0.065083444, -0.088145815, 0.09383307, 0.004124509, -0.09996796, 0.022521242, -0.16489998, -0.004248403, 0.048857935, 0.018803129, -0.053826094, -0.02769317, -0.014791645, 0.060705062, 0.01635113, 0.040933352, 0.07442914, -0.018263482, 0.040101726, 0.06716521, -0.072092295, -0.09479623, -0.08797358, 0.08951448, 0.09029054, -0.13549098, 0.062020026, 0.11684127, -0.014469188, -0.0010021047, 0.03251458, -0.018638778, -0.029857483, -0.0067100045, 0.03069004, 0.0849606, -0.061829314, 0.03202366, -0.0074327425, -0.017255865, -0.098232806, -0.047206152},
   {-0.048170153, -0.20250995, 0.011919599, -0.010497604, 0.08231322, 0.08914229, 0.085795395, -0.07150496, -0.06677733, 0.11851142, -0.024332125, -0.017412586, -0.0772422, 0.015997455, -0.18643482, 0.16166884, 0.062544286, -0.06938503, -0.07711136, -0.053412016, -0.07125174, -0.055193514, -0.04317689, -0.00030180035, 0.09102833, 0.09435098, -0.2128471, 0.035301335, -0.1478051, 0.15703726, 0.012113197, -0.07542311, 0.013429602, 0.06841385, -0.05480491, -0.10796001, 0.039330557, 0.08361396, 0.08474249, 0.11200738, 0.21475294, 0.037676446, -0.17702538, -0.08642931, -0.058293752, -0.08986583, 0.040750034, -0.06878236, -0.035711147, -0.0013192856, -0.06879189, 0.008997937, 0.007616103, -0.016015396, 0.060677834, -0.015271056, -0.033870947, 0.020220473, -0.01199916, 0.059219826, -0.083649024, 0.2063903, -0.11366508, -0.0040062256, 0.049119286, 0.041081693, 0.028348936, -0.058712423, 0.051968656, -0.14823039, 0.09002947, 0.036633242, -0.09759937, -0.010239986, -0.0031357, -0.0022191778, -0.0559395, 0.21161315, 0.0041794786, 0.047382534},
   {0.062138338, -0.33047876, -0.11487433, -0.044419445, 0.027645027, 0.095936805, 0.07727148, -0.050340194, 0.0063556936, 0.114555165, -0.119844966, 0.082435966, -0.17876263, -0.072167814, -0.15978573, 0.10650668, 0.046295367, 0.06640742, -0.08155795, 0.06767609, -0.21962124, -0.14797853, 0.06881987, 0.055071697, 0.14554441, -0.032132875, -0.25993586, 0.04914633, -0.07802014, 0.1619709, 0.07751535, -0.05664117, 0.09230807, 0.07674678, -0.08327059, -0.23554978, 0.03298107, 0.09708641, 0.04729961, 0.106197596, 0.34672725, 0.03451467, -0.107744664, -0.0016079323, 0.2111166, 0.018174753, -0.050191756, -0.017615233, 0.08372674, -0.011269156, 0.040141158, 0.06521866, -0.043095592, -0.0060761524, 0.0043338533, -0.07123238, -0.07755434, 0.075167045, 0.023143657, -0.055816602, -0.07869473, 0.047189802, -0.12826014, 0.12356878, -0.06566161, 0.07991724, 0.002806071, -0.015547086, 0.04721149, -0.21645075, 0.15988915, -0.014543311, -0.00891323, 0.0065597435, 0.07359498, 0.011775069, 0.01922784, 0.3120188, 0.0019226298, 0.1665977},
   {-0.00916634, -0.21056555, -0.0037052436, -0.07209257, 0.037572302, 0.18329296, 0.061253794, -0.08039002, 0.058593668, 0.03428678, -0.16863681, 0.06037935, -0.21933949, -0.004669957, -0.20720027, 0.16977301, 0.10657239, 0.0066099763, -0.22346623, 0.07392715, -0.08432483, -0.21228799, -0.056338247, -0.04943166, 0.25445297, 0.0062728273, -0.11548394, -0.08232941, -0.14646831, 0.060442064, -0.078612804, 0.047800425, 0.04971576, -0.036240347, 0.076474555, -0.22249044, 0.08795997, 0.08689243, 0.08525981, 0.20728378, 0.27491572, -0.11620906, -0.109493405, 0.08713407, 0.18170376, 0.07010617, 0.05977138, -0.05602228, 0.031366378, -0.040161353, -0.074657924, -0.08373854, -0.004504919, -0.07458791, 0.053267054, -0.087624975, 0.011831836, 0.022622462, -0.012882337, 0.0629081, -0.0645836, 0.14965433, -0.09151817, 0.00702241, 0.02426041, 0.0035961275, -0.05508871, -0.0998333, -0.046513643, -0.1373205, 0.14202963, 0.06893656, 0.07072547, -0.058694776, 0.093700126, 0.036563195, -0.09769204, 0.1918974, 0.033207547, 0.21862543},
   {-0.024960672, -0.19204302, -0.17717542, -0.107413314, 0.025594464, 0.0534601, 0.062469583, -0.02576824, 0.0851451, 0.010430802, -0.12224006, 0.05601211, -0.02096599, 0.04075869, -0.13264762, 0.059641413, 0.16435418, 0.009094045, -0.07773369, 0.032569274, -0.012312589, -0.11448272, -0.079735, -0.061063252, 0.002011245, -0.031425875, -0.0047159386, -0.035406284, -0.053874474, 0.009846155, -0.051051214, -0.02801483, 0.07115394, -0.028804528, -0.040650703, -0.1576188, 0.07830074, -0.08987133, 0.051479686, 0.068511, 0.021507092, -0.07603941, 0.007180196, -0.083911374, 0.07003157, 0.031106241, 0.011905655, -0.02597804, 0.00960695, -0.07647467, -0.033535816, -0.06852263, -0.037502263, -0.08223741, -0.050003722, -0.037763596, -0.05060242, 0.010162574, 0.027255252, 0.06845488, 0.040011786, 0.12889299, 0.05037281, -0.04225889, -0.023588836, -0.056144755, 0.04757963, -0.05922219, 0.06413158, -0.021733675, 0.059753593, 0.0011172324, -0.04200385, -0.021961734, -0.0241086, 0.023114085, 0.03275117, 0.12855276, -0.026361784, 0.13013816},
   {-0.0055329297, 0.042140976, -0.098773725, -0.0941457, -0.027496235, -0.014517916, -0.09520164, 0.025705624, -0.011223894, 0.05229512, -0.049952507, 0.048027497, 0.047051363, 0.07175102, 0.03414593, 0.105624765, 0.04699394, -0.07169897, -0.058549732, 0.08554206, -0.0539698, -0.12845013, -0.029237047, 0.08121704, -0.034662735, 0.07049125, 0.10287309, 0.030153096, 0.017632278, -0.04422405, 0.004831626, 0.03453443, 0.012282381, -0.068646215, -0.017207386, 0.069301456, 0.028802013, 0.005845572, 0.006651534, 0.014842505, 0.0019079153, 0.0012875625, 0.02366862, -0.036160257, 0.1048839, 0.03566552, 0.0075651333, 0.04712747, 0.062164083, 0.03035449, 0.0706769, 0.013879858, 0.021326171, -0.001458794, 0.007689471, -0.098050855, -0.07750919, -0.069587365, -0.0104613155, 0.026624259, -0.025707304, 0.018800324, -0.039642397, -0.09467873, 0.071188815, -0.13963827, 0.02679034, -0.02995715, -0.007058941, 0.082275726, -0.010554083, -0.015797291, -0.057398725, -0.08165075, 0.008048981, -0.073988155, 0.029902162, -0.056206875, -0.07431121, 0.03833669},
   {-0.039288808, 0.015849711, -0.024224937, -0.045602027, 0.070518464, -0.062872894, -0.02876716, -0.09584019, -0.087897524, -0.02884494, -0.0018572122, 0.08913101, 0.0961749, -0.038839016, 0.027170131, 0.08890996, 0.06982151, -0.0843472, 0.04831596, -0.024410017, 0.13279171, 0.037460245, 0.058924563, 0.0780201, -0.12358427, -0.013380046, 0.11335203, -0.009422395, -0.09026222, 0.11607468, 0.01803407, -0.07845696, 0.06389747, -0.08931168, -0.02453361, 0.00016804237, 0.0011914324, -0.0571078, 0.027499208, 6.22862e-05, -0.042569615, -0.031107165, 0.09117378, -0.021650689, 0.12513861, 0.059119232, -0.043548465, 0.07354314, -0.043957043, 0.02483555, 0.06507129, -0.0008577274, 0.035285775, 0.040733326, 0.07814887, 0.06637843, -0.100467935, 0.056405246, 0.004552372, -0.06959102, -0.048845258, 0.16182077, 0.026437426, -0.06390343, 0.008612886, -0.14617676, 0.052890915, -0.0041293637, -0.056761056, 0.085902505, -0.1498869, -0.023166532, -0.12186305, 0.08650224, 0.024047203, -0.004935026, 0.041521963, -0.0931352, 0.058450926, 0.03244078},
   {0.08359341, 0.14903405, -0.0735554, -0.015833182, 0.038810484, -0.07566082, -0.0068420987, -0.04204593, -0.0033994676, 0.015046325, -0.019487288, -0.0146558285, 0.11056616, 0.09357, 0.07377138, 0.0876717, -0.018204622, 0.0113896355, 0.083366826, 0.07792714, 0.07199942, -0.019625764, -0.07143007, -0.0015249541, -0.01582781, 0.09279854, 0.12294575, -0.021145526, -0.069066495, 0.004087046, 0.028158166, 0.013583998, 0.09477427, 0.079781875, 0.02452792, 0.113611415, -0.08586815, -0.07115065, -0.0038578, -0.0755967, -0.05185021, -0.14836513, -0.038444087, -0.029259367, 0.07321782, -0.089861594, -0.049674436, 0.021341678, -0.049381927, 0.0011719863, -0.050029248, -0.014331393, -0.027942326, 0.036337182, 0.041081745, -0.09781004, 0.038998317, 0.017647004, -0.0030504987, -0.079939306, -0.0045673475, 0.12368924, 0.022458818, -0.053323787, 0.03506618, -0.09505034, -0.032304145, -0.1014233, 0.0012206361, 0.09680141, -0.06391582, -0.017809356, -0.10209549, 0.018523814, -0.118942924, -0.044919245, 0.06685438, -0.25379452, -0.06401537, -0.10285204},
   {0.024806535, 0.13295978, -0.058679435, 0.02658936, 0.12947847, -0.10733091, -0.02117487, -0.07330253, -0.096723825, -0.005243914, -0.09643962, 0.03276731, 0.16613998, 0.04176507, -0.09453107, 0.04776076, 0.05615759, -0.046552885, -0.042384673, -0.087199554, 0.04973659, -0.025965335, -0.046250466, 0.012470251, -0.030166043, 0.062236015, 0.19971158, -0.06210586, -0.0122537995, 0.06322092, -0.07654366, -0.09040145, 0.047491837, -0.0512922, -0.029377654, 0.20462564, -0.04896506, -0.22325684, -0.0283934, -0.10042614, -0.18228576, -0.06938866, 0.013224151, 0.056929607, 0.11704692, 0.011595003, 0.04433482, -0.0892122, 0.059750743, -0.06793905, -0.047151286, -0.029247548, 0.0012929881, 0.090867616, 0.07048673, -0.05539952, 0.07970615, -0.06968614, 0.0043182224, -0.031581484, -0.023363099, 0.087021865, 0.014633627, -0.06909043, 0.043184303, -0.15463488, 0.015836358, -0.0068750074, -0.04092164, 0.06574333, -0.118641816, -0.052911725, -0.16637546, 0.005551366, -0.061658155, 0.0019305572, -0.040023644, -0.23694393, 0.06975164, -0.09189537},
   {-0.018644061, 0.015131392, -0.083609894, -0.035670593, 0.011477129, -0.07536046, -0.07426897, -0.0007345891, 0.04616664, 0.12513739, -0.039624117, 0.019002482, 0.069229335, 0.048451312, -0.06484348, 0.120008014, 0.083609685, -0.07119198, -0.0839755, 0.06238012, 0.103769116, -0.08708046, 0.021588825, -0.083830826, -0.1660005, 0.14721525, 0.22465919, -0.081830665, -0.08523058, 0.0021366612, -0.05291028, 0.0176223, 0.10394287, -0.021216612, -0.008136223, -0.008989166, 0.022922501, -0.06831189, -0.025399273, -0.06999311, -0.021642258, -0.048761364, 0.04978542, 0.060891278, 0.100146204, 0.05103437, 0.0012261719, -0.085301846, 0.08074154, 0.036949843, -0.06784444, 0.01693876, 0.020051485, 0.018006245, -0.046266843, 0.050861813, 0.006897946, -0.017800584, -0.076608956, 0.08968806, 0.01085145, 0.106770195, 0.022933673, 0.019326758, 0.06964136, -0.07544674, -0.08931891, -0.035121325, -0.02857922, 0.05262126, -0.1702264, -0.030034183, -0.12264491, 0.04263102, 0.08004269, 0.04344199, -0.096971616, -0.15018044, 0.026822694, -0.10450754},
   {-0.08482911, 0.014890286, -0.17125078, -0.1158499, 0.10094025, 0.067720555, -0.038811956, 0.08774095, -0.012490498, 0.12725547, -0.100433305, -0.08375724, 0.033852793, -0.075103015, 0.040243056, 0.0957371, 0.06883261, 0.03946688, 0.088103004, -0.073867135, 0.06729737, -0.10582289, -0.0005615577, -0.017276864, 0.01908497, 0.009558009, 0.06697163, -0.123324454, -0.075202115, -0.05901178, 0.0011477033, 0.0013933339, -0.050497543, -0.036231797, -0.063446574, -0.006079984, -0.015329454, -0.1312393, -0.008375964, -0.0031846701, -0.07374978, -0.066981584, 0.01013977, -0.10089632, 0.06973854, -0.05866457, -0.092135675, -0.021194348, 0.08323872, -0.03371815, 0.023444384, 0.010147857, -0.05730137, -0.03176706, 0.0019441306, 0.035779137, -0.060414307, -0.027239582, 0.037389524, 0.05823466, -0.053784616, 0.030294834, -0.055341177, -0.0024694277, -0.07833047, -0.15939407, 0.05101061, -0.09902095, 0.0035670921, 0.020462135, -0.13473776, 0.08087328, -0.07310951, 0.071436495, 0.049687732, 0.0135103315, 0.06905004, -0.15925373, -0.019289276, -0.05009963},
   {0.019914147, 0.12507252, -0.18600938, -0.029674921, 0.07118908, -0.02071783, -0.03481682, 0.060011357, 0.074306674, 0.13622889, 0.021743525, -0.040709496, -0.051354516, 0.033867188, 0.03946694, 0.08190936, -0.013280927, 0.01719091, -0.07836528, -0.09236138, 0.019272126, 0.03389441, 0.059280626, 0.03983458, -0.10562967, -0.010754104, -0.0004922445, -0.036796957, -0.12707876, 0.0051638894, 0.033255216, -0.048302103, -0.03537385, 0.074851595, -0.01734325, 0.057503775, -0.025211163, -0.07253337, 0.0410994, 0.0037964543, -0.14550298, 0.062033255, 0.086637236, -0.098043576, -0.049167696, -0.029358461, -0.077708066, -0.026440384, -0.025782514, 0.030382428, -0.050627016, -0.067144975, 0.0091474075, 0.10513485, 0.069721654, 0.03667172, 0.08833411, 0.019924495, -0.07229468, 0.07901208, 0.033154167, 0.08419752, -0.01693236, 0.03094537, -0.06321779, -0.008035056, -0.058947578, 0.08032164, -0.011231661, 0.1033869, -0.08161132, -0.012630809, -0.05488802, 0.081312515, 0.012526539, 0.06298045, -0.09542179, 0.008000976, -0.020894028, 0.0106265815},
   {-0.09854893, 0.15525414, -0.17625195, -0.061450757, 0.08701204, 0.047700208, 0.005380884, 0.022015307, 0.016748354, -0.0013165665, -0.11026611, 0.033793926, -0.018994883, 0.07443661, 0.059768245, -0.04336032, 0.092545345, 0.052887984, 0.012380572, -0.03486088, 0.10955565, 0.01998315, 0.05721242, -0.080886215, -0.09200895, 0.017414944, 0.17053054, -0.09386715, 0.01113993, 0.085270934, -0.062407423, -0.077371135, 0.11146479, -0.062785245, 0.05613318, -0.0026777282, 0.004229477, -0.14327869, -0.08056865, -0.041037936, 0.027129544, 0.06658137, -0.044623856, 0.05066096, 0.026483268, -0.05472732, 0.08731309, -0.097842894, 0.07206587, 0.056913853, 0.0026681647, -0.012141286, 0.06434862, -0.029016148, -0.03078813, -0.07045983, -0.051267445, -0.08643804, 0.085490786, -0.09012145, 0.040675975, -0.03005661, 0.0155512765, -0.024961175, 0.004964143, -0.12468548, 0.04768533, -0.0020920297, 0.009823464, -0.05749302, -0.080396086, -0.019993514, -0.0076217595, -0.014318319, 0.034690164, -0.0924694, 0.013057655, -0.10294993, 0.069528654, -0.021970153},
   {0.00901701, 0.026114402, -0.13013455, -0.11785121, -0.05888347, -0.09922428, -0.012918916, 0.074088216, -0.05194304, 0.036632504, -0.08083046, -0.09708126, -0.01630571, 0.041808225, 0.03324779, -0.054488286, -0.006951467, -0.052620985, -0.062241875, -0.09909342, 0.066571414, 0.028605863, -0.030200891, 0.0042949026, -0.08129261, -0.014612786, 0.1665775, 0.032604013, 0.035927292, 0.056796934, 0.0806597, 0.08007857, 0.05697157, 0.009091993, 0.049516227, -0.019923251, 0.057191312, -0.12953055, -0.060144458, -0.12123342, -0.08444498, 0.012186126, 0.0200969, -0.0947651, 0.018507915, -0.08572241, -0.05322167, 0.0056988513, -0.071780734, -0.009587746, 0.07857347, 0.07253965, -0.093840875, 0.13325909, -0.07797641, 0.08444921, -0.08879156, 0.06310479, 0.048001535, -0.027123112, 0.0009659603, 0.14712806, 0.0051192497, -0.07911108, 0.009979725, -0.15085584, -0.08600242, 0.07940911, -0.023423292, 0.07165852, 0.039157234, -0.010032313, -0.12167155, -0.058739703, -0.045686226, 0.019324906, 0.077979594, -0.06093276, 0.08904862, -0.029987931},
   {0.06796462, 0.10413293, -0.124814615, 0.05366707, -0.015797859, -0.03621195, -0.12874249, -0.094808854, -0.07503548, 0.13080901, -0.15844497, -0.0010739982, 0.13672504, -0.03625843, -0.07754893, -0.032667674, 0.05998428, -0.029068314, 0.07262668, 0.081043534, 0.07951729, -0.12011439, -0.09289721, -0.047391832, -0.018496133, 0.11610784, 0.15225036, -0.02915156, 0.019107407, 0.036945254, -0.09967025, -0.06505499, -0.010220572, 0.0044148876, -0.099553056, 0.09957187, -0.09760036, -0.07818297, -0.010399444, -0.08431947, -0.18653564, -0.12677316, 0.108860895, 0.08275237, -0.06598964, 0.023672923, 0.06029331, -0.07274021, -8.031163e-05, 0.062305503, 0.07511122, -0.0666048, -0.024576936, 0.064078316, 0.027832115, -0.04126094, -0.02828786, -0.065858446, 0.05848057, 0.04671106, -0.008919023, 0.133548, -0.024563031, -0.01082235, 0.0048135594, -0.0100097675, 0.029637944, -0.06638823, -0.05850599, 0.07539619, -0.06694795, -0.059396815, -0.08504391, -0.022730215, -0.0056303567, -0.0017560571, -0.05436959, -0.133146, -0.0026054925, -0.08620835},
   {-0.062344477, 0.102844335, -0.11318537, 0.036780108, 0.039960373, -0.0413606, -0.111321904, -0.014425743, 0.05834121, 0.058387864, -0.13942459, 0.03866703, 0.10314065, -0.03761813, 0.039765693, 0.06601012, -0.011802987, 0.03700707, 0.006339388, 0.022593664, 0.19196935, -0.17255096, -0.008930743, 0.08312545, -0.015040268, -0.0144015765, 0.15926734, -0.054266218, 0.01852726, 0.08043911, 0.046816636, 0.0495029, 0.0076976917, -0.09487517, 0.08807305, 0.1456546, -0.05108751, -0.080585666, -0.0741415, 0.0053159073, -0.16132027, -0.04043113, 0.12665577, -0.044580385, 0.100438066, 0.012334436, -0.04236525, -0.0032038272, 0.020061882, 0.07484418, 0.04648619, -0.083282664, -0.053769562, 0.060071055, -0.07012096, 0.011460502, -0.101540156, 0.081121035, -0.085858464, 0.080753885, 0.08873021, 0.15309152, -0.04827882, -0.044241056, -0.014815651, -0.18689802, 0.053932447, -0.07698806, -0.04671726, 0.12216197, -0.048962776, 0.05804926, -0.08451258, 0.037851274, 0.036023688, -0.0670159, 0.074804306, -0.26357254, -0.03383288, 0.0060824007},
   {-0.055456948, 0.0579684, -0.053431176, -0.08246904, 0.12962732, -0.069607, -0.11800188, -0.023436751, 0.043884948, 0.045656286, -0.1408096, -0.05673356, 0.12015956, 0.02739986, 0.05052693, -0.061316814, 0.1104179, 0.08587477, 0.056644298, -0.09077408, 0.039797876, -0.10393595, -0.092753895, -0.032149397, -0.06628767, 0.07375348, 0.20270394, -0.13980614, -0.08201836, 0.056154314, -0.093078025, -0.056203306, 0.018599456, 0.017021498, -0.052701395, 0.18323496, 0.070008986, -0.046279207, -0.051970266, -0.050396107, -0.024265826, -0.004549643, -0.013997009, -0.07119722, -0.015009087, 0.062939264, -0.08547376, 0.02537781, 0.005434043, -0.06058251, -0.0020044148, 0.006270334, 0.016302306, 0.1638021, -0.043495458, 0.014376558, 0.08778898, 0.02461027, 0.04492394, 0.07174563, 0.008128129, 0.024031164, -0.10737313, -0.040226556, 0.012077302, -0.15725425, -0.10013975, -0.08391154, 0.063684694, 0.03551223, -0.2129219, -0.08629157, -0.16048115, 0.0050696395, -0.05846381, -0.025654607, -0.023184087, -0.21682204, -0.075607985, -0.0760295},
   {0.04638485, 0.056616053, -0.066398226, 0.034348827, -0.012975358, -0.09077229, -0.11990645, 0.07335224, -0.01248281, 0.058619786, 0.01915427, 0.020027606, 0.1750908, 0.028561667, -0.055301726, -0.028503738, 0.0069361795, -0.024927966, -0.075188614, -0.091274075, 0.0061142407, -0.14409712, -0.09013852, 0.08882026, -0.011877497, -0.0062332656, 0.19973215, -0.0662584, 0.061833877, 0.1144893, -0.06418193, -0.10072817, -0.009857985, -0.004132737, 0.018314114, 0.17447796, -0.06644653, -0.18097603, -0.08053447, -0.13141307, -0.11228625, -0.028874598, 0.022579825, 0.063144356, 0.013172186, 0.08471399, 0.08403892, -0.06848043, -0.030673577, 0.05428921, 0.06769251, -0.018160725, -0.044375084, 0.05763057, -0.013231718, 0.06463336, -0.025241459, -0.05086578, -0.047879774, -0.092634484, -0.080948725, 0.2309097, -0.045553286, -0.04399772, -0.0411256, -0.0019792502, -0.075448595, -0.07016961, -0.067973725, 0.08016127, -0.02373002, -0.028441446, -0.09632363, -0.08831924, 0.015690539, 0.050493695, 0.032891113, -0.15621394, 0.088406175, -0.07587005},
   {0.065701984, -0.06675305, -0.11802705, 0.04055907, 0.022298532, 0.036452897, -0.03260166, -0.0010429207, -0.054100737, 0.044506885, -0.03714195, -0.05311106, 0.11508422, 0.01884573, 0.03448092, 0.031542927, 0.009744842, -0.020238012, -0.039442226, 0.036666952, 0.10572572, -0.12569694, 0.07642829, -0.0810581, -0.02851989, 0.0032384212, 0.02413072, -0.07300045, -0.13022186, 0.012884855, -0.07368576, -0.05385756, 0.052434854, -0.0099377725, -0.032988314, 0.12329645, 0.055098835, -0.09459505, 0.0326793, 0.079526074, -0.09358005, 0.0029773468, -0.0051031867, 0.008210956, 0.16421592, 0.028494403, 0.031193323, -0.03346932, 0.07340354, -0.06723003, 0.087070815, -0.032769408, -0.041888613, 0.08110321, 0.042610075, 0.012507647, 0.037294086, -0.07779827, 0.017167725, 0.05288597, -0.091464564, 0.21801095, -0.0817077, -0.071962275, 0.09098456, -0.078606464, -0.07621727, 0.0062435446, -0.011739343, 0.07573795, -0.049124114, 0.076718785, -0.059545834, -0.06562866, -0.068490334, -0.026263587, -0.023380049, -0.06897021, -0.030507788, -0.075272374},
   {-0.043161783, -0.054846995, -0.12815055, -0.092427194, 0.088737346, 0.0035079448, 3.3099743e-05, -0.036111817, 0.056012932, 0.07655974, -0.112103574, 0.018323926, -0.034858547, 0.0536829, -0.18420652, 0.08761353, -0.01309769, -0.05670745, -0.09165594, -0.017545762, -0.09142651, 0.009220917, 0.021732584, 0.07806219, 0.00092702534, 0.1007536, 0.0049802368, -0.052547373, -0.005838401, 0.03975679, 0.08216452, 0.053458825, -0.030249668, -0.078719206, -0.08006394, -0.05825898, -0.00802181, -0.044005055, 0.0023446921, 0.02691993, 0.02706076, -0.012900956, -0.009809535, -0.05205889, 0.06863123, 0.039907612, 0.08206489, -0.0016649726, 0.020812914, 0.081012525, -0.058613863, 0.0070012608, -0.033007756, 0.043846678, -0.025628917, 0.023651885, 0.07811776, 0.030481955, 0.0170969, -0.043033153, -0.037712917, 0.28330716, -0.07988415, 0.0867274, 0.012339272, -0.021568593, -0.09861969, -0.042653237, -0.002220638, -0.045291167, 0.1617226, 0.06587603, 0.09790357, -0.03572208, 0.062175523, 0.052622177, 0.08606354, 0.102313235, 0.049696222, 0.020845495},
   {-0.08737412, -0.14241576, -0.08463938, -0.117776945, 0.09056683, 0.16302866, 0.09497575, 0.0010100103, 0.07111873, 0.10273852, -0.15077968, 0.0565402, -0.2460598, 0.05418084, -0.15421718, 0.059289377, 0.16589743, 0.01903715, -0.23239322, 0.042477623, -0.17011127, -0.08899222, -0.023715474, -0.047300898, 0.09828207, -0.024485331, -0.14433213, -0.026176894, -0.07437073, 0.09885676, -0.0982584, -0.013383257, 0.074267834, -0.04558178, -0.004775012, -0.10224145, -0.07938559, 0.020062305, -0.0050170342, 0.10903456, 0.23101392, -0.10097817, -0.10089175, 0.017705113, 0.16004086, -0.044261742, -0.053784933, 0.050448045, 0.049676936, -0.06858808, 0.014210455, 0.006643182, -0.058900345, 0.011733841, -0.07408071, 0.040143993, 0.030840928, 0.03385604, -0.086217634, -0.021321189, 0.09270077, 0.28078455, -0.18534584, 0.0829133, 0.0024217963, 0.035416264, -0.07951548, -0.08126649, -0.00569354, -0.189085, 0.24434918, 0.045160882, 0.0022527198, 0.0586004, 0.08641374, -0.002748929, 0.090433136, 0.28103843, -0.060727697, 0.07677362},
   {0.048908234, -0.32159144, -0.06562015, -0.10639311, 0.0037730664, 0.081091374, 0.17630376, -0.029672895, 0.01073611, 0.11620733, -0.053363457, 0.0021228276, -0.24955499, 0.023676097, -0.08605353, 0.13236184, 0.021530032, 0.083365984, -0.21606107, 0.04374231, -0.13194306, -0.11331607, -0.0898742, -0.0732169, 0.15874629, 0.062473606, -0.16461085, -0.0054622544, -0.12396993, 0.12340975, -0.040185146, -0.042977065, 0.1046791, 0.03819753, 0.040797286, -0.06262549, -0.012464724, 0.07886903, 0.021447727, 0.031124726, 0.274792, -0.09031786, -0.24850033, -0.02466385, 0.13967186, -0.024848051, 0.095340915, -0.07500991, 0.059136562, 0.06872785, -0.05874757, 0.023886174, 0.03176655, 0.022328353, -0.00092459307, -0.05388422, 0.045117375, 0.06866038, 0.054892518, 0.07330121, -0.048641823, 0.21560362, -0.03619148, 0.17787808, -0.09456805, -0.08429849, 0.065594696, -0.07028883, 0.033220194, -0.20594834, 0.09381733, 0.06098307, 0.022614408, 0.0751899, 0.06782937, -0.062302466, 0.042663332, 0.13115914, 0.041050985, 0.21665603},
   {0.07780032, -0.17393827, -0.10354538, -0.101308905, 0.11560057, 0.10601275, 0.11743719, -0.052083004, -0.045953616, 0.11608094, -0.013321831, -0.053751636, -0.20168075, 0.019467458, -0.10171152, 0.120141365, 0.11218369, -0.015065081, -0.20457882, -0.049917858, -0.09887179, -0.064398445, 0.042636998, 0.028691633, 0.22962369, -0.04444536, -0.12651888, -0.064025916, -0.15302448, 0.12842256, 0.046909884, 0.051497415, -0.05279897, 0.038977, 0.072246075, -0.0489329, -0.062279653, 0.11652191, 0.06014404, -0.023682814, 0.17386419, -0.036128145, -0.12565283, -0.023738189, 0.08291042, -0.07042765, -0.06914828, 0.059907712, -0.054235786, -0.072540544, -0.047380693, -0.037618425, 0.0059088357, -0.064363725, 0.051666055, -0.022388492, 0.06442912, -0.09169693, 0.034614347, -0.08166251, -0.06557749, 0.16722427, 0.0037464446, 0.015282293, -0.08182533, -0.060687594, 0.018936269, -0.09440631, 0.0055021197, -0.10228159, 0.042907547, 0.026647432, -0.041884687, 0.013019899, -0.0074551487, 0.043411158, 0.06809087, 0.19493243, -0.021214088, 0.15477204},
   {-0.034769055, 0.06259268, -0.03488378, 0.051214255, 0.015735129, 0.081200354, -0.014245472, -0.018769445, 0.02390444, 0.047372356, -0.031794712, -0.012826201, 0.04163102, -0.09030782, -0.09495027, -0.03084524, -0.09731244, 0.032802813, 0.013019111, 0.078617424, -0.06786862, -0.022173386, 0.051251523, 0.02846846, 0.04068883, -0.029925112, -0.024143541, 0.02381946, -0.045053292, 0.027301364, 0.035271045, -0.05515132, 0.044182017, 0.061738044, -0.011739848, 0.02276668, 0.08308892, 0.037905555, 0.06511566, -0.14916912, 0.1275211, -0.012166867, 0.04418561, -0.008952889, 0.11879501, 0.039364584, -0.053412814, -0.048122928, -0.06958349, 0.014722656, -0.03228522, 0.004446146, -0.024995025, -0.057009198, -0.025156364, 0.01432384, -0.021487758, 0.018699389, 0.03301049, -0.0797808, 0.08092082, -0.008711507, -0.09873465, -0.0643714, 0.06467294, 0.061100118, 0.066534415, -0.024141362, -0.08771444, 0.046410102, 0.037777502, -0.07805708, -0.008616927, -0.089976884, -0.08698884, 0.027957357, -0.040759858, 0.1429816, 0.054605655, -0.09953451},
   {-0.049608488, 0.05573096, 0.010563776, 0.038613386, 0.05284933, -0.048665892, 0.16855094, 0.057727557, 0.046999086, 0.09449289, 0.1138907, -0.07028805, 0.08008907, 0.07959781, 0.01831414, -0.19856429, -0.0480487, 0.014660373, -0.013908334, 0.013453899, 0.11999372, -0.037690766, -0.06568236, 0.038317475, 0.03496809, -0.15980735, 0.035144143, -0.08197474, -0.0451913, 0.06797095, -0.0364405, -0.040124096, 0.013245332, -0.049761526, 0.072799005, 0.091443904, 0.0017884242, -0.05795587, -0.028391855, -0.09553582, 0.03122287, 0.06907524, 0.03373514, 0.07738453, 0.2088763, -0.07483696, -0.087255426, -0.052626807, -0.0382628, 0.06395166, -0.036448892, 0.06269282, 0.0043651485, 0.16436525, -0.017616889, -0.062047858, -0.06622049, -0.03456324, 0.03203682, 0.07248309, 0.025218576, -0.0039755697, -0.06949333, -0.17794356, -0.020598412, 0.18117405, -0.06794209, 0.0130035225, -0.041684076, 0.15382774, -0.07453988, 0.038595125, 0.005267355, -0.01940529, -0.010352682, -0.053736, -0.061267935, -0.080003105, -0.02604594, -0.01783984},
   {-0.0078849895, 0.071628235, -0.058365036, 0.10534265, 0.01074146, -0.02510234, 0.20824105, -0.07088115, 0.010417073, -0.026018541, 0.079604015, -0.06660338, 0.054427397, -0.030343287, 0.044761743, -0.17155303, -0.046070218, -0.08675881, -0.029610127, 0.07807157, 0.20765041, -0.095140286, -0.025670752, -0.01115332, -0.018047867, -0.1880243, -0.1086243, -0.11873867, 0.060109593, 0.14972076, -0.098907344, -0.092925005, 0.08460227, 0.007366993, 0.041125778, 0.1458561, -0.026722765, -0.034130443, -0.05149937, -0.12964706, 0.059821285, 0.10927989, -0.115694545, 0.0011816659, 0.18722422, -0.066359535, -0.04108378, 0.07844032, 0.08625942, -0.061707824, -0.01647631, -0.08590528, 0.065518714, 0.16435367, 0.064533144, 0.045287464, 0.092589356, -0.07342805, -0.0664629, -0.0392179, 0.08538159, -0.029865345, 0.13032986, -0.21369511, 0.08630038, 0.07496716, -0.04155134, -0.044498295, 0.038947828, 0.15118524, -0.11657896, -0.008990385, 0.12535174, -1.1955721e-05, -0.008173574, 0.09095668, -0.09544863, 0.0031691613, -0.0074310685, -0.077892974},
   {0.024313956, 0.12124617, -0.27199647, 0.27083287, -0.05322487, -0.074081235, 0.27206448, 0.069455855, 0.02651836, -0.04480584, 0.2682022, -0.0037632484, -0.19297585, 0.04031644, 0.08069832, -0.110384196, -0.22447401, -0.082415774, 0.18744531, -0.007957061, 0.18808182, -0.19289766, -0.04077954, -0.001294363, -0.13027321, -0.2581331, -0.13406105, -0.072730936, 0.07016277, 0.031158188, 0.012203651, 0.07916754, 0.122836, 0.0072179213, -0.015084324, 0.07823137, -0.08358875, -0.0849914, 0.08632295, -0.29646868, 0.11599929, 0.33527827, -0.07912782, -0.007642535, 0.22780712, -0.08740767, -0.015301779, 0.022839705, -0.072359055, -0.008761107, 0.023807041, -0.06073792, -0.00397214, 0.11974407, 0.054801468, 0.043385662, 0.059850402, 0.08520417, -0.08602811, 0.040410116, 0.088461034, -0.44417027, 0.19015497, -0.33492306, -0.06957392, 0.2814239, -0.05625547, 0.03849664, -0.0009404719, 0.14279939, -0.22408727, -0.09096346, 0.15095113, -0.01832023, 0.013519836, -0.06559482, 0.062295984, 0.058260955, -0.08857905, -0.14734733},
   {-0.03898271, 0.024139855, -0.14560421, 0.11239914, 0.056965344, 0.052143738, 0.2927654, 0.021859918, 0.0555192, -0.018972917, 0.24379224, -0.008463598, -0.26310545, -0.05651466, 0.030590372, -0.0508099, -0.15129918, -0.04435384, 0.061470654, 0.014339716, 0.032407094, -0.11499749, 0.019477218, 0.017881354, -0.0025206418, -0.13227093, -0.11712812, 0.09476388, 0.0074238875, 0.039324477, 0.079373814, -0.06261028, 0.0999668, -0.07535562, -0.03848479, -0.034728017, 0.027943462, -0.031910885, 0.07187693, -0.17531039, 0.22205278, 0.27714446, -0.05682956, 0.03614073, 0.20033512, -0.09039991, -0.0024651214, -0.023728555, -0.05756624, -0.0062339995, 0.06974775, 0.06595346, -0.0155933425, 0.110920615, 0.054230936, 0.009732539, 0.028632265, 0.040441882, 0.025959805, -0.029619634, 0.0072289705, -0.29774085, 0.017635206, -0.23792788, 0.09292085, 0.30321738, -0.015612004, -0.092246704, 0.08258071, -0.072627544, 0.07958302, 0.0773823, 0.12862986, -0.03050905, 0.051370114, 0.06917872, -0.0654354, 0.123246185, 0.079962775, -0.04987579}};


}
# 2 "../../FPGA_AI/src/hls/matmul.cpp" 2



void hwmm_layer1(myfloat input[18*32], const myfloat weights[18*32][80], myfloat output[1][80]) {
    col: for (int j = 0; j < 80; ++j) {
#pragma HLS pipeline 10
 myfloat sum = 0;

      prod: for (int k = 0; k < 18*32; ++k){
#pragma HLS UNROLL factor=2

 sum += input[k] * weights[k][j];
      }
      output[0][j] = sum;
    }

  return;
}




void hwmm_layer2(myfloat input[1][80], const myfloat weights[80][5], myfloat output[1][5]) {

    col: for (int j = 0; j < 5; ++j) {

      myfloat sum = 0;

      prod: for (int k = 0; k < 80; ++k){
#pragma HLS UNROLL factor = 2
 sum += input[0][k] * weights[k][j];
      }
      output[0][j] = sum;
    }


  return;
}







void hw_act_layer1(myfloat input[1][80], myfloat output[1][80]){
 loop1: for (int i = 0; i < 80; i++){

  if (input[0][i] < 0.0)
   output[0][i] = 0.0;
  else
   output[0][i] = input[0][i];
 }

 return;
}




void hw_act_layer2(myfloat input[1][5], int &pred){
 int max_idx = -1;
 myfloat max_val = -999.9;
 loop1: for (int i = 0; i < 5; i++){

  if (input[0][i] > max_val){
   max_idx = i;
   max_val = input[0][i];
  }
 }
 pred = max_idx;
 return;
}




__attribute__((sdx_kernel("nn_inference", 0))) int nn_inference(myfloat input_img[18*32]){_ssdm_SpecArrayDimSize(input_img, 576);
#pragma HLS TOP name=nn_inference
# 79 "../../FPGA_AI/src/hls/matmul.cpp"

#pragma HLS ARRAY_PARTITION dim=1 type=complete variable=input_img

 myfloat temp_output[1][80] = {1};
 myfloat temp_output2[1][5] = {1};
 int prediction = -1;

 hwmm_layer1(input_img, weights::layer1_weights, temp_output);
 hw_act_layer1(temp_output, temp_output);
 hwmm_layer2(temp_output, weights::layer2_weights, temp_output2);
 hw_act_layer2(temp_output2, prediction);

 return prediction;

}
