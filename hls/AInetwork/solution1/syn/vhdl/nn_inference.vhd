-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nn_inference is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_img_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_img_ce0 : OUT STD_LOGIC;
    input_img_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_img_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_img_ce1 : OUT STD_LOGIC;
    input_img_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of nn_inference is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nn_inference_nn_inference,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.095700,HLS_SYN_LAT=23674,HLS_SYN_TPT=none,HLS_SYN_MEM=53,HLS_SYN_DSP=0,HLS_SYN_FF=554,HLS_SYN_LUT=2217,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv24_C0CCCD : STD_LOGIC_VECTOR (23 downto 0) := "110000001100110011001101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv24_80000 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv24_FFFFCB : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_layer1_weights_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_layer1_weights_V_ce0 : STD_LOGIC;
    signal weights_layer1_weights_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal weights_layer1_weights_V_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_layer1_weights_V_ce1 : STD_LOGIC;
    signal weights_layer1_weights_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal weights_layer2_weights_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weights_layer2_weights_V_ce0 : STD_LOGIC;
    signal weights_layer2_weights_V_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal weights_layer2_weights_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal weights_layer2_weights_V_ce1 : STD_LOGIC;
    signal weights_layer2_weights_V_q1 : STD_LOGIC_VECTOR (20 downto 0);
    signal k_reg_341 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_V_10_reg_352 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_reg_365 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_reg_387 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_V_12_reg_398 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_1_reg_411 : STD_LOGIC_VECTOR (2 downto 0);
    signal max_idx_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_24_reg_435 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln6_fu_451_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln6_reg_1293 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln6_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln6_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln6_reg_1302 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln6_1_fu_467_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln6_1_reg_1307 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln10_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1313 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_1313_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_477_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal or_ln10_fu_524_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln10_reg_1332 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1192_fu_548_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln1192_reg_1339 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_8_reg_1344 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_4_fu_688_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal add_ln48_fu_694_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln48_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_output_0_V_addr_1_reg_1373 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_output_0_V_addr_1_reg_1373_pp1_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_output_0_V_addr_1_reg_1373_pp1_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln885_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_1379 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_1379_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_717_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_reg_1383 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_2_fu_731_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_2_reg_1388 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln908_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_1393 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln908_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_reg_1398 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln909_fu_881_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln909_reg_1403 : STD_LOGIC_VECTOR (31 downto 0);
    signal tobool34_i_i_i105_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool34_i_i_i105_reg_1408 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_fu_893_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_1413 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1506_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1506_reg_1423 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1506_1_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1506_1_reg_1428 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_fu_1031_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_reg_1436 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln26_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln26_fu_1043_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_1445 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_1_fu_1047_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln26_1_reg_1450 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln30_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1456 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state13_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln30_reg_1456_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln30_fu_1057_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal or_ln30_fu_1096_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln30_reg_1475 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1192_2_fu_1121_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln1192_2_reg_1486 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_14_reg_1491 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_output_0_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_6_reg_1501 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal sum_V_9_fu_1244_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal add_ln65_fu_1250_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln65_reg_1511 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state17_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln65_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1516 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_fu_1273_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal max_idx_1_fu_1285_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_flush_enable : STD_LOGIC;
    signal ap_condition_pp2_exit_iter1_state14 : STD_LOGIC;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_flush_enable : STD_LOGIC;
    signal temp_output_0_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_output_0_V_ce0 : STD_LOGIC;
    signal temp_output_0_V_we0 : STD_LOGIC;
    signal temp_output_0_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal temp_output_0_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_output_0_V_ce1 : STD_LOGIC;
    signal temp_output_0_V_q1 : STD_LOGIC_VECTOR (23 downto 0);
    signal temp_output2_0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_output2_0_V_ce0 : STD_LOGIC;
    signal temp_output2_0_V_we0 : STD_LOGIC;
    signal temp_output2_0_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal temp_output2_0_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_reg_330 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_1_reg_376 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_i_1_phi_fu_415_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln1118_1_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_cast14_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_3_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln8_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln1118_5_fu_1091_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_cast16_fu_1063_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_1102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_7_fu_1154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln67_cast_fu_1262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1506_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_446_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_496_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_fu_488_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1118_fu_504_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1118_fu_508_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1118_1_fu_514_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_530_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_1_fu_542_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_5_fu_571_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_fu_564_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1118_2_fu_578_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1118_2_fu_582_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1118_3_fu_588_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_1_fu_598_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal ret_V_fu_606_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal zext_ln415_fu_621_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_V_fu_611_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_2_fu_630_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_V_11_fu_624_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_3_fu_642_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal lhs_3_fu_648_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln1192_1_fu_656_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal ret_V_1_fu_660_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_9_fu_676_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_1_fu_684_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_V_2_fu_666_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_fu_725_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_s_fu_739_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_8_fu_749_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_757_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_fu_765_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_781_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_797_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln897_fu_801_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln897_fu_807_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln897_fu_811_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_4_fu_817_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_829_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln896_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln894_fu_771_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln899_fu_849_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_3_fu_855_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln896_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln907_fu_897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_900_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln909_fu_909_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln908_fu_903_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln909_fu_912_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_918_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_fu_928_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_934_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_5_fu_948_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_fu_964_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln893_fu_956_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_969_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln912_fu_944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_975_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_9_fu_982_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4_fu_999_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln1506_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_1072_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1118_4_fu_1068_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1118_4_fu_1080_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1118_5_fu_1086_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_5_fu_1115_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_7_fu_1136_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1118_6_fu_1133_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1118_6_fu_1143_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1118_7_fu_1149_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_5_fu_1159_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal ret_V_2_fu_1167_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal zext_ln415_2_fu_1182_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_V_5_fu_1172_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_V_13_fu_1185_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_7_fu_1198_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal lhs_7_fu_1204_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln1192_3_fu_1212_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal ret_V_3_fu_1216_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_15_fu_1232_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_3_fu_1240_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_V_7_fu_1222_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln1494_fu_1267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln67_fu_1281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component nn_inference_mul_20s_24s_44_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component nn_inference_mul_21s_24s_45_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (20 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component nn_inference_weights_layer1_weights_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component nn_inference_weights_layer2_weights_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component nn_inference_temp_output_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nn_inference_temp_output2_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    weights_layer1_weights_V_U : component nn_inference_weights_layer1_weights_V
    generic map (
        DataWidth => 20,
        AddressRange => 46080,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_layer1_weights_V_address0,
        ce0 => weights_layer1_weights_V_ce0,
        q0 => weights_layer1_weights_V_q0,
        address1 => weights_layer1_weights_V_address1,
        ce1 => weights_layer1_weights_V_ce1,
        q1 => weights_layer1_weights_V_q1);

    weights_layer2_weights_V_U : component nn_inference_weights_layer2_weights_V
    generic map (
        DataWidth => 21,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_layer2_weights_V_address0,
        ce0 => weights_layer2_weights_V_ce0,
        q0 => weights_layer2_weights_V_q0,
        address1 => weights_layer2_weights_V_address1,
        ce1 => weights_layer2_weights_V_ce1,
        q1 => weights_layer2_weights_V_q1);

    temp_output_0_V_U : component nn_inference_temp_output_0_V
    generic map (
        DataWidth => 24,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_output_0_V_address0,
        ce0 => temp_output_0_V_ce0,
        we0 => temp_output_0_V_we0,
        d0 => temp_output_0_V_d0,
        q0 => temp_output_0_V_q0,
        address1 => temp_output_0_V_address1,
        ce1 => temp_output_0_V_ce1,
        q1 => temp_output_0_V_q1);

    temp_output2_0_V_U : component nn_inference_temp_output2_0_V
    generic map (
        DataWidth => 24,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_output2_0_V_address0,
        ce0 => temp_output2_0_V_ce0,
        we0 => temp_output2_0_V_we0,
        d0 => temp_output2_0_V_d0,
        q0 => temp_output2_0_V_q0);

    dcmp_64ns_64ns_1_2_no_dsp_1_U1 : component nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_446_p0,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_446_p2);

    mul_20s_24s_44_1_1_U2 : component nn_inference_mul_20s_24s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 24,
        dout_WIDTH => 44)
    port map (
        din0 => weights_layer1_weights_V_q1,
        din1 => r_V_fu_530_p1,
        dout => r_V_1_fu_542_p2);

    mul_20s_24s_44_1_1_U3 : component nn_inference_mul_20s_24s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 24,
        dout_WIDTH => 44)
    port map (
        din0 => weights_layer1_weights_V_q0,
        din1 => r_V_2_fu_630_p1,
        dout => r_V_3_fu_642_p2);

    mul_21s_24s_45_1_1_U4 : component nn_inference_mul_21s_24s_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 21,
        din1_WIDTH => 24,
        dout_WIDTH => 45)
    port map (
        din0 => weights_layer2_weights_V_q1,
        din1 => temp_output_0_V_q1,
        dout => r_V_5_fu_1115_p2);

    mul_21s_24s_45_1_1_U5 : component nn_inference_mul_21s_24s_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 21,
        din1_WIDTH => 24,
        dout_WIDTH => 45)
    port map (
        din0 => weights_layer2_weights_V_q0,
        din1 => r_V_6_reg_1501,
        dout => r_V_7_fu_1198_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln6_fu_457_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((((icmp_ln6_fu_457_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln6_fu_457_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln6_fu_457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif (((icmp_ln6_fu_457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln26_fu_1037_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter1_state14) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((icmp_ln26_fu_1037_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter1_state14) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((icmp_ln26_fu_1037_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp3_flush_enable)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln26_fu_1037_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((icmp_ln26_fu_1037_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_24_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_1037_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                empty_24_reg_435 <= ap_const_lv24_C0CCCD;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln65_reg_1516 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                empty_24_reg_435 <= select_ln67_fu_1273_p3;
            end if; 
        end if;
    end process;

    i_1_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_1037_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_1_reg_411 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln65_reg_1516 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i_1_reg_411 <= add_ln65_reg_1511;
            end if; 
        end if;
    end process;

    i_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_365 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln48_fu_700_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_reg_365 <= add_ln48_fu_694_p2;
            end if; 
        end if;
    end process;

    j_1_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_1_reg_376 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j_1_reg_376 <= add_ln26_reg_1436;
            end if; 
        end if;
    end process;

    j_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_330 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_330 <= add_ln6_reg_1293;
            end if; 
        end if;
    end process;

    k_1_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_1037_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                k_1_reg_387 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln30_fu_1051_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                k_1_reg_387 <= add_ln30_fu_1057_p2;
            end if; 
        end if;
    end process;

    k_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_457_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_341 <= ap_const_lv10_0;
            elsif (((icmp_ln10_fu_471_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_reg_341 <= add_ln10_fu_477_p2;
            end if; 
        end if;
    end process;

    max_idx_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_1037_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                max_idx_reg_423 <= ap_const_lv32_FFFFFFFF;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln65_reg_1516 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                max_idx_reg_423 <= max_idx_1_fu_1285_p3;
            end if; 
        end if;
    end process;

    sum_V_10_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_457_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sum_V_10_reg_352 <= ap_const_lv24_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln10_reg_1313_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_V_10_reg_352 <= sum_V_4_fu_688_p2;
            end if; 
        end if;
    end process;

    sum_V_12_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_1037_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                sum_V_12_reg_398 <= ap_const_lv24_0;
            elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln30_reg_1456_pp2_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                sum_V_12_reg_398 <= sum_V_9_fu_1244_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln26_reg_1436 <= add_ln26_fu_1031_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln65_reg_1511 <= add_ln65_fu_1250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln6_reg_1293 <= add_ln6_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln885_fu_711_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln908_reg_1398 <= add_ln908_fu_875_p2;
                icmp_ln908_reg_1393 <= icmp_ln908_fu_869_p2;
                p_Result_7_reg_1383 <= temp_output_0_V_q1(23 downto 23);
                sub_ln909_reg_1403 <= sub_ln909_fu_881_p2;
                tmp_V_2_reg_1388 <= tmp_V_2_fu_731_p3;
                tobool34_i_i_i105_reg_1408 <= tobool34_i_i_i105_fu_887_p2;
                trunc_ln893_reg_1413 <= trunc_ln893_fu_893_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln10_reg_1313 <= icmp_ln10_fu_471_p2;
                icmp_ln10_reg_1313_pp0_iter1_reg <= icmp_ln10_reg_1313;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln885_reg_1379 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln1506_1_reg_1428 <= icmp_ln1506_1_fu_1015_p2;
                icmp_ln1506_reg_1423 <= icmp_ln1506_fu_1009_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln30_reg_1456 <= icmp_ln30_fu_1051_p2;
                icmp_ln30_reg_1456_pp2_iter1_reg <= icmp_ln30_reg_1456;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln65_reg_1516 <= icmp_ln65_fu_1256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln885_reg_1379 <= icmp_ln885_fu_711_p2;
                temp_output_0_V_addr_1_reg_1373_pp1_iter1_reg <= temp_output_0_V_addr_1_reg_1373;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln885_reg_1379_pp1_iter2_reg <= icmp_ln885_reg_1379;
                temp_output_0_V_addr_1_reg_1373_pp1_iter2_reg <= temp_output_0_V_addr_1_reg_1373_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_471_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    or_ln10_reg_1332(9 downto 1) <= or_ln10_fu_524_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_1051_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    or_ln30_reg_1475(6 downto 1) <= or_ln30_fu_1096_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln30_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                r_V_6_reg_1501 <= temp_output_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln48_fu_700_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                temp_output_0_V_addr_1_reg_1373 <= i_cast_fu_706_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_14_reg_1491 <= r_V_5_fu_1115_p2(18 downto 18);
                trunc_ln1192_2_reg_1486 <= trunc_ln1192_2_fu_1121_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1313 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_8_reg_1344 <= r_V_1_fu_542_p2(18 downto 18);
                trunc_ln1192_reg_1339 <= trunc_ln1192_fu_548_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_1037_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    zext_ln26_1_reg_1450(2 downto 0) <= zext_ln26_1_fu_1047_p1(2 downto 0);
                    zext_ln26_reg_1445(2 downto 0) <= zext_ln26_fu_1043_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_457_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln6_1_reg_1307(6 downto 0) <= zext_ln6_1_fu_467_p1(6 downto 0);
                    zext_ln6_reg_1302(6 downto 0) <= zext_ln6_fu_463_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln6_reg_1302(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln6_1_reg_1307(15 downto 7) <= "000000000";
    or_ln10_reg_1332(0) <= '1';
    zext_ln26_reg_1445(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln26_1_reg_1450(8 downto 3) <= "000000";
    or_ln30_reg_1475(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln6_fu_457_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, icmp_ln48_fu_700_p2, ap_CS_fsm_state12, icmp_ln26_fu_1037_p2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln6_fu_457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln48_fu_700_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln48_fu_700_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln26_fu_1037_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    a_fu_863_p2 <= (p_Result_3_fu_855_p3 or and_ln896_fu_843_p2);
    add_ln10_fu_477_p2 <= std_logic_vector(unsigned(k_reg_341) + unsigned(ap_const_lv10_2));
    add_ln1118_1_fu_514_p2 <= std_logic_vector(unsigned(add_ln1118_fu_508_p2) + unsigned(zext_ln6_1_reg_1307));
    add_ln1118_2_fu_582_p2 <= std_logic_vector(unsigned(tmp_4_fu_564_p3) + unsigned(zext_ln1118_2_fu_578_p1));
    add_ln1118_3_fu_588_p2 <= std_logic_vector(unsigned(add_ln1118_2_fu_582_p2) + unsigned(zext_ln6_1_reg_1307));
    add_ln1118_4_fu_1080_p2 <= std_logic_vector(unsigned(tmp_6_fu_1072_p3) + unsigned(zext_ln1118_4_fu_1068_p1));
    add_ln1118_5_fu_1086_p2 <= std_logic_vector(unsigned(add_ln1118_4_fu_1080_p2) + unsigned(zext_ln26_1_reg_1450));
    add_ln1118_6_fu_1143_p2 <= std_logic_vector(unsigned(tmp_7_fu_1136_p3) + unsigned(zext_ln1118_6_fu_1133_p1));
    add_ln1118_7_fu_1149_p2 <= std_logic_vector(unsigned(add_ln1118_6_fu_1143_p2) + unsigned(zext_ln26_1_reg_1450));
    add_ln1118_fu_508_p2 <= std_logic_vector(unsigned(tmp_2_fu_488_p3) + unsigned(zext_ln1118_fu_504_p1));
    add_ln26_fu_1031_p2 <= std_logic_vector(unsigned(j_1_reg_376) + unsigned(ap_const_lv3_1));
    add_ln30_fu_1057_p2 <= std_logic_vector(unsigned(k_1_reg_387) + unsigned(ap_const_lv7_2));
    add_ln48_fu_694_p2 <= std_logic_vector(unsigned(i_reg_365) + unsigned(ap_const_lv7_1));
    add_ln65_fu_1250_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_415_p4) + unsigned(ap_const_lv3_1));
    add_ln6_fu_451_p2 <= std_logic_vector(unsigned(j_reg_330) + unsigned(ap_const_lv7_1));
    add_ln899_fu_849_p2 <= std_logic_vector(unsigned(trunc_ln894_fu_771_p1) + unsigned(ap_const_lv24_FFFFCB));
    add_ln908_fu_875_p2 <= std_logic_vector(unsigned(sub_ln894_fu_765_p2) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln915_fu_969_p2 <= std_logic_vector(unsigned(sub_ln915_fu_964_p2) + unsigned(select_ln893_fu_956_p3));
    and_ln1506_fu_1025_p2 <= (or_ln1506_fu_1021_p2 and grp_fu_446_p2);
    and_ln896_fu_843_p2 <= (icmp_ln897_fu_823_p2 and icmp_ln896_fu_791_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(5);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
    ap_CS_fsm_state16 <= ap_CS_fsm(8);
    ap_CS_fsm_state19 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln10_fu_471_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln10_fu_471_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln48_fu_700_p2)
    begin
        if ((icmp_ln48_fu_700_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter1_state14_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_condition_pp2_exit_iter1_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter1_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_flush_enable_assign_proc : process(icmp_ln30_fu_1051_p2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_subdone)
    begin
        if (((icmp_ln30_fu_1051_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
            ap_condition_pp2_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp2_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_flush_enable_assign_proc : process(ap_CS_fsm_pp3_stage0, icmp_ln65_fu_1256_p2, ap_block_pp3_stage0_subdone)
    begin
        if (((icmp_ln65_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
            ap_condition_pp3_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp3_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_415_p4_assign_proc : process(i_1_reg_411, add_ln65_reg_1511, ap_CS_fsm_pp3_stage0, icmp_ln65_reg_1516, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln65_reg_1516 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_i_1_phi_fu_415_p4 <= add_ln65_reg_1511;
        else 
            ap_phi_mux_i_1_phi_fu_415_p4 <= i_1_reg_411;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= max_idx_reg_423;
    grp_fu_446_p0 <= p_Result_9_fu_982_p5;
    i_cast_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_365),64));
    icmp_ln10_fu_471_p2 <= "1" when (unsigned(k_reg_341) < unsigned(ap_const_lv10_240)) else "0";
    icmp_ln1494_fu_1267_p2 <= "1" when (signed(temp_output2_0_V_q0) > signed(empty_24_reg_435)) else "0";
    icmp_ln1506_1_fu_1015_p2 <= "1" when (trunc_ln4_fu_999_p4 = ap_const_lv52_0) else "0";
    icmp_ln1506_fu_1009_p2 <= "0" when (add_ln915_fu_969_p2 = ap_const_lv11_7FF) else "1";
    icmp_ln26_fu_1037_p2 <= "1" when (j_1_reg_376 = ap_const_lv3_5) else "0";
    icmp_ln30_fu_1051_p2 <= "1" when (unsigned(k_1_reg_387) < unsigned(ap_const_lv7_50)) else "0";
    icmp_ln48_fu_700_p2 <= "1" when (i_reg_365 = ap_const_lv7_50) else "0";
    icmp_ln65_fu_1256_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_415_p4 = ap_const_lv3_5) else "0";
    icmp_ln6_fu_457_p2 <= "1" when (j_reg_330 = ap_const_lv7_50) else "0";
    icmp_ln885_fu_711_p2 <= "1" when (temp_output_0_V_q1 = ap_const_lv24_0) else "0";
    icmp_ln896_fu_791_p2 <= "1" when (signed(tmp_11_fu_781_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln897_fu_823_p2 <= "0" when (p_Result_4_fu_817_p2 = ap_const_lv24_0) else "1";
    icmp_ln908_fu_869_p2 <= "1" when (signed(lsb_index_fu_775_p2) > signed(ap_const_lv32_0)) else "0";
    input_img_address0 <= zext_ln8_fu_560_p1(10 - 1 downto 0);
    input_img_address1 <= k_cast14_fu_483_p1(10 - 1 downto 0);

    input_img_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_img_ce0 <= ap_const_logic_1;
        else 
            input_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_img_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_img_ce1 <= ap_const_logic_1;
        else 
            input_img_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    k_1_cast16_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_387),64));
    k_cast14_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_341),64));
    
    l_fu_757_p3_proc : process(p_Result_8_fu_749_p3)
    begin
        l_fu_757_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_8_fu_749_p3(i) = '1' then
                l_fu_757_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lhs_1_fu_598_p3 <= (sum_V_10_reg_352 & ap_const_lv19_0);
    lhs_3_fu_648_p3 <= (sum_V_11_fu_624_p2 & ap_const_lv19_0);
    lhs_5_fu_1159_p3 <= (sum_V_12_reg_398 & ap_const_lv19_0);
    lhs_7_fu_1204_p3 <= (sum_V_13_fu_1185_p2 & ap_const_lv19_0);
    lsb_index_fu_775_p2 <= std_logic_vector(unsigned(sub_ln894_fu_765_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lshr_ln897_fu_811_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln897_fu_807_p1(24-1 downto 0)))));
    lshr_ln908_fu_903_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_fu_897_p1),to_integer(unsigned('0' & zext_ln908_fu_900_p1(31-1 downto 0)))));
    m_1_fu_918_p3 <= 
        lshr_ln908_fu_903_p2 when (icmp_ln908_reg_1393(0) = '1') else 
        shl_ln909_fu_912_p2;
    m_3_fu_928_p2 <= std_logic_vector(unsigned(m_1_fu_918_p3) + unsigned(zext_ln911_fu_925_p1));
    m_fu_934_p4 <= m_3_fu_928_p2(63 downto 1);
    max_idx_1_fu_1285_p3 <= 
        zext_ln67_fu_1281_p1 when (icmp_ln1494_fu_1267_p2(0) = '1') else 
        max_idx_reg_423;
    or_ln10_fu_524_p2 <= (k_reg_341 or ap_const_lv10_1);
    or_ln1506_fu_1021_p2 <= (icmp_ln1506_reg_1423 or icmp_ln1506_1_reg_1428);
    or_ln30_fu_1096_p2 <= (k_1_reg_387 or ap_const_lv7_1);
    p_Result_3_fu_855_p3 <= tmp_V_2_fu_731_p3(to_integer(unsigned(add_ln899_fu_849_p2)) downto to_integer(unsigned(add_ln899_fu_849_p2))) when (to_integer(unsigned(add_ln899_fu_849_p2))>= 0 and to_integer(unsigned(add_ln899_fu_849_p2))<=23) else "-";
    p_Result_4_fu_817_p2 <= (tmp_V_2_fu_731_p3 and lshr_ln897_fu_811_p2);
    p_Result_5_fu_948_p3 <= m_3_fu_928_p2(54 downto 54);
    p_Result_7_fu_717_p3 <= temp_output_0_V_q1(23 downto 23);
    p_Result_8_fu_749_p3 <= (ap_const_lv8_FF & p_Result_s_fu_739_p4);
    p_Result_9_fu_982_p5 <= (tmp_fu_975_p3 & zext_ln912_fu_944_p1(51 downto 0));
    
    p_Result_s_fu_739_p4_proc : process(tmp_V_2_fu_731_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable p_Result_s_fu_739_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_2_fu_731_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for p_Result_s_fu_739_p4_i in 0 to 24-1 loop
                v0_cpy(p_Result_s_fu_739_p4_i) := tmp_V_2_fu_731_p3(24-1-p_Result_s_fu_739_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_739_p4 <= resvalue(24-1 downto 0);
    end process;

    r_V_2_fu_630_p1 <= input_img_q0(24 - 1 downto 0);
    r_V_fu_530_p1 <= input_img_q1(24 - 1 downto 0);
    ret_V_1_fu_660_p2 <= std_logic_vector(unsigned(lhs_3_fu_648_p3) + unsigned(trunc_ln1192_1_fu_656_p1));
    ret_V_2_fu_1167_p2 <= std_logic_vector(unsigned(lhs_5_fu_1159_p3) + unsigned(trunc_ln1192_2_reg_1486));
    ret_V_3_fu_1216_p2 <= std_logic_vector(unsigned(lhs_7_fu_1204_p3) + unsigned(trunc_ln1192_3_fu_1212_p1));
    ret_V_fu_606_p2 <= std_logic_vector(unsigned(lhs_1_fu_598_p3) + unsigned(trunc_ln1192_reg_1339));
    select_ln67_fu_1273_p3 <= 
        temp_output2_0_V_q0 when (icmp_ln1494_fu_1267_p2(0) = '1') else 
        empty_24_reg_435;
    select_ln893_fu_956_p3 <= 
        ap_const_lv11_3FF when (p_Result_5_fu_948_p3(0) = '1') else 
        ap_const_lv11_3FE;
    shl_ln909_fu_912_p2 <= std_logic_vector(shift_left(unsigned(zext_ln907_fu_897_p1),to_integer(unsigned('0' & zext_ln909_fu_909_p1(31-1 downto 0)))));
    sub_ln894_fu_765_p2 <= std_logic_vector(unsigned(ap_const_lv32_18) - unsigned(l_fu_757_p3));
    sub_ln897_fu_801_p2 <= std_logic_vector(unsigned(ap_const_lv5_E) - unsigned(trunc_ln897_fu_797_p1));
    sub_ln909_fu_881_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_fu_765_p2));
    sub_ln915_fu_964_p2 <= std_logic_vector(unsigned(ap_const_lv11_5) - unsigned(trunc_ln893_reg_1413));
    sum_V_11_fu_624_p2 <= std_logic_vector(unsigned(zext_ln415_fu_621_p1) + unsigned(sum_V_fu_611_p4));
    sum_V_13_fu_1185_p2 <= std_logic_vector(unsigned(zext_ln415_2_fu_1182_p1) + unsigned(sum_V_5_fu_1172_p4));
    sum_V_2_fu_666_p4 <= ret_V_1_fu_660_p2(42 downto 19);
    sum_V_4_fu_688_p2 <= std_logic_vector(unsigned(zext_ln415_1_fu_684_p1) + unsigned(sum_V_2_fu_666_p4));
    sum_V_5_fu_1172_p4 <= ret_V_2_fu_1167_p2(42 downto 19);
    sum_V_7_fu_1222_p4 <= ret_V_3_fu_1216_p2(42 downto 19);
    sum_V_9_fu_1244_p2 <= std_logic_vector(unsigned(zext_ln415_3_fu_1240_p1) + unsigned(sum_V_7_fu_1222_p4));
    sum_V_fu_611_p4 <= ret_V_fu_606_p2(42 downto 19);

    temp_output2_0_V_address0_assign_proc : process(ap_CS_fsm_state1, zext_ln26_reg_1445, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state16, ap_block_pp3_stage0, trunc_ln67_cast_fu_1262_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            temp_output2_0_V_address0 <= trunc_ln67_cast_fu_1262_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_output2_0_V_address0 <= zext_ln26_reg_1445(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            temp_output2_0_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            temp_output2_0_V_address0 <= "XXX";
        end if; 
    end process;


    temp_output2_0_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            temp_output2_0_V_ce0 <= ap_const_logic_1;
        else 
            temp_output2_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output2_0_V_d0_assign_proc : process(ap_CS_fsm_state1, sum_V_12_reg_398, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_output2_0_V_d0 <= sum_V_12_reg_398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            temp_output2_0_V_d0 <= ap_const_lv24_80000;
        else 
            temp_output2_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_output2_0_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            temp_output2_0_V_we0 <= ap_const_logic_1;
        else 
            temp_output2_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_V_address0_assign_proc : process(ap_CS_fsm_state1, zext_ln6_reg_1302, temp_output_0_V_addr_1_reg_1373_pp1_iter2_reg, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter3, ap_CS_fsm_state6, ap_block_pp2_stage0, ap_block_pp1_stage0, zext_ln28_fu_1102_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            temp_output_0_V_address0 <= zext_ln28_fu_1102_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            temp_output_0_V_address0 <= temp_output_0_V_addr_1_reg_1373_pp1_iter2_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output_0_V_address0 <= zext_ln6_reg_1302(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            temp_output_0_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            temp_output_0_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    temp_output_0_V_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, i_cast_fu_706_p1, ap_block_pp1_stage0, k_1_cast16_fu_1063_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            temp_output_0_V_address1 <= k_1_cast16_fu_1063_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            temp_output_0_V_address1 <= i_cast_fu_706_p1(7 - 1 downto 0);
        else 
            temp_output_0_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    temp_output_0_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            temp_output_0_V_ce0 <= ap_const_logic_1;
        else 
            temp_output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            temp_output_0_V_ce1 <= ap_const_logic_1;
        else 
            temp_output_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_V_d0_assign_proc : process(ap_CS_fsm_state1, sum_V_10_reg_352, ap_enable_reg_pp1_iter3, ap_CS_fsm_state6, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            temp_output_0_V_d0 <= ap_const_lv24_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output_0_V_d0 <= sum_V_10_reg_352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            temp_output_0_V_d0 <= ap_const_lv24_80000;
        else 
            temp_output_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_output_0_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp1_stage0_11001, icmp_ln885_reg_1379_pp1_iter2_reg, ap_enable_reg_pp1_iter3, ap_CS_fsm_state6, and_ln1506_fu_1025_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln885_reg_1379_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln1506_fu_1025_p2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            temp_output_0_V_we0 <= ap_const_logic_1;
        else 
            temp_output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_781_p4 <= lsb_index_fu_775_p2(31 downto 1);
    tmp_12_fu_829_p3 <= lsb_index_fu_775_p2(31 downto 31);
    tmp_15_fu_1232_p3 <= r_V_7_fu_1198_p2(18 downto 18);
    tmp_2_fu_488_p3 <= (k_reg_341 & ap_const_lv6_0);
    tmp_3_fu_496_p3 <= (k_reg_341 & ap_const_lv4_0);
    tmp_4_fu_564_p3 <= (or_ln10_reg_1332 & ap_const_lv6_0);
    tmp_5_fu_571_p3 <= (or_ln10_reg_1332 & ap_const_lv4_0);
    tmp_6_fu_1072_p3 <= (k_1_reg_387 & ap_const_lv2_0);
    tmp_7_fu_1136_p3 <= (or_ln30_reg_1475 & ap_const_lv2_0);
    tmp_9_fu_676_p3 <= r_V_3_fu_642_p2(18 downto 18);
    tmp_V_2_fu_731_p3 <= 
        tmp_V_fu_725_p2 when (p_Result_7_fu_717_p3(0) = '1') else 
        temp_output_0_V_q1;
    tmp_V_fu_725_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(temp_output_0_V_q1));
    tmp_fu_975_p3 <= (p_Result_7_reg_1383 & add_ln915_fu_969_p2);
    tobool34_i_i_i105_fu_887_p2 <= (xor_ln899_fu_837_p2 and a_fu_863_p2);
    trunc_ln1192_1_fu_656_p1 <= r_V_3_fu_642_p2(43 - 1 downto 0);
    trunc_ln1192_2_fu_1121_p1 <= r_V_5_fu_1115_p2(43 - 1 downto 0);
    trunc_ln1192_3_fu_1212_p1 <= r_V_7_fu_1198_p2(43 - 1 downto 0);
    trunc_ln1192_fu_548_p1 <= r_V_1_fu_542_p2(43 - 1 downto 0);
    trunc_ln4_fu_999_p4 <= m_3_fu_928_p2(52 downto 1);
    trunc_ln67_cast_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_415_p4),64));
    trunc_ln893_fu_893_p1 <= l_fu_757_p3(11 - 1 downto 0);
    trunc_ln894_fu_771_p1 <= sub_ln894_fu_765_p2(24 - 1 downto 0);
    trunc_ln897_fu_797_p1 <= sub_ln894_fu_765_p2(5 - 1 downto 0);
    weights_layer1_weights_V_address0 <= zext_ln1118_3_fu_593_p1(16 - 1 downto 0);
    weights_layer1_weights_V_address1 <= zext_ln1118_1_fu_519_p1(16 - 1 downto 0);

    weights_layer1_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights_layer1_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights_layer1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_layer1_weights_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights_layer1_weights_V_ce1 <= ap_const_logic_1;
        else 
            weights_layer1_weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    weights_layer2_weights_V_address0 <= zext_ln1118_7_fu_1154_p1(9 - 1 downto 0);
    weights_layer2_weights_V_address1 <= zext_ln1118_5_fu_1091_p1(9 - 1 downto 0);

    weights_layer2_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            weights_layer2_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights_layer2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_layer2_weights_V_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            weights_layer2_weights_V_ce1 <= ap_const_logic_1;
        else 
            weights_layer2_weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln899_fu_837_p2 <= (tmp_12_fu_829_p3 xor ap_const_lv1_1);
    zext_ln1118_1_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_1_fu_514_p2),64));
    zext_ln1118_2_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_571_p3),16));
    zext_ln1118_3_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_3_fu_588_p2),64));
    zext_ln1118_4_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_387),9));
    zext_ln1118_5_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_5_fu_1086_p2),64));
    zext_ln1118_6_fu_1133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln30_reg_1475),9));
    zext_ln1118_7_fu_1154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_7_fu_1149_p2),64));
    zext_ln1118_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_496_p3),16));
    zext_ln26_1_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_376),9));
    zext_ln26_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_376),64));
    zext_ln28_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln30_fu_1096_p2),64));
    zext_ln415_1_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_676_p3),24));
    zext_ln415_2_fu_1182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_1491),24));
    zext_ln415_3_fu_1240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1232_p3),24));
    zext_ln415_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_1344),24));
    zext_ln67_fu_1281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_411),32));
    zext_ln6_1_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_330),16));
    zext_ln6_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_330),64));
    zext_ln897_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_801_p2),24));
    zext_ln8_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_reg_1332),64));
    zext_ln907_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_reg_1388),64));
    zext_ln908_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln908_reg_1398),64));
    zext_ln909_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln909_reg_1403),64));
    zext_ln911_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tobool34_i_i_i105_reg_1408),64));
    zext_ln912_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_fu_934_p4),64));
end behav;
